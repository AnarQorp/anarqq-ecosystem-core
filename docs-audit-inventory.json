{
  "auditResults": {
    "totalFiles": 224,
    "categorizedFiles": 224,
    "duplicateCount": 0,
    "obsoleteCount": 0,
    "averageCompleteness": 0.7535714285714287
  },
  "inventory": {
    "global": [
      {
        "path": "AUTOMATION.md",
        "fullPath": "docs/AUTOMATION.md",
        "name": "AUTOMATION.md",
        "size": 13784,
        "lastModified": "2025-08-15T16:19:24.901Z",
        "contentHash": "67dc434677c1bca68affad2dd1d91389",
        "content": "# Documentation Automation System\n\nThis document describes the comprehensive documentation automation system that keeps the Q Ecosystem documentation synchronized, validated, and deployment-ready.\n\n## Overview\n\nThe documentation automation system integrates the master documentation index (Task 38) with the module documentation automation (Task 37) to provide:\n\n- **Completeness Check**: Ensures every module has all required documentation types\n- **Link Validation**: Prevents dead or outdated references in the index\n- **Role Coverage Scan**: Maintains entry points for developers, DevOps, and product managers\n- **Migration Sync Check**: Keeps Task 38 migration docs synchronized with the index\n\n## Architecture\n\n```mermaid\ngraph TB\n    A[Master Index] --> B[Completeness Check]\n    A --> C[Link Validation]\n    A --> D[Role Coverage]\n    A --> E[Migration Sync]\n    \n    F[Module Docs] --> B\n    G[Migration Docs] --> E\n    H[API Docs] --> C\n    \n    B --> I[Validation Report]\n    C --> I\n    D",
        "wordCount": 1719,
        "category": "global",
        "subcategory": "architecture",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/architecture/"
      },
      {
        "path": "DAO-DASHBOARD-ARCHITECTURE.md",
        "fullPath": "docs/DAO-DASHBOARD-ARCHITECTURE.md",
        "name": "DAO-DASHBOARD-ARCHITECTURE.md",
        "size": 16469,
        "lastModified": "2025-08-02T12:33:22.416Z",
        "contentHash": "9f426d72bf8ec45fe6e1c6fe7e1c5049",
        "content": "# DAO Dashboard Enhancement Architecture\n\n## Overview\n\nThe DAO Dashboard Enhancement introduces a comprehensive set of components that extend the existing DAO governance interface with economic and reputational data integration. This document outlines the architecture, data flow, and integration patterns for the enhanced dashboard system.\n\n## System Architecture\n\n### Component Hierarchy\n\n```\nEnhanced DAO Dashboard\n├── DAODashboard (Enhanced)\n│   ├── Existing DAO functionality\n│   └── Integration points for new components\n├── TokenOverviewPanel\n│   ├── Token information display\n│   ├── Supply metrics visualization\n│   └── Governance mechanism indicators\n├── DAOWalletOverview\n│   ├── Member wallet summary\n│   ├── Voting power calculation\n│   └── NFT collection display\n├── QuickActionsPanel\n│   ├── Role-based action buttons\n│   ├── Modal integrations\n│   └── Permission validation\n└── ProposalStatsSidebar\n    ├── Historical statistics\n    ├── Participation analytics\n    └── Trend analysis\n",
        "wordCount": 1816,
        "category": "global",
        "subcategory": "architecture",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/architecture/"
      },
      {
        "path": "INDEX.md",
        "fullPath": "docs/INDEX.md",
        "name": "INDEX.md",
        "size": 21698,
        "lastModified": "2025-08-15T05:46:29.635Z",
        "contentHash": "6fca7ffc610e61692e3d37f183297ba6",
        "content": "# Q Ecosystem Documentation Index\n\nWelcome to the comprehensive documentation for the Q Ecosystem. This index provides organized access to all documentation across the modular architecture, migration guides, APIs, deployment procedures, and operational runbooks.\n\n## 📋 Table of Contents\n\n- [Quick Start](#quick-start)\n- [Architecture Overview](#architecture-overview)\n- [Module Documentation](#module-documentation)\n- [API Documentation](#api-documentation)\n- [Migration & Transition](#migration--transition)\n- [Deployment & Operations](#deployment--operations)\n- [Integration Guides](#integration-guides)\n- [Troubleshooting & Support](#troubleshooting--support)\n- [Development Resources](#development-resources)\n\n---\n\n## 🚀 Quick Start\n\n### Essential Reading\n- [**Main README**](README.md) - Project overview and getting started\n- [**Architecture Overview**](DAO-DASHBOARD-ARCHITECTURE.md) - System architecture and design principles\n- [**Deployment Guide**](DEPLOYMENT.md) - Basic deployment instr",
        "wordCount": 1944,
        "category": "global",
        "subcategory": "architecture",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/architecture/"
      },
      {
        "path": "IPFS-INTEGRATION.md",
        "fullPath": "docs/IPFS-INTEGRATION.md",
        "name": "IPFS-INTEGRATION.md",
        "size": 14633,
        "lastModified": "2025-07-13T17:31:15.389Z",
        "contentHash": "0cf348b825b4e8ff9c6e826c6779057b",
        "content": "# IPFS Integration with Storacha\n\nThis document describes the IPFS integration with Storacha in the AnarQ Nexus Core application.\n\n## Overview\n\nThe IPFS integration provides decentralized storage capabilities using Storacha (which uses IPFS under the hood) and includes automatic space authorization for secure file storage and retrieval. The integration consists of:\n\n- **Backend Service**: Handles IPFS operations, space management, and authentication\n- **Frontend Utilities**: Provide easy-to-use functions for common IPFS operations\n- **React Hooks**: Simplify IPFS integration in React components\n\n## Features\n\n- **Space Management**: Create and manage private IPFS spaces\n- **File Operations**: Upload, download, and manage files with metadata\n- **Access Control**: Fine-grained permissions for space access\n- **Automatic Authorization**: Seamless authentication with Storacha\n- **Progress Tracking**: Real-time upload/download progress\n- **Type Safety**: Full TypeScript support\n\n## Backend Im",
        "wordCount": 1627,
        "category": "global",
        "subcategory": "vision",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/vision/"
      },
      {
        "path": "PUBLIC-PORTAL-BLUEPRINT.md",
        "fullPath": "docs/PUBLIC-PORTAL-BLUEPRINT.md",
        "name": "PUBLIC-PORTAL-BLUEPRINT.md",
        "size": 17805,
        "lastModified": "2025-08-15T16:12:16.623Z",
        "contentHash": "b4c9a9d5f09fcbebb0e7164c415de538",
        "content": "# Public Documentation Portal Blueprint\n\n## Overview\n\nThis blueprint outlines how to transform the validated master documentation index into a versioned public documentation portal that serves both internal and external audiences without breaking the existing dev/ops structure.\n\n## Architecture Vision\n\n```mermaid\ngraph TB\n    A[Master Index] --> B[Content Quality Validation]\n    B --> C[Audience Segmentation]\n    C --> D[Public Portal Generator]\n    C --> E[Internal Portal]\n    \n    F[Module Releases] --> G[Version Triggers]\n    G --> H[Auto Portal Updates]\n    \n    D --> I[External Docs Site]\n    E --> J[Internal Dev Portal]\n    \n    K[Content Pipeline] --> L[Public API Docs]\n    K --> M[Developer Guides]\n    K --> N[Integration Examples]\n    \n    O[Private Content] --> P[Internal Runbooks]\n    O --> Q[Security Procedures]\n    O --> R[Deployment Guides]\n```\n\n## Content Quality Validation Extensions\n\n### Enhanced Validation Rules\n\n```javascript\n// Extended validation for content qualit",
        "wordCount": 1781,
        "category": "global",
        "subcategory": "architecture",
        "completenessScore": 1,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/architecture/"
      },
      {
        "path": "QSOCIAL-COMPLETE-INTEGRATION.md",
        "fullPath": "docs/QSOCIAL-COMPLETE-INTEGRATION.md",
        "name": "QSOCIAL-COMPLETE-INTEGRATION.md",
        "size": 12136,
        "lastModified": "2025-07-31T16:38:54.839Z",
        "contentHash": "5f7d4f6cbf1b5e9f5093fe1ecb38bcfa",
        "content": "# 🎉 Qsocial - Integración Completa con Módulos Originales\n\n## ✅ **INTEGRACIÓN COMPLETADA AL 100%**\n\nLa implementación del ecosistema AnarQ&Q está ahora **completamente vinculada** a los módulos originales de la aplicación. El sistema de archivos con integración del ecosistema está funcionando de manera completa y transparente.\n\n## 🔗 **Componentes Integrados**\n\n### **✅ 1. Servicios Backend Integrados**\n\n#### **Ecosystem Services** (`backend/ecosystem/`)\n- ✅ **QonsentService.mjs** - Gestión de perfiles de privacidad\n- ✅ **QlockService.mjs** - Encriptación multicapa\n- ✅ **QindexService.mjs** - Indexación de metadatos descentralizada\n- ✅ **QerberosService.mjs** - Monitoreo y auditoría\n- ✅ **QNETService.mjs** - Enrutamiento de red optimizado\n\n#### **Storage Service Actualizado**\n- ✅ **StorjStorageService.mjs** - Completamente integrado con Q∞ architecture\n- ✅ **API Routes** (`backend/routes/qsocial-files.mjs`) - Endpoints completos del ecosistema\n\n### **✅ 2. Servicios Frontend Integrados*",
        "wordCount": 1344,
        "category": "global",
        "subcategory": "architecture",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/architecture/"
      },
      {
        "path": "QSOCIAL-ECOSYSTEM-INTEGRATION.md",
        "fullPath": "docs/QSOCIAL-ECOSYSTEM-INTEGRATION.md",
        "name": "QSOCIAL-ECOSYSTEM-INTEGRATION.md",
        "size": 15811,
        "lastModified": "2025-07-30T19:21:33.259Z",
        "contentHash": "3d64f4d02d2eb073609e0f060706f194",
        "content": "# Qsocial Ecosystem Integration - AnarQ&Q Q∞ Architecture\n\n## 🏗️ **Overview**\n\nThis document describes the complete implementation of Qsocial's integration with the AnarQ&Q ecosystem, following the **Q∞ modular architecture** (Entry → Process → Output). The file upload system now integrates with all five core ecosystem services: **Qonsent**, **Qlock**, **Qindex**, **Qerberos**, and **QNET**.\n\n## 🔄 **Q∞ Architecture Flow**\n\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                    Q∞ MODULAR ARCHITECTURE                     │\n├─────────────────────────────────────────────────────────────────┤\n│                                                                 │\n│  ENTRY → PROCESS → OUTPUT                                       │\n│                                                                 │\n│  sQuid Identity                                                 │\n│       ↓                                                         │\n│  ┌─────────┐   ┌──────",
        "wordCount": 1568,
        "category": "global",
        "subcategory": "architecture",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/architecture/"
      },
      {
        "path": "README.md",
        "fullPath": "docs/README.md",
        "name": "README.md",
        "size": 12142,
        "lastModified": "2025-08-15T04:58:59.446Z",
        "contentHash": "a4629e939530257ae4469151183904cf",
        "content": "# Q Ecosystem Documentation\n\nWelcome to the comprehensive documentation for the Q ecosystem. This documentation covers all modules, their APIs, deployment guides, and operational procedures.\n\n## Quick Navigation\n\n### 📋 Module Documentation\n- [Module Overview](./modules/README.md) - Complete module documentation\n- [API References](./modules/) - HTTP API specifications for all modules\n- [MCP Tools](./modules/) - Model Context Protocol tools documentation\n\n### 🔗 Integration Guides\n- [Integration Matrix](./integration/integration-matrix.md) - Module dependencies and integration patterns\n- [Cross-Module Communication](./integration/integration-matrix.md#cross-module-communication) - Event bus and standard headers\n- [Authentication Flow](./integration/integration-matrix.md#authentication-flow-squid) - sQuid identity integration\n\n### 🚀 Deployment\n- [Deployment Matrix](./deployment/deployment-matrix.md) - Environment configurations and deployment options\n- [Kubernetes Deployments](./deploym",
        "wordCount": 1024,
        "category": "global",
        "subcategory": "vision",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/vision/"
      },
      {
        "path": "STORJ-INTEGRATION.md",
        "fullPath": "docs/STORJ-INTEGRATION.md",
        "name": "STORJ-INTEGRATION.md",
        "size": 12219,
        "lastModified": "2025-07-28T20:42:05.683Z",
        "contentHash": "b4dc1cf74269cef0826adb3f3b89ef66",
        "content": "# Storj Integration for Qsocial File Storage\n\n## Overview\n\nThis document describes the implementation of Storj-based file storage for Qsocial, including S3-compatible API usage, IPFS CID generation, and Filecoin preparation.\n\n## Architecture\n\n### Components\n\n1. **StorjStorageService** (`backend/services/StorjStorageService.mjs`)\n   - Main service for Storj operations\n   - S3-compatible API client\n   - IPFS CID generation\n   - Filecoin preparation\n\n2. **File Upload API** (`backend/routes/qsocial-files.mjs`)\n   - REST endpoints for file operations\n   - Authentication and rate limiting\n   - File validation and processing\n\n3. **Frontend Service** (`src/api/qsocial-files.ts`)\n   - TypeScript API client\n   - File upload utilities\n   - Type definitions\n\n4. **React Component** (`src/components/qsocial/FileUpload.tsx`)\n   - Drag-and-drop file upload\n   - Progress tracking\n   - IPFS/Filecoin information display\n\n## Configuration\n\n### Environment Variables\n\n```bash\n# Storj Configuration\nSTORJ_ACC",
        "wordCount": 1364,
        "category": "global",
        "subcategory": "architecture",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/architecture/"
      },
      {
        "path": "disaster-recovery-procedures.md",
        "fullPath": "docs/disaster-recovery-procedures.md",
        "name": "disaster-recovery-procedures.md",
        "size": 18561,
        "lastModified": "2025-08-14T20:16:09.631Z",
        "contentHash": "41e1b7a794041274f8bd2981913ec268",
        "content": "# Disaster Recovery Procedures\n\n## Overview\n\nThis document outlines comprehensive disaster recovery procedures for the Q ecosystem, including data recovery, infrastructure failover, and service restoration protocols. These procedures are designed to minimize downtime and data loss in the event of catastrophic failures.\n\n## Recovery Time Objectives (RTO) and Recovery Point Objectives (RPO)\n\n### Service Level Objectives\n\n| Service Category | RTO | RPO | Priority |\n|------------------|-----|-----|----------|\n| Critical Services (sQuid, Qwallet, Qonsent) | 15 minutes | 5 minutes | P0 |\n| Core Services (Qdrive, Qmarket, Qindex) | 30 minutes | 15 minutes | P1 |\n| Communication Services (Qmail, Qchat) | 1 hour | 30 minutes | P2 |\n| Auxiliary Services (QpiC, QNET, DAO) | 2 hours | 1 hour | P3 |\n\n### Data Recovery Objectives\n\n| Data Type | RPO | Backup Frequency | Retention |\n|-----------|-----|------------------|-----------|\n| Transaction Data | 1 minute | Real-time replication | 7 years |\n| U",
        "wordCount": 1975,
        "category": "global",
        "subcategory": "vision",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/vision/"
      },
      {
        "path": "integration/integration-matrix.md",
        "fullPath": "docs/integration/integration-matrix.md",
        "name": "integration-matrix.md",
        "size": 6010,
        "lastModified": "2025-08-15T04:58:59.439Z",
        "contentHash": "63561e80db5688744e5a45b85c870600",
        "content": "# Q Ecosystem Integration Matrix\n\nThis document provides a comprehensive overview of how modules integrate with each other.\n\n## Module Dependencies\n\n| Module | sQuid | Qonsent | Qlock | Qindex | Qerberos | Qmask | Qwallet | IPFS |\n|--------|-------|---------|-------|--------|----------|-------|---------|------|\n| dao | ✅ | ✅ | ✅ | ✅ | ✅ | ❌ | ✅ | ❌ |\n| qchat | ✅ | ✅ | ✅ | ❌ | ✅ | ❌ | ❌ | ✅ |\n| qdrive | ✅ | ✅ | ✅ | ❌ | ❌ | ✅ | ❌ | ✅ |\n| qerberos | ✅ | ❌ | ❌ | ❌ | ✅ | ❌ | ❌ | ✅ |\n| qindex | ❌ | ❌ | ✅ | ✅ | ❌ | ❌ | ❌ | ✅ |\n| qlock | ❌ | ❌ | ✅ | ❌ | ❌ | ❌ | ❌ | ❌ |\n| qmail | ✅ | ❌ | ✅ | ❌ | ❌ | ❌ | ❌ | ✅ |\n| qmarket | ✅ | ✅ | ❌ | ✅ | ❌ | ❌ | ✅ | ✅ |\n| qmask | ✅ | ❌ | ✅ | ❌ | ❌ | ✅ | ❌ | ❌ |\n| qnet | ❌ | ❌ | ❌ | ❌ | ❌ | ❌ | ❌ | ❌ |\n| qonsent | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ | ❌ | ❌ |\n| qpic | ✅ | ✅ | ❌ | ✅ | ❌ | ✅ | ❌ | ✅ |\n| qwallet | ✅ | ❌ | ❌ | ❌ | ❌ | ❌ | ✅ | ❌ |\n| squid | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ | ❌ | ✅ |\n\n## Integration Patterns\n\n### Authentication Flow (sQuid)\n```mermaid\nsequenceDiagram\n    par",
        "wordCount": 893,
        "category": "global",
        "subcategory": "vision",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/vision/"
      },
      {
        "path": "ipfs-integration.md",
        "fullPath": "docs/ipfs-integration.md",
        "name": "ipfs-integration.md",
        "size": 2527,
        "lastModified": "2025-07-13T17:17:26.815Z",
        "contentHash": "cb1a320a528f7dcec7f95cd8dbd9bb74",
        "content": "# IPFS Integration\n\nThis document provides an overview of the IPFS integration in the AnarQ Nexus Core project.\n\n## Overview\n\nThe IPFS integration provides a unified interface for interacting with the InterPlanetary File System (IPFS) through a backend service. It includes features for file upload/download, metadata management, and space management.\n\n## Key Components\n\n### 1. IPFS Service (`src/api/ipfsService.ts`)\n\nThe main service that provides methods for interacting with the IPFS backend:\n\n- `uploadFile(file, options)`: Upload a file to IPFS\n- `downloadFile(cid, options)`: Download a file from IPFS\n- `getFileInfo(cid, spaceDID)`: Get information about a file\n- `createSpace(alias)`: Create a new IPFS space\n- `authorizeSpace(spaceDID, agentDID, delegation)`: Authorize an agent for a space\n- `updateFileMetadata(cid, metadata, spaceDID)`: Update file metadata\n- `deleteFile(cid, spaceDID)`: Delete a file from IPFS\n\n### 2. React Hook (`src/hooks/useIPFS.ts`)\n\nA React hook that provides a",
        "wordCount": 346,
        "category": "global",
        "subcategory": "vision",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/vision/"
      },
      {
        "path": "qwallet-identity-expansion/README.md",
        "fullPath": "docs/qwallet-identity-expansion/README.md",
        "name": "README.md",
        "size": 1729,
        "lastModified": "2025-08-06T17:36:18.368Z",
        "contentHash": "0b6b08db42bf520d67ec716806c64006",
        "content": "# Qwallet Identity Expansion Documentation\n\nThis directory contains comprehensive documentation for the enhanced Qwallet identity-aware wallet system.\n\n## Documentation Structure\n\n- **[Component Documentation](./components/)** - Detailed documentation for all wallet components\n- **[Integration Guides](./integration/)** - Developer guides for integrating with the wallet system\n- **[User Guides](./user-guides/)** - User-facing documentation for different identity types\n- **[Examples](./examples/)** - Code examples and usage patterns\n- **[Troubleshooting](./troubleshooting/)** - Common issues and solutions\n- **[FAQ](./faq.md)** - Frequently asked questions\n\n## Quick Start\n\nFor developers looking to integrate with the Qwallet system:\n\n1. Read the [Integration Overview](./integration/overview.md)\n2. Check the [Component Examples](./examples/components/)\n3. Review the [Identity-Specific Guides](./user-guides/)\n\n## Key Features\n\n- **Identity-Aware Contexts**: Each sQuid identity has its own w",
        "wordCount": 199,
        "category": "global",
        "subcategory": "vision",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/vision/"
      },
      {
        "path": "qwallet-identity-expansion/components/README.md",
        "fullPath": "docs/qwallet-identity-expansion/components/README.md",
        "name": "README.md",
        "size": 2484,
        "lastModified": "2025-08-06T17:36:46.161Z",
        "contentHash": "195a2b91a8101b8196dc917fc4df6392",
        "content": "# Component Documentation\n\nThis section provides detailed documentation for all Qwallet identity-aware components.\n\n## Core Components\n\n### Wallet Components\n- **[WalletDashboard](./WalletDashboard.md)** - Main wallet interface with identity-specific views\n- **[TokenTransferForm](./TokenTransferForm.md)** - Identity-aware token transfer component\n- **[TransactionHistory](./TransactionHistory.md)** - Privacy-aware transaction history display\n- **[PiWalletInterface](./PiWalletInterface.md)** - Pi Network wallet integration component\n- **[AuditStatusDisplay](./AuditStatusDisplay.md)** - Security and compliance status display\n\n### Utility Components\n- **[WalletLimitIndicator](./WalletLimitIndicator.md)** - Visual limit usage indicators\n- **[IdentityWalletSelector](./IdentityWalletSelector.md)** - Identity context switching\n- **[SecurityStatusBadge](./SecurityStatusBadge.md)** - Security status indicators\n- **[ComplianceReportViewer](./ComplianceReportViewer.md)** - Compliance report displa",
        "wordCount": 253,
        "category": "global",
        "subcategory": "integrations",
        "completenessScore": 0.5,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/integrations/"
      },
      {
        "path": "qwallet-identity-expansion/examples/README.md",
        "fullPath": "docs/qwallet-identity-expansion/examples/README.md",
        "name": "README.md",
        "size": 10113,
        "lastModified": "2025-08-06T17:40:36.548Z",
        "contentHash": "4c50f9215e0976e63b677a02ce214514",
        "content": "# Code Examples\n\nThis directory contains practical code examples for integrating with the Qwallet identity-aware wallet system.\n\n## Example Categories\n\n### [Component Examples](./components/)\nReady-to-use React component examples\n- Basic wallet dashboard implementation\n- Token transfer form with validation\n- Transaction history with filtering\n- Pi Wallet integration examples\n- Audit status displays\n\n### [Hook Examples](./hooks/)\nCustom hook implementations and usage patterns\n- Identity-aware wallet state management\n- Pi Wallet operations\n- Audit and risk monitoring\n- Error handling patterns\n\n### [Service Examples](./services/)\nService integration examples\n- Qlock signing integration\n- Qonsent permission validation\n- Qerberos audit logging\n- Custom service implementations\n\n### [Integration Examples](./integration/)\nComplete integration scenarios\n- Multi-identity wallet application\n- Enterprise compliance dashboard\n- DAO treasury management\n- Anonymous wallet operations\n\n### [Testing Exa",
        "wordCount": 952,
        "category": "global",
        "subcategory": "integrations",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/integrations/"
      },
      {
        "path": "qwallet-identity-expansion/examples/components/README.md",
        "fullPath": "docs/qwallet-identity-expansion/examples/components/README.md",
        "name": "README.md",
        "size": 2184,
        "lastModified": "2025-08-06T17:49:38.569Z",
        "contentHash": "84da1fadc224019f0aa75e3df591ef3a",
        "content": "# Component Examples\n\nThis directory contains practical React component examples for the Qwallet identity-aware wallet system.\n\n## Available Examples\n\n### Core Components\n- **[basic-wallet-dashboard.tsx](./basic-wallet-dashboard.tsx)** - Complete wallet dashboard with identity awareness\n- **[token-transfer-form.tsx](./token-transfer-form.tsx)** - Comprehensive token transfer form with validation\n- **[transaction-history.tsx](./transaction-history.tsx)** - Transaction history with filtering and privacy controls\n- **[pi-wallet-integration.tsx](./pi-wallet-integration.tsx)** - Pi Network wallet integration component\n- **[audit-status-display.tsx](./audit-status-display.tsx)** - Security and compliance status display\n\n### Utility Components\n- **[wallet-limit-indicator.tsx](./wallet-limit-indicator.tsx)** - Visual limit usage indicators\n- **[identity-selector.tsx](./identity-selector.tsx)** - Identity switching component\n- **[security-badge.tsx](./security-badge.tsx)** - Security status ind",
        "wordCount": 208,
        "category": "global",
        "subcategory": "integrations",
        "completenessScore": 0.5,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/integrations/"
      },
      {
        "path": "qwallet-identity-expansion/faq.md",
        "fullPath": "docs/qwallet-identity-expansion/faq.md",
        "name": "faq.md",
        "size": 11847,
        "lastModified": "2025-08-06T17:43:06.231Z",
        "contentHash": "d09dff4cc0403b0981843ad71251132e",
        "content": "# Frequently Asked Questions (FAQ)\n\n## General Questions\n\n### What is the Qwallet Identity Expansion?\n\nThe Qwallet Identity Expansion is an enhanced wallet system that provides identity-aware financial operations within the AnarQ & Q ecosystem. Each sQuid identity (ROOT, DAO, ENTERPRISE, CONSENTIDA, AID) has its own dedicated wallet context with appropriate permissions, limits, and governance rules.\n\n### How does identity-aware wallet context work?\n\nWhen you switch between sQuid identities, the wallet automatically switches to that identity's dedicated context. Each identity has its own:\n- Token balances and transaction history\n- Permission levels and spending limits\n- Security settings and privacy controls\n- Audit logging and compliance requirements\n\n### What identity types are supported?\n\n- **ROOT**: Full administrative access with maximum privileges\n- **DAO**: Collective governance with DAO-approved operations\n- **ENTERPRISE**: Business-focused operations with compliance controls\n- ",
        "wordCount": 1612,
        "category": "global",
        "subcategory": "general",
        "completenessScore": 0.5,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/general/"
      },
      {
        "path": "qwallet-identity-expansion/integration/advanced-patterns.md",
        "fullPath": "docs/qwallet-identity-expansion/integration/advanced-patterns.md",
        "name": "advanced-patterns.md",
        "size": 18486,
        "lastModified": "2025-08-06T17:47:02.675Z",
        "contentHash": "ed66aa8343945a448fb860f615d41617",
        "content": "# Advanced Integration Patterns\n\nThis guide covers advanced patterns for integrating with the Qwallet identity-aware wallet system.\n\n## Multi-Identity Application Architecture\n\n### Context Management Pattern\n\nFor applications that need to handle multiple identities simultaneously:\n\n```tsx\nimport React, { createContext, useContext, useReducer } from 'react';\n\ninterface MultiIdentityState {\n  identities: Identity[];\n  activeIdentity: Identity | null;\n  walletContexts: Map<string, WalletContext>;\n  crossIdentityOperations: CrossIdentityOperation[];\n}\n\ninterface WalletContext {\n  identityId: string;\n  balances: Record<string, number>;\n  limits: WalletLimits;\n  permissions: WalletPermissions;\n  lastUpdated: string;\n}\n\nconst MultiIdentityContext = createContext<{\n  state: MultiIdentityState;\n  dispatch: React.Dispatch<MultiIdentityAction>;\n} | null>(null);\n\nfunction multiIdentityReducer(\n  state: MultiIdentityState, \n  action: MultiIdentityAction\n): MultiIdentityState {\n  switch (action.type",
        "wordCount": 1684,
        "category": "global",
        "subcategory": "architecture",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/architecture/"
      },
      {
        "path": "qwallet-identity-expansion/integration/overview.md",
        "fullPath": "docs/qwallet-identity-expansion/integration/overview.md",
        "name": "overview.md",
        "size": 6857,
        "lastModified": "2025-08-06T17:38:14.798Z",
        "contentHash": "b7ef797166d781a292485d19b7d20e12",
        "content": "# Integration Overview\n\nThis guide provides an overview of integrating with the enhanced Qwallet identity-aware wallet system.\n\n## Prerequisites\n\nBefore integrating with Qwallet, ensure you have:\n\n1. **sQuid Identity System** - Active identity management\n2. **Qlock Integration** - For transaction signing\n3. **Qonsent Integration** - For permission validation\n4. **Qerberos Integration** - For audit logging\n\n## Quick Integration Steps\n\n### 1. Install Dependencies\n\n```bash\nnpm install @anarq/qwallet @anarq/squid @anarq/qlock @anarq/qonsent\n```\n\n### 2. Setup Identity Context\n\n```tsx\nimport { IdentityProvider } from '@anarq/squid';\nimport { QwalletProvider } from '@anarq/qwallet';\n\nfunction App() {\n  return (\n    <IdentityProvider>\n      <QwalletProvider>\n        <YourApp />\n      </QwalletProvider>\n    </IdentityProvider>\n  );\n}\n```\n\n### 3. Use Wallet Components\n\n```tsx\nimport { WalletDashboard, TokenTransferForm } from '@anarq/qwallet';\nimport { useIdentityManager } from '@anarq/squid';\n\n",
        "wordCount": 696,
        "category": "global",
        "subcategory": "vision",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/vision/"
      },
      {
        "path": "qwallet-identity-expansion/troubleshooting.md",
        "fullPath": "docs/qwallet-identity-expansion/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 11844,
        "lastModified": "2025-08-06T17:41:40.010Z",
        "contentHash": "8dc4e91fb4cd43448fbbf36c18b3ed10",
        "content": "# Troubleshooting Guide\n\nThis guide helps you diagnose and resolve common issues with the Qwallet identity-aware wallet system.\n\n## Quick Diagnosis\n\n### System Status Check\n\nBefore troubleshooting specific issues, check the overall system status:\n\n1. **Service Health**: Verify all services are running\n   - Qlock (signing service)\n   - Qonsent (permission service)\n   - Qerberos (audit service)\n   - Pi Wallet API (if using Pi integration)\n\n2. **Network Connectivity**: Ensure stable internet connection\n\n3. **Browser/App Status**: Check for browser issues or app updates\n\n4. **Identity Status**: Verify your identity is properly authenticated\n\n## Common Issues\n\n### 1. Transaction Failures\n\n#### Symptoms\n- \"Transaction failed\" error messages\n- Transactions stuck in pending state\n- \"Insufficient balance\" despite having funds\n\n#### Possible Causes\n- **Permission Issues**: Identity lacks required permissions\n- **Limit Exceeded**: Transaction exceeds identity limits\n- **Service Unavailable**: Qlo",
        "wordCount": 1389,
        "category": "global",
        "subcategory": "integrations",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/integrations/"
      },
      {
        "path": "qwallet-identity-expansion/user-guides/README.md",
        "fullPath": "docs/qwallet-identity-expansion/user-guides/README.md",
        "name": "README.md",
        "size": 4269,
        "lastModified": "2025-08-06T17:38:45.516Z",
        "contentHash": "1ef0c583b800354f1fe32f6f9b0f97af",
        "content": "# User Guides\n\nThis section provides user-facing documentation for different identity types in the Qwallet system.\n\n## Identity-Specific Guides\n\n### [ROOT Identity Guide](./root-identity.md)\nComplete wallet access with administrative capabilities\n- Full token access and unlimited operations\n- Emergency controls and system administration\n- Advanced audit and compliance features\n- Multi-signature and security management\n\n### [DAO Identity Guide](./dao-identity.md)\nCollective wallet management with governance controls\n- DAO-approved tokens and operations\n- Governance-based transaction limits\n- Proposal-based large transactions\n- Treasury management features\n\n### [ENTERPRISE Identity Guide](./enterprise-identity.md)\nBusiness-focused wallet operations with compliance\n- Corporate token management\n- Enhanced compliance reporting\n- Multi-signature requirements\n- Business workflow integration\n\n### [CONSENTIDA Identity Guide](./consentida-identity.md)\nSimplified wallet for minors with guardian o",
        "wordCount": 568,
        "category": "global",
        "subcategory": "integrations",
        "completenessScore": 0.5,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/integrations/"
      },
      {
        "path": "qwallet-identity-expansion/user-guides/root-identity.md",
        "fullPath": "docs/qwallet-identity-expansion/user-guides/root-identity.md",
        "name": "root-identity.md",
        "size": 8199,
        "lastModified": "2025-08-06T17:39:42.580Z",
        "contentHash": "d27379f726686de09706327181d82b41",
        "content": "# ROOT Identity Wallet Guide\n\nThe ROOT identity provides complete administrative access to the Qwallet system with maximum privileges and capabilities.\n\n## Overview\n\nAs a ROOT identity user, you have:\n- **Full System Access** - Complete wallet functionality\n- **Administrative Controls** - System management capabilities\n- **Maximum Limits** - Highest transaction and spending limits\n- **Emergency Powers** - Ability to freeze/unfreeze wallets\n- **Complete Audit Access** - Full visibility into system operations\n\n## Getting Started\n\n### Initial Setup\n\n1. **Activate ROOT Identity**\n   ```\n   Navigate to Identity Manager → Select ROOT Identity\n   ```\n\n2. **Configure Security Settings**\n   - Enable multi-signature for large transactions\n   - Set up emergency contacts\n   - Configure device verification\n   - Enable advanced audit logging\n\n3. **Review System Status**\n   - Check overall system health\n   - Review active user sessions\n   - Monitor system-wide transaction volumes\n   - Verify service ",
        "wordCount": 1091,
        "category": "global",
        "subcategory": "vision",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/vision/"
      },
      {
        "path": "COMPREHENSIVE_SYSTEM_TESTING_SUMMARY.md",
        "fullPath": "COMPREHENSIVE_SYSTEM_TESTING_SUMMARY.md",
        "name": "COMPREHENSIVE_SYSTEM_TESTING_SUMMARY.md",
        "size": 12060,
        "lastModified": "2025-08-04T19:31:57.524Z",
        "contentHash": "48e15e4c4a5ad0e5349659ccd7bbf131",
        "content": "# Comprehensive System Testing Summary\n\n## Task 14.2: Perform comprehensive system testing - COMPLETED ✅\n\nThis document summarizes the comprehensive system testing implementation for the identity management system, fulfilling all requirements from the squid-identity-expansion specification.\n\n## 🎯 Testing Achievements\n\n### 1. Complete Identity Lifecycle Testing ✅\n\n**Comprehensive System Test Suite:**\n- **File**: `src/__tests__/system/comprehensive-identity-system.test.ts`\n- **Coverage**: Complete identity lifecycle from creation to deletion\n- **Scope**: All identity types, governance models, and ecosystem integrations\n\n**Test Categories Implemented:**\n- ✅ Complete identity lifecycle workflows\n- ✅ Multiple identity types with different governance models\n- ✅ Identity creation rules and constraint enforcement\n- ✅ Ecosystem service integration coordination\n- ✅ Security and privacy feature validation\n- ✅ Performance and load testing\n- ✅ Error handling and edge cases\n- ✅ Data integrity and c",
        "wordCount": 1571,
        "category": "global",
        "subcategory": "integrations",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/integrations/"
      },
      {
        "path": "IDENTITY_INTEGRATION_SUMMARY.md",
        "fullPath": "IDENTITY_INTEGRATION_SUMMARY.md",
        "name": "IDENTITY_INTEGRATION_SUMMARY.md",
        "size": 9648,
        "lastModified": "2025-08-04T19:17:26.333Z",
        "contentHash": "cfea22561d361c901a05f8688f88b46f",
        "content": "# Identity Management System Integration Summary\n\n## Task 14.1: Integrate all components into main application - COMPLETED\n\nThis document summarizes the comprehensive integration of the identity management system into the main application, fulfilling all requirements from the squid-identity-expansion specification.\n\n## 🎯 Integration Achievements\n\n### 1. Identity Management Routes Added ✅\n\n**New Routes Integrated:**\n- `/identity` - Main identity login/access page\n- `/identity/dashboard` - Legacy dashboard (existing)\n- `/identity/management` - New comprehensive identity management hub\n- `/squid-dashboard` - Legacy dashboard route\n\n**Implementation Details:**\n- All routes are protected with `ProtectedRoute` wrapper\n- Routes properly integrated into main `App.tsx` routing system\n- Seamless navigation between identity management and other modules\n\n### 2. Identity Switcher Integration ✅\n\n**Header Integration:**\n- **Desktop View**: Identity switcher dropdown in header with compact mode\n- **M",
        "wordCount": 1195,
        "category": "global",
        "subcategory": "integrations",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/integrations/"
      },
      {
        "path": "MULTI_CHAIN_TOKEN_MANAGEMENT_SUMMARY.md",
        "fullPath": "MULTI_CHAIN_TOKEN_MANAGEMENT_SUMMARY.md",
        "name": "MULTI_CHAIN_TOKEN_MANAGEMENT_SUMMARY.md",
        "size": 9175,
        "lastModified": "2025-08-05T19:17:46.885Z",
        "contentHash": "5e61aec596b246cbb12ebe96e03b97ff",
        "content": "# Multi-Chain Token Management Implementation Summary\n\n## Overview\n\nSuccessfully implemented a comprehensive multi-chain token management system for the Qwallet identity expansion project. This system provides token discovery, validation, governance-controlled registration, and metadata management across multiple blockchain networks.\n\n## Components Implemented\n\n### 1. MultiChainTokenService (`src/services/identity/MultiChainTokenService.ts`)\n\n**Core Features:**\n- **Enhanced TokenInfo Model**: Extended token information with multi-chain support, governance controls, and security metadata\n- **Token Discovery**: Automated discovery from multiple blockchain networks and registries\n- **Token Validation**: Comprehensive validation including security checks and risk assessment\n- **Custom Token Registration**: Governance-controlled token registration with approval workflows\n- **Cross-Chain Support**: Token mapping and bridge validation across different chains\n- **Analytics and Reporting**: Tok",
        "wordCount": 1047,
        "category": "global",
        "subcategory": "vision",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/vision/"
      },
      {
        "path": "PERFORMANCE_OPTIMIZATIONS_SUMMARY.md",
        "fullPath": "PERFORMANCE_OPTIMIZATIONS_SUMMARY.md",
        "name": "PERFORMANCE_OPTIMIZATIONS_SUMMARY.md",
        "size": 8560,
        "lastModified": "2025-08-07T21:22:36.868Z",
        "contentHash": "ed557a58b85d3f4d5d110b33b6db06e3",
        "content": "# Module Registration Performance Optimizations Implementation Summary\n\n## Overview\n\nThis document summarizes the implementation of performance optimizations for the Qwallet module registration system, as specified in task 14 of the module registration specification.\n\n## Implemented Optimizations\n\n### 1. Signature Verification Result Caching\n\n**Purpose**: Reduce cryptographic overhead by caching signature verification results.\n\n**Implementation**:\n- Added signature verification cache with configurable TTL (1 hour)\n- Cache key format: `{moduleId}:{moduleVersion}`\n- Automatic cache eviction based on LRU policy\n- Integration with `ModuleVerificationService` for transparent caching\n- Cache hit/miss metrics tracking\n\n**Benefits**:\n- Eliminates redundant cryptographic operations\n- Improves response time for repeated signature verifications\n- Reduces CPU usage for signature validation\n\n**Code Location**: `src/services/ModuleRegistrationPerformanceOptimizer.ts`\n\n### 2. Lazy Loading for Module ",
        "wordCount": 1095,
        "category": "global",
        "subcategory": "vision",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/vision/"
      },
      {
        "path": "QWALLET_FRONTEND_SUMMARY.md",
        "fullPath": "QWALLET_FRONTEND_SUMMARY.md",
        "name": "QWALLET_FRONTEND_SUMMARY.md",
        "size": 8943,
        "lastModified": "2025-07-31T21:01:19.277Z",
        "contentHash": "c5cbd059a990c008819c761ad428c130",
        "content": "# 🎉 Qwallet Frontend Implementation Complete\n\n## ✅ **Complete Frontend Implementation**\n\nI have successfully implemented the complete **Qwallet frontend module** for the AnarQ&Q ecosystem, building on top of the existing QwalletService backend that was previously implemented.\n\n### 🔧 **Components Delivered**\n\n#### 1. **useQwallet Hook** ✅\n**Location**: `src/composables/useQwallet.ts`\n- ✅ **Complete TypeScript Hook** with all required functions\n- ✅ **getBalance(squidId, token)** - Get specific token balance\n- ✅ **transferFunds(...)** - Transfer tokens between identities\n- ✅ **mintNFT(...)** - Mint new NFTs with metadata\n- ✅ **signTransaction(...)** - Sign transactions with sQuid identity\n- ✅ **listUserNFTs(squidId)** - List all user's NFTs\n- ✅ **Loading and error state management**\n- ✅ **Automatic data refresh** when sQuid identity changes\n- ✅ **Full TypeScript interfaces** for all data types\n\n#### 2. **QwalletDashboard Component** ✅\n**Location**: `src/components/qwallet/QwalletDashboa",
        "wordCount": 1212,
        "category": "global",
        "subcategory": "general",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/general/"
      }
    ],
    "modules": [
      {
        "path": "modules/README.md",
        "fullPath": "docs/modules/README.md",
        "name": "README.md",
        "size": 5700,
        "lastModified": "2025-08-15T05:01:44.155Z",
        "contentHash": "cc464d7fdec5b00ab9d0b8144f6d7a65",
        "content": "# Q Ecosystem Modules Documentation\n\nThis directory contains comprehensive documentation for all Q ecosystem modules.\n\n## Available Modules\n\n### [DAO/Communities Governance API](./dao/README.md)\n\nDecentralized Autonomous Organization governance module for the Q ecosystem\n\n**Documentation:**\n- [API Reference](./dao/api-reference.md)\n- [MCP Tools](./dao/mcp-tools.md)\n- [Deployment Guide](./dao/deployment-guide.md)\n- [Integration Guide](./dao/integration-guide.md)\n- [Troubleshooting](./dao/troubleshooting.md)\n\n### [Qchat API](./qchat/README.md)\n\nInstant Messaging Module for AnarQ&Q Ecosystem\n\n**Documentation:**\n- [API Reference](./qchat/api-reference.md)\n- [MCP Tools](./qchat/mcp-tools.md)\n- [Deployment Guide](./qchat/deployment-guide.md)\n- [Integration Guide](./qchat/integration-guide.md)\n- [Troubleshooting](./qchat/troubleshooting.md)\n\n### [Qdrive API](./qdrive/README.md)\n\nDecentralized file storage with IPFS integration and encryption\n\n**Documentation:**\n- [API Reference](./qdrive/api-",
        "wordCount": 463,
        "category": "modules",
        "subcategory": "README.md",
        "completenessScore": 0.5,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/README.md/"
      },
      {
        "path": "modules/dao/README.md",
        "fullPath": "docs/modules/dao/README.md",
        "name": "README.md",
        "size": 874,
        "lastModified": "2025-08-15T05:01:44.034Z",
        "contentHash": "62fb19c909827492225dd46e47e1699b",
        "content": "# DAO/Communities Governance API\n\nDecentralized Autonomous Organization governance module for the Q ecosystem\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/dao\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/dao\ndocker-compose up\n```\n\n## Key Features\n\n- **8 HTTP endpoints** for REST API access\n- **5 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 110,
        "category": "modules",
        "subcategory": "dao",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/dao/"
      },
      {
        "path": "modules/dao/api-reference.md",
        "fullPath": "docs/modules/dao/api-reference.md",
        "name": "api-reference.md",
        "size": 7439,
        "lastModified": "2025-08-15T05:01:44.022Z",
        "contentHash": "a8fa069332c05eb4549c6dbdaa83b0cc",
        "content": "# DAO/Communities Governance API - API Reference\n\nDecentralized Autonomous Organization governance module for the Q ecosystem\n\n**Version:** 1.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/dao`\n- Production: `https://api.q.network/dao`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n### GET /health\n\n**Health check endpoint**\n\n#### Responses\n\n**200**: Service is healthy\n\nSchema: HealthRespons",
        "wordCount": 907,
        "category": "modules",
        "subcategory": "dao",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/dao/"
      },
      {
        "path": "modules/dao/api.md",
        "fullPath": "docs/modules/dao/api.md",
        "name": "api.md",
        "size": 3394,
        "lastModified": "2025-08-14T20:48:08.614Z",
        "contentHash": "6dd2d617bcee1f76048465200ac53671",
        "content": "# Dao API Documentation\n\n## Overview\nDecentralized Autonomous Organization governance module for the Q ecosystem\n\n## Base URL\n`http://localhost:3014`\n\n## Authentication\n- **BearerAuth**: bearer authentication\n\n## Endpoints\n\n### GET /health\nHealth check endpoint\n\n**Operation ID:** `getHealth`\n\n\n\n\n\n**Responses:**\n- **200**: Service is healthy\n\n\n### GET /api/v1/daos\nList all DAOs\n\n**Operation ID:** `listDAOs`\n\n**Parameters:**\n- `limit` (query): No description\n- `offset` (query): No description\n- `visibility` (query): No description\n\n\n\n**Responses:**\n- **200**: List of DAOs\n\n\n### GET /api/v1/daos/{daoId}\nGet DAO details\n\n**Operation ID:** `getDAO`\n\n**Parameters:**\n- `daoId` (path): No description\n\n\n\n**Responses:**\n- **200**: DAO details\n- **404**: DAO not found\n\n\n### POST /api/v1/daos/{daoId}/join\nJoin a DAO\n\n**Operation ID:** `joinDAO`\n\n**Parameters:**\n- `daoId` (path): No description\n\n**Request Body:**\n```json\n{\n  \"$ref\": \"#/components/schemas/JoinDAORequest\"\n}\n```\n\n**Responses:**\n- **20",
        "wordCount": 401,
        "category": "modules",
        "subcategory": "dao",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/dao/"
      },
      {
        "path": "modules/dao/deployment-guide.md",
        "fullPath": "docs/modules/dao/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 2994,
        "lastModified": "2025-08-15T05:01:44.029Z",
        "contentHash": "6e62f3184b5b5e9e52912b6e5be7dccd",
        "content": "# DAO/Communities Governance API - Deployment Guide\n\nThis guide covers deployment options for dao in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/dao\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\ndao_MODE=standalone\ndao_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\nexport d",
        "wordCount": 331,
        "category": "modules",
        "subcategory": "dao",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/dao/"
      },
      {
        "path": "modules/dao/deployment.md",
        "fullPath": "docs/modules/dao/deployment.md",
        "name": "deployment.md",
        "size": 6051,
        "lastModified": "2025-08-14T20:48:08.618Z",
        "contentHash": "587aa21cf6e6bbac1f68201cb6cd6869",
        "content": "# Dao Deployment Guide\n\n## Overview\nDecentralized Autonomous Organization governance module for the Q ecosystem\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/dao\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f dao\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport DAO_MODE=standalone\n\n# Start the service\nnpm run dev\n\n# ",
        "wordCount": 748,
        "category": "modules",
        "subcategory": "dao",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/dao/"
      },
      {
        "path": "modules/dao/examples.md",
        "fullPath": "docs/modules/dao/examples.md",
        "name": "examples.md",
        "size": 3405,
        "lastModified": "2025-08-14T20:48:08.621Z",
        "contentHash": "f0ce712a7bf1c73d095770da6a556609",
        "content": "# Dao Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3110',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass DaoClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        return respo",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "dao",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/dao/"
      },
      {
        "path": "modules/dao/integration-guide.md",
        "fullPath": "docs/modules/dao/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10240,
        "lastModified": "2025-08-15T05:01:44.032Z",
        "contentHash": "a4a41fc24a1674f41c26e0b907cc660e",
        "content": "# DAO/Communities Governance API - Integration Guide\n\nThis guide provides examples and patterns for integrating dao with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass daoClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/dao',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.interceptors.r",
        "wordCount": 1164,
        "category": "modules",
        "subcategory": "dao",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/dao/"
      },
      {
        "path": "modules/dao/mcp-tools.md",
        "fullPath": "docs/modules/dao/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 5223,
        "lastModified": "2025-08-15T05:01:44.027Z",
        "contentHash": "1406741b0a7fdcf7213a0af22a6a3986",
        "content": "# dao - MCP Tools\n\nDAO/Communities governance tools for the Q ecosystem\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/dao',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### dao.vote\n\nCast a vote on a DAO proposal\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| daoId | string | Yes | DAO identifier |\n| proposalId | string | Yes | Proposal identifier |\n| voterId | string | Yes | Voter's sQuid identity |\n| option | string | Yes | Voting option (e.g., 'Yes', 'No', 'Abstain') |\n| signature | string | Yes | Cryptographic signature of th",
        "wordCount": 792,
        "category": "modules",
        "subcategory": "dao",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/dao/"
      },
      {
        "path": "modules/dao/mcp.md",
        "fullPath": "docs/modules/dao/mcp.md",
        "name": "mcp.md",
        "size": 8198,
        "lastModified": "2025-08-14T20:48:08.615Z",
        "contentHash": "d8c376ade1ad9bc5ec0fe51ad35eae1a",
        "content": "# Dao MCP Tools\n\n## Overview\nDAO/Communities governance tools for the Q ecosystem\n\n## Available Tools\n\n## dao.vote\n\nCast a vote on a DAO proposal\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"daoId\": {\n      \"type\": \"string\",\n      \"description\": \"DAO identifier\"\n    },\n    \"proposalId\": {\n      \"type\": \"string\",\n      \"description\": \"Proposal identifier\"\n    },\n    \"voterId\": {\n      \"type\": \"string\",\n      \"description\": \"Voter's sQuid identity\"\n    },\n    \"option\": {\n      \"type\": \"string\",\n      \"description\": \"Voting option (e.g., 'Yes', 'No', 'Abstain')\"\n    },\n    \"signature\": {\n      \"type\": \"string\",\n      \"description\": \"Cryptographic signature of the vote\"\n    }\n  },\n  \"required\": [\n    \"daoId\",\n    \"proposalId\",\n    \"voterId\",\n    \"option\",\n    \"signature\"\n  ]\n}\n```\n\n**Output Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"success\": {\n      \"type\": \"boolean\"\n    },\n    \"voteId\": {\n      \"type\": \"string\"\n    },\n    \"weight\": {\n      \"",
        "wordCount": 871,
        "category": "modules",
        "subcategory": "dao",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/dao/"
      },
      {
        "path": "modules/dao/runbook.md",
        "fullPath": "docs/modules/dao/runbook.md",
        "name": "runbook.md",
        "size": 6907,
        "lastModified": "2025-08-14T20:48:08.620Z",
        "contentHash": "7d5ad575db7005109c63771dbfb99ae6",
        "content": "# Dao Operational Runbook\n\n## Service Overview\n\n## Service Description\nDecentralized Autonomous Organization governance module for the Q ecosystem\n\n## Key Features\n- Governance\n- Voting systems\n- Rule enforcement\n- Decision tracking\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3110\n- **Protocol**: HTTP/REST + MCP\n- **Database**: PostgreSQL\n- **Storage**: IPFS\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n- Queue depths and processing times\n\n## Alerting Thresholds\n- **Cri",
        "wordCount": 993,
        "category": "modules",
        "subcategory": "dao",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/dao/"
      },
      {
        "path": "modules/dao/troubleshooting.md",
        "fullPath": "docs/modules/dao/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5161,
        "lastModified": "2025-08-15T05:01:44.030Z",
        "contentHash": "c238919ef24b2f4a96844ebf08d53b0e",
        "content": "# DAO/Communities Governance API - Troubleshooting Guide\n\nThis guide helps resolve common issues with dao.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep dao\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   const d",
        "wordCount": 635,
        "category": "modules",
        "subcategory": "dao",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/dao/"
      },
      {
        "path": "modules/qchat/README.md",
        "fullPath": "docs/modules/qchat/README.md",
        "name": "README.md",
        "size": 829,
        "lastModified": "2025-08-15T05:01:44.050Z",
        "contentHash": "033cfeb86f6f721d066eca3322e98aef",
        "content": "# Qchat API\n\nInstant Messaging Module for AnarQ&Q Ecosystem\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qchat\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qchat\ndocker-compose up\n```\n\n## Key Features\n\n- **10 HTTP endpoints** for REST API access\n- **5 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 106,
        "category": "modules",
        "subcategory": "qchat",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qchat/"
      },
      {
        "path": "modules/qchat/api-reference.md",
        "fullPath": "docs/modules/qchat/api-reference.md",
        "name": "api-reference.md",
        "size": 12593,
        "lastModified": "2025-08-15T05:01:44.038Z",
        "contentHash": "2b871b563de7346c92646ce0175b4eca",
        "content": "# Qchat API - API Reference\n\nInstant Messaging Module for AnarQ&Q Ecosystem\n\n**Version:** 1.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/qchat`\n- Production: `https://api.q.network/qchat`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n### POST /rooms\n\n**Create chat room**\n\nCreate a new chat room with specified configuration\n\n#### Request Body\n\nContent-Type: application/json\n\nSchema: Creat",
        "wordCount": 1571,
        "category": "modules",
        "subcategory": "qchat",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qchat/"
      },
      {
        "path": "modules/qchat/api.md",
        "fullPath": "docs/modules/qchat/api.md",
        "name": "api.md",
        "size": 6561,
        "lastModified": "2025-08-14T20:48:08.623Z",
        "contentHash": "a25a184603e512fcf3626330cff4c9ef",
        "content": "# Qchat API Documentation\n\n## Overview\nInstant Messaging Module for AnarQ&Q Ecosystem\n\n## Base URL\n`http://localhost:3001/api/qchat`\n\n## Authentication\n- **squidAuth**: bearer authentication\n\n## Endpoints\n\n### POST /rooms\nCreate chat room\n\n**Operation ID:** `createRoom`\n\n\n\n**Request Body:**\n```json\n{\n  \"$ref\": \"#/components/schemas/CreateRoomRequest\"\n}\n```\n\n**Responses:**\n- **201**: Room created successfully\n- **400**: undefined\n- **401**: undefined\n- **403**: undefined\n- **429**: undefined\n- **500**: undefined\n\n\n### GET /rooms\nList chat rooms\n\n**Operation ID:** `listRooms`\n\n**Parameters:**\n- `type` (query): Filter by room type\n- `limit` (query): Maximum rooms to return\n- `offset` (query): Pagination offset\n- `search` (query): Search room names and descriptions\n\n\n\n**Responses:**\n- **200**: Rooms retrieved successfully\n- **401**: undefined\n- **500**: undefined\n\n\n### GET /rooms/{roomId}\nGet room details\n\n**Operation ID:** `getRoomDetails`\n\n**Parameters:**\n- `roomId` (path): Chat room ID\n",
        "wordCount": 822,
        "category": "modules",
        "subcategory": "qchat",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qchat/"
      },
      {
        "path": "modules/qchat/deployment-guide.md",
        "fullPath": "docs/modules/qchat/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3001,
        "lastModified": "2025-08-15T05:01:44.044Z",
        "contentHash": "87c38d6915db1129128a61878ecf8c64",
        "content": "# Qchat API - Deployment Guide\n\nThis guide covers deployment options for qchat in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qchat\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqchat_MODE=standalone\nqchat_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\nexport qchat_MODE=hyb",
        "wordCount": 330,
        "category": "modules",
        "subcategory": "qchat",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qchat/"
      },
      {
        "path": "modules/qchat/deployment.md",
        "fullPath": "docs/modules/qchat/deployment.md",
        "name": "deployment.md",
        "size": 6066,
        "lastModified": "2025-08-14T20:48:08.625Z",
        "contentHash": "aa3451e62f9fc3148cd90ce6087567c0",
        "content": "# Qchat Deployment Guide\n\n## Overview\nInstant Messaging Module for AnarQ&Q Ecosystem\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qchat\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f qchat\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport QCHAT_MODE=standalone\n\n# Start the service\nnpm run dev\n\n# Or for production\nnpm",
        "wordCount": 745,
        "category": "modules",
        "subcategory": "qchat",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qchat/"
      },
      {
        "path": "modules/qchat/examples.md",
        "fullPath": "docs/modules/qchat/examples.md",
        "name": "examples.md",
        "size": 3449,
        "lastModified": "2025-08-14T20:48:08.627Z",
        "contentHash": "b6280e3f10fc8034c5ef564b3367bacf",
        "content": "# Qchat Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3001',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass QchatClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        return r",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "qchat",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qchat/"
      },
      {
        "path": "modules/qchat/integration-guide.md",
        "fullPath": "docs/modules/qchat/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10289,
        "lastModified": "2025-08-15T05:01:44.048Z",
        "contentHash": "bfe8855733c6fa49cd7993e4ec578175",
        "content": "# Qchat API - Integration Guide\n\nThis guide provides examples and patterns for integrating qchat with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qchatClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qchat',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.interceptors.response.use(\n  ",
        "wordCount": 1163,
        "category": "modules",
        "subcategory": "qchat",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qchat/"
      },
      {
        "path": "modules/qchat/mcp-tools.md",
        "fullPath": "docs/modules/qchat/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 9137,
        "lastModified": "2025-08-15T05:01:44.043Z",
        "contentHash": "23cda63beca27bd43ab5f5bb4549b105",
        "content": "# qchat - MCP Tools\n\nQchat MCP Tools - Instant Messaging Module\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qchat',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### qchat.post\n\nPost message to chat room with end-to-end encryption\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| squidId | string | Yes | Sender sQuid identity ID |\n| roomId | string | Yes | Chat room ID |\n| content | string | Yes | Message content (will be encrypted) |\n| messageType | string | No | Type of message |\n| replyTo | string | No | Message ID being replied",
        "wordCount": 1500,
        "category": "modules",
        "subcategory": "qchat",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qchat/"
      },
      {
        "path": "modules/qchat/mcp.md",
        "fullPath": "docs/modules/qchat/mcp.md",
        "name": "mcp.md",
        "size": 16309,
        "lastModified": "2025-08-14T20:48:08.624Z",
        "contentHash": "ca61d559c2dea3a84b1107fb999c71a7",
        "content": "# Qchat MCP Tools\n\n## Overview\nQchat MCP Tools - Instant Messaging Module\n\n## Available Tools\n\n## qchat.post\n\nPost message to chat room with end-to-end encryption\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"squidId\": {\n      \"type\": \"string\",\n      \"description\": \"Sender sQuid identity ID\"\n    },\n    \"roomId\": {\n      \"type\": \"string\",\n      \"description\": \"Chat room ID\"\n    },\n    \"content\": {\n      \"type\": \"string\",\n      \"description\": \"Message content (will be encrypted)\"\n    },\n    \"messageType\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"TEXT\",\n        \"IMAGE\",\n        \"FILE\",\n        \"SYSTEM\",\n        \"REACTION\"\n      ],\n      \"default\": \"TEXT\",\n      \"description\": \"Type of message\"\n    },\n    \"replyTo\": {\n      \"type\": \"string\",\n      \"description\": \"Message ID being replied to (optional)\"\n    },\n    \"mentions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Array of mentioned sQuid IDs\"\n   ",
        "wordCount": 1622,
        "category": "modules",
        "subcategory": "qchat",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qchat/"
      },
      {
        "path": "modules/qchat/runbook.md",
        "fullPath": "docs/modules/qchat/runbook.md",
        "name": "runbook.md",
        "size": 6970,
        "lastModified": "2025-08-14T20:48:08.626Z",
        "contentHash": "438c5ed4b12e31968d73656d7e158712",
        "content": "# Qchat Operational Runbook\n\n## Service Overview\n\n## Service Description\nInstant Messaging Module for AnarQ&Q Ecosystem\n\n## Key Features\n- Instant messaging\n- Group management\n- Moderation tools\n- Real-time events\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3001\n- **Protocol**: HTTP/REST + MCP\n- **Database**: Redis + PostgreSQL\n- **Storage**: IPFS + Redis\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n- Qlock (message encryption)\n- WebSocket infrastructure\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n- Queue depths",
        "wordCount": 1002,
        "category": "modules",
        "subcategory": "qchat",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qchat/"
      },
      {
        "path": "modules/qchat/troubleshooting.md",
        "fullPath": "docs/modules/qchat/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5150,
        "lastModified": "2025-08-15T05:01:44.047Z",
        "contentHash": "555fe2c77369c2bf4dec694d8220049a",
        "content": "# Qchat API - Troubleshooting Guide\n\nThis guide helps resolve common issues with qchat.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qchat\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   const decoded = jwt.deco",
        "wordCount": 634,
        "category": "modules",
        "subcategory": "qchat",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qchat/"
      },
      {
        "path": "modules/qdrive/README.md",
        "fullPath": "docs/modules/qdrive/README.md",
        "name": "README.md",
        "size": 856,
        "lastModified": "2025-08-15T05:01:44.062Z",
        "contentHash": "4ec85db727c4f74d2348e3fc4bcb8e47",
        "content": "# Qdrive API\n\nDecentralized file storage with IPFS integration and encryption\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qdrive\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qdrive\ndocker-compose up\n```\n\n## Key Features\n\n- **6 HTTP endpoints** for REST API access\n- **undefined MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 108,
        "category": "modules",
        "subcategory": "qdrive",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qdrive/"
      },
      {
        "path": "modules/qdrive/api-reference.md",
        "fullPath": "docs/modules/qdrive/api-reference.md",
        "name": "api-reference.md",
        "size": 5631,
        "lastModified": "2025-08-15T05:01:44.053Z",
        "contentHash": "9eba332c65150446a5037fe2f19f935e",
        "content": "# Qdrive API - API Reference\n\nDecentralized file storage with IPFS integration and encryption\n\n**Version:** 1.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/qdrive`\n- Production: `https://api.q.network/qdrive`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n### GET /health\n\n**Health check**\n\n#### Responses\n\n**200**: Service is healthy\n\nSchema: HealthResponse\n\n\n### POST /files\n\n**Upload file*",
        "wordCount": 706,
        "category": "modules",
        "subcategory": "qdrive",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qdrive/"
      },
      {
        "path": "modules/qdrive/api.md",
        "fullPath": "docs/modules/qdrive/api.md",
        "name": "api.md",
        "size": 3945,
        "lastModified": "2025-08-14T20:48:08.628Z",
        "contentHash": "3a491dc806e9bea8371a4f712760abed",
        "content": "# Qdrive API Documentation\n\n## Overview\nDecentralized file storage with IPFS integration and encryption\n\n## Base URL\n`http://localhost:3008`\n\n## Authentication\n- **squidAuth**: bearer authentication\n\n## Endpoints\n\n### GET /health\nHealth check\n\n**Operation ID:** `healthCheck`\n\n\n\n\n\n**Responses:**\n- **200**: Service is healthy\n\n\n### POST /files\nUpload file\n\n**Operation ID:** `uploadFile`\n\n\n\n**Request Body:**\n```json\n{}\n```\n\n**Responses:**\n- **201**: File uploaded successfully\n- **400**: Invalid request\n- **413**: File too large\n\n\n### GET /files\nList user files\n\n**Operation ID:** `listFiles`\n\n**Parameters:**\n- `limit` (query): No description\n- `offset` (query): No description\n- `tags` (query): No description\n- `privacy` (query): No description\n- `sort` (query): No description\n- `order` (query): No description\n\n\n\n**Responses:**\n- **200**: Files retrieved successfully\n\n\n### GET /files/{cid}\nDownload file\n\n**Operation ID:** `downloadFile`\n\n**Parameters:**\n- `cid` (path): IPFS Content ID\n- `do",
        "wordCount": 475,
        "category": "modules",
        "subcategory": "qdrive",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qdrive/"
      },
      {
        "path": "modules/qdrive/deployment-guide.md",
        "fullPath": "docs/modules/qdrive/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3016,
        "lastModified": "2025-08-15T05:01:44.056Z",
        "contentHash": "6fec76941415916f19492ea3cecfca2f",
        "content": "# Qdrive API - Deployment Guide\n\nThis guide covers deployment options for qdrive in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qdrive\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqdrive_MODE=standalone\nqdrive_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\nexport qdrive_MO",
        "wordCount": 330,
        "category": "modules",
        "subcategory": "qdrive",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qdrive/"
      },
      {
        "path": "modules/qdrive/deployment.md",
        "fullPath": "docs/modules/qdrive/deployment.md",
        "name": "deployment.md",
        "size": 6105,
        "lastModified": "2025-08-14T20:48:08.629Z",
        "contentHash": "5f2206e41ae1fb80e74176235203cb65",
        "content": "# Qdrive Deployment Guide\n\n## Overview\nDecentralized file storage with IPFS integration and encryption\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qdrive\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f qdrive\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport QDRIVE_MODE=standalone\n\n# Start the service\nnpm run dev\n\n# ",
        "wordCount": 747,
        "category": "modules",
        "subcategory": "qdrive",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qdrive/"
      },
      {
        "path": "modules/qdrive/examples.md",
        "fullPath": "docs/modules/qdrive/examples.md",
        "name": "examples.md",
        "size": 3463,
        "lastModified": "2025-08-14T20:48:08.630Z",
        "contentHash": "e168a3be3715d3cec8ae345dd33afd33",
        "content": "# Qdrive Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3008',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass QdriveClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        return",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "qdrive",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qdrive/"
      },
      {
        "path": "modules/qdrive/integration-guide.md",
        "fullPath": "docs/modules/qdrive/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10171,
        "lastModified": "2025-08-15T05:01:44.061Z",
        "contentHash": "c5b990ecb34ffe11cda553c6eec9f80e",
        "content": "# Qdrive API - Integration Guide\n\nThis guide provides examples and patterns for integrating qdrive with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qdriveClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qdrive',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.interceptors.response.use",
        "wordCount": 1147,
        "category": "modules",
        "subcategory": "qdrive",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qdrive/"
      },
      {
        "path": "modules/qdrive/mcp-tools.md",
        "fullPath": "docs/modules/qdrive/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 1195,
        "lastModified": "2025-08-15T05:01:44.055Z",
        "contentHash": "22319021e9043923f47d84e57cea81c9",
        "content": "# qdrive - MCP Tools\n\nDecentralized file storage with IPFS integration and encryption\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qdrive',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n\n\n\n\n\n## Error Handling\n\nMCP tools return standardized error responses:\n\n```javascript\n{\n  \"success\": false,\n  \"error\": \"ERROR_CODE\",\n  \"message\": \"Human readable error message\",\n  \"details\": {}\n}\n```\n\n## Best Practices\n\n1. **Always check success status** before processing results\n2. **Handle errors gracefully** with appropriate fallbacks\n3. **Use idempotency keys** for write operations\n4. **Implement ret",
        "wordCount": 148,
        "category": "modules",
        "subcategory": "qdrive",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qdrive/"
      },
      {
        "path": "modules/qdrive/mcp.md",
        "fullPath": "docs/modules/qdrive/mcp.md",
        "name": "mcp.md",
        "size": 11724,
        "lastModified": "2025-08-14T20:48:08.629Z",
        "contentHash": "7a1157f8d85253673c891ea94004b9de",
        "content": "# Qdrive MCP Tools\n\n## Overview\nDecentralized file storage with IPFS integration and encryption\n\n## Available Tools\n\n## qdrive.put\n\nUpload file with metadata to Qdrive\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"file\": {\n      \"type\": \"string\",\n      \"description\": \"Base64 encoded file content or file path\"\n    },\n    \"filename\": {\n      \"type\": \"string\",\n      \"description\": \"Name of the file\"\n    },\n    \"metadata\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"File description\"\n        },\n        \"tags\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"File tags for categorization\"\n        },\n        \"privacy\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"public\",\n            \"private\",\n            \"dao-only\"\n          ],\n          \"default\": \"private\",\n          \"description\": \"Privacy leve",
        "wordCount": 1245,
        "category": "modules",
        "subcategory": "qdrive",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qdrive/"
      },
      {
        "path": "modules/qdrive/runbook.md",
        "fullPath": "docs/modules/qdrive/runbook.md",
        "name": "runbook.md",
        "size": 7006,
        "lastModified": "2025-08-14T20:48:08.630Z",
        "contentHash": "15324a860d2297f8c7178c32d1438830",
        "content": "# Qdrive Operational Runbook\n\n## Service Overview\n\n## Service Description\nDecentralized file storage with IPFS integration and encryption\n\n## Key Features\n- File storage\n- IPFS integration\n- Access control\n- Data retention\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3008\n- **Protocol**: HTTP/REST + MCP\n- **Database**: IPFS + Metadata DB\n- **Storage**: IPFS Primary\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n- Qlock (file encryption)\n- Qindex (file indexing)\n- Qmask (privacy profiles)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilizati",
        "wordCount": 1009,
        "category": "modules",
        "subcategory": "qdrive",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qdrive/"
      },
      {
        "path": "modules/qdrive/troubleshooting.md",
        "fullPath": "docs/modules/qdrive/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5156,
        "lastModified": "2025-08-15T05:01:44.061Z",
        "contentHash": "81b43fbce2e38651b66af5674ceb3409",
        "content": "# Qdrive API - Troubleshooting Guide\n\nThis guide helps resolve common issues with qdrive.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qdrive\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   const decoded = jwt.d",
        "wordCount": 634,
        "category": "modules",
        "subcategory": "qdrive",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qdrive/"
      },
      {
        "path": "modules/qerberos/README.md",
        "fullPath": "docs/modules/qerberos/README.md",
        "name": "README.md",
        "size": 1016,
        "lastModified": "2025-08-15T05:01:44.069Z",
        "contentHash": "1532485b592e1342313e96a4ff5dc4cb",
        "content": "# Qerberos Security & Audit API\n\nQerberos provides security monitoring, audit logging, anomaly detection, and risk scoring\nfor the Q ecosystem. It offers immutable audit trails, ML-based threat detection,\nand automated compliance reporting.\n\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qerberos\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qerberos\ndocker-compose up\n```\n\n## Key Features\n\n- **8 HTTP endpoints** for REST API access\n- **5 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with",
        "wordCount": 130,
        "category": "modules",
        "subcategory": "qerberos",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qerberos/"
      },
      {
        "path": "modules/qerberos/api-reference.md",
        "fullPath": "docs/modules/qerberos/api-reference.md",
        "name": "api-reference.md",
        "size": 7520,
        "lastModified": "2025-08-15T05:01:44.065Z",
        "contentHash": "b48418049633258e00738d89cea2caff",
        "content": "# Qerberos Security & Audit API - API Reference\n\nQerberos provides security monitoring, audit logging, anomaly detection, and risk scoring\nfor the Q ecosystem. It offers immutable audit trails, ML-based threat detection,\nand automated compliance reporting.\n\n\n**Version:** 1.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/qerberos`\n- Production: `https://api.q.network/qerberos`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-co",
        "wordCount": 962,
        "category": "modules",
        "subcategory": "qerberos",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qerberos/"
      },
      {
        "path": "modules/qerberos/api.md",
        "fullPath": "docs/modules/qerberos/api.md",
        "name": "api.md",
        "size": 3580,
        "lastModified": "2025-08-14T20:48:08.633Z",
        "contentHash": "3631c68c1fa2f979db8ec215378fd556",
        "content": "# Qerberos API Documentation\n\n## Overview\nQerberos provides security monitoring, audit logging, anomaly detection, and risk scoring\nfor the Q ecosystem. It offers immutable audit trails, ML-based threat detection,\nand automated compliance reporting.\n\n\n## Base URL\n`http://localhost:3000`\n\n## Authentication\n- **BearerAuth**: bearer authentication\n\n## Endpoints\n\n### GET /health\nHealth check\n\n**Operation ID:** `getHealth`\n\n\n\n\n\n**Responses:**\n- **200**: Service is healthy\n\n\n### POST /audit\nLog audit event\n\n**Operation ID:** `logAuditEvent`\n\n\n\n**Request Body:**\n```json\n{\n  \"$ref\": \"#/components/schemas/AuditEventRequest\"\n}\n```\n\n**Responses:**\n- **201**: Audit event logged successfully\n- **400**: Invalid request\n- **401**: Unauthorized\n\n\n### GET /audit\nSearch audit events\n\n**Operation ID:** `searchAuditEvents`\n\n**Parameters:**\n- `type` (query): Event type filter\n- `actor` (query): Actor identity filter\n- `startDate` (query): Start date filter (ISO 8601)\n- `endDate` (query): End date filter (I",
        "wordCount": 442,
        "category": "modules",
        "subcategory": "qerberos",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qerberos/"
      },
      {
        "path": "modules/qerberos/deployment-guide.md",
        "fullPath": "docs/modules/qerberos/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3063,
        "lastModified": "2025-08-15T05:01:44.067Z",
        "contentHash": "4ec5eb2e3df604c80e0b9201f2657bf5",
        "content": "# Qerberos Security & Audit API - Deployment Guide\n\nThis guide covers deployment options for qerberos in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qerberos\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqerberos_MODE=standalone\nqerberos_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=ql",
        "wordCount": 333,
        "category": "modules",
        "subcategory": "qerberos",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qerberos/"
      },
      {
        "path": "modules/qerberos/deployment.md",
        "fullPath": "docs/modules/qerberos/deployment.md",
        "name": "deployment.md",
        "size": 6294,
        "lastModified": "2025-08-14T20:48:08.634Z",
        "contentHash": "55843009faf67a37fb26735032793408",
        "content": "# Qerberos Deployment Guide\n\n## Overview\nQerberos provides security monitoring, audit logging, anomaly detection, and risk scoring\nfor the Q ecosystem. It offers immutable audit trails, ML-based threat detection,\nand automated compliance reporting.\n\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qerberos\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndock",
        "wordCount": 766,
        "category": "modules",
        "subcategory": "qerberos",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qerberos/"
      },
      {
        "path": "modules/qerberos/examples.md",
        "fullPath": "docs/modules/qerberos/examples.md",
        "name": "examples.md",
        "size": 3517,
        "lastModified": "2025-08-14T20:48:08.635Z",
        "contentHash": "fe7cc7417c5c636a1f94a2f5448c8a01",
        "content": "# Qerberos Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3050',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass QerberosClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        re",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "qerberos",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qerberos/"
      },
      {
        "path": "modules/qerberos/integration-guide.md",
        "fullPath": "docs/modules/qerberos/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10412,
        "lastModified": "2025-08-15T05:01:44.069Z",
        "contentHash": "2a5639bb9bf27d0cd2a844be0dea85d9",
        "content": "# Qerberos Security & Audit API - Integration Guide\n\nThis guide provides examples and patterns for integrating qerberos with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qerberosClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qerberos',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.",
        "wordCount": 1166,
        "category": "modules",
        "subcategory": "qerberos",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qerberos/"
      },
      {
        "path": "modules/qerberos/mcp-tools.md",
        "fullPath": "docs/modules/qerberos/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 6050,
        "lastModified": "2025-08-15T05:01:44.066Z",
        "contentHash": "f8112255a88d83a20f150520e8db832d",
        "content": "# qerberos - MCP Tools\n\nQerberos Security & Audit MCP Tools\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qerberos',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### qerberos.audit\n\nLog an audit event to the immutable audit trail\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| type | string | Yes | Event type (e.g., 'access', 'modification', 'deletion') |\n| ref | string | Yes | Reference to the resource or operation |\n| actor | object | Yes | Identity reference of the actor |\n| layer | string | Yes | Layer or service that generate",
        "wordCount": 934,
        "category": "modules",
        "subcategory": "qerberos",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qerberos/"
      },
      {
        "path": "modules/qerberos/mcp.md",
        "fullPath": "docs/modules/qerberos/mcp.md",
        "name": "mcp.md",
        "size": 11467,
        "lastModified": "2025-08-14T20:48:08.633Z",
        "contentHash": "b295a188522e8120d33eba150dd591f3",
        "content": "# Qerberos MCP Tools\n\n## Overview\nQerberos Security & Audit MCP Tools\n\n## Available Tools\n\n## qerberos.audit\n\nLog an audit event to the immutable audit trail\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"description\": \"Event type (e.g., 'access', 'modification', 'deletion')\"\n    },\n    \"ref\": {\n      \"type\": \"string\",\n      \"description\": \"Reference to the resource or operation\"\n    },\n    \"actor\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"squidId\": {\n          \"type\": \"string\",\n          \"description\": \"Actor's sQuid identity ID\"\n        },\n        \"subId\": {\n          \"type\": \"string\",\n          \"description\": \"Actor's subidentity ID (optional)\"\n        },\n        \"daoId\": {\n          \"type\": \"string\",\n          \"description\": \"Actor's DAO ID (optional)\"\n        }\n      },\n      \"required\": [\n        \"squidId\"\n      ],\n      \"description\": \"Identity reference of the actor\"\n    },\n    \"layer\": {\n      \"ty",
        "wordCount": 1163,
        "category": "modules",
        "subcategory": "qerberos",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qerberos/"
      },
      {
        "path": "modules/qerberos/runbook.md",
        "fullPath": "docs/modules/qerberos/runbook.md",
        "name": "runbook.md",
        "size": 7079,
        "lastModified": "2025-08-14T20:48:08.634Z",
        "contentHash": "25f8b1540294820adafb9f031ee14179",
        "content": "# Qerberos Operational Runbook\n\n## Service Overview\n\n## Service Description\nQerberos provides security monitoring, audit logging, anomaly detection, and risk scoring\nfor the Q ecosystem. It offers immutable audit trails, ML-based threat detection,\nand automated compliance reporting.\n\n\n## Key Features\n- Security monitoring\n- Anomaly detection\n- Risk scoring\n- Audit trails\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3050\n- **Protocol**: HTTP/REST + MCP\n- **Database**: In-memory + IPFS\n- **Storage**: IPFS\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error r",
        "wordCount": 1014,
        "category": "modules",
        "subcategory": "qerberos",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qerberos/"
      },
      {
        "path": "modules/qerberos/troubleshooting.md",
        "fullPath": "docs/modules/qerberos/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5185,
        "lastModified": "2025-08-15T05:01:44.068Z",
        "contentHash": "032c4523642b9889dbc6a9d65d74a814",
        "content": "# Qerberos Security & Audit API - Troubleshooting Guide\n\nThis guide helps resolve common issues with qerberos.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qerberos\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n ",
        "wordCount": 637,
        "category": "modules",
        "subcategory": "qerberos",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qerberos/"
      },
      {
        "path": "modules/qindex/README.md",
        "fullPath": "docs/modules/qindex/README.md",
        "name": "README.md",
        "size": 827,
        "lastModified": "2025-08-15T05:01:44.082Z",
        "contentHash": "10fe13b66ad4bd5873468d11f9756e82",
        "content": "# Qindex API\n\nIndexing & Pointers Module for Q Ecosystem\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qindex\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qindex\ndocker-compose up\n```\n\n## Key Features\n\n- **6 HTTP endpoints** for REST API access\n- **5 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 107,
        "category": "modules",
        "subcategory": "qindex",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qindex/"
      },
      {
        "path": "modules/qindex/api-reference.md",
        "fullPath": "docs/modules/qindex/api-reference.md",
        "name": "api-reference.md",
        "size": 4720,
        "lastModified": "2025-08-15T05:01:44.077Z",
        "contentHash": "4e422e7a5cd86280b68935532036e520",
        "content": "# Qindex API - API Reference\n\nIndexing & Pointers Module for Q Ecosystem\n\n**Version:** 1.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/qindex`\n- Production: `https://api.q.network/qindex`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n### GET /health\n\n**Health check**\n\n#### Responses\n\n**200**: Service is healthy\n\nSchema: HealthResponse\n\n\n### POST /qindex/put\n\n**Store indexed record**\n\n####",
        "wordCount": 572,
        "category": "modules",
        "subcategory": "qindex",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qindex/"
      },
      {
        "path": "modules/qindex/api.md",
        "fullPath": "docs/modules/qindex/api.md",
        "name": "api.md",
        "size": 2412,
        "lastModified": "2025-08-14T20:48:08.636Z",
        "contentHash": "03e8f47a102cf7810813de10bc1aedad",
        "content": "# Qindex API Documentation\n\n## Overview\nIndexing & Pointers Module for Q Ecosystem\n\n## Base URL\n`http://localhost:3006`\n\n## Authentication\nNo authentication required\n\n## Endpoints\n\n### GET /health\nHealth check\n\n**Operation ID:** `healthCheck`\n\n\n\n\n\n**Responses:**\n- **200**: Service is healthy\n\n\n### POST /qindex/put\nStore indexed record\n\n**Operation ID:** `putRecord`\n\n\n\n**Request Body:**\n```json\n{\n  \"$ref\": \"#/components/schemas/PutRecordRequest\"\n}\n```\n\n**Responses:**\n- **201**: Record stored successfully\n- **400**: Invalid request\n\n\n### GET /qindex/get/{key}\nRetrieve record by key\n\n**Operation ID:** `getRecord`\n\n**Parameters:**\n- `key` (path): No description\n- `version` (query): Specific version to retrieve\n\n\n\n**Responses:**\n- **200**: Record retrieved successfully\n- **404**: Record not found\n\n\n### GET /qindex/list\nList records with filtering\n\n**Operation ID:** `listRecords`\n\n**Parameters:**\n- `prefix` (query): Key prefix filter\n- `limit` (query): No description\n- `offset` (query): No d",
        "wordCount": 300,
        "category": "modules",
        "subcategory": "qindex",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qindex/"
      },
      {
        "path": "modules/qindex/deployment-guide.md",
        "fullPath": "docs/modules/qindex/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3016,
        "lastModified": "2025-08-15T05:01:44.079Z",
        "contentHash": "e7d5ac071becd848b84df4941e2000f7",
        "content": "# Qindex API - Deployment Guide\n\nThis guide covers deployment options for qindex in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qindex\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqindex_MODE=standalone\nqindex_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\nexport qindex_MO",
        "wordCount": 330,
        "category": "modules",
        "subcategory": "qindex",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qindex/"
      },
      {
        "path": "modules/qindex/deployment.md",
        "fullPath": "docs/modules/qindex/deployment.md",
        "name": "deployment.md",
        "size": 6084,
        "lastModified": "2025-08-14T20:48:08.637Z",
        "contentHash": "373d22e2b43722a9ef11e356e5560c38",
        "content": "# Qindex Deployment Guide\n\n## Overview\nIndexing & Pointers Module for Q Ecosystem\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qindex\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f qindex\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport QINDEX_MODE=standalone\n\n# Start the service\nnpm run dev\n\n# Or for production\nnpm",
        "wordCount": 746,
        "category": "modules",
        "subcategory": "qindex",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qindex/"
      },
      {
        "path": "modules/qindex/examples.md",
        "fullPath": "docs/modules/qindex/examples.md",
        "name": "examples.md",
        "size": 3469,
        "lastModified": "2025-08-14T20:48:08.637Z",
        "contentHash": "efd8ba19e9110130acea01d851b9c26b",
        "content": "# Qindex Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3040',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass QindexClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        return",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "qindex",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qindex/"
      },
      {
        "path": "modules/qindex/integration-guide.md",
        "fullPath": "docs/modules/qindex/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10320,
        "lastModified": "2025-08-15T05:01:44.081Z",
        "contentHash": "6bfdbf2bd5f4ecdff95214b790cb6f46",
        "content": "# Qindex API - Integration Guide\n\nThis guide provides examples and patterns for integrating qindex with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qindexClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qindex',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.interceptors.response.use",
        "wordCount": 1163,
        "category": "modules",
        "subcategory": "qindex",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qindex/"
      },
      {
        "path": "modules/qindex/mcp-tools.md",
        "fullPath": "docs/modules/qindex/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 3553,
        "lastModified": "2025-08-15T05:01:44.078Z",
        "contentHash": "b4d13a8156a1dc14b8bc1b31e62d7f22",
        "content": "# qindex - MCP Tools\n\nQindex MCP Tools for indexing and pointer management\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qindex',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### qindex.put\n\nStore an indexed record with optional metadata and encryption\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| key | string | Yes | Unique identifier for the record |\n| value | object | Yes | Record data to store |\n| metadata | object | No |  |\n| options | object | No |  |\n\n#### Usage Example\n\n```javascript\nconst result = await mcpClient.callTo",
        "wordCount": 514,
        "category": "modules",
        "subcategory": "qindex",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qindex/"
      },
      {
        "path": "modules/qindex/mcp.md",
        "fullPath": "docs/modules/qindex/mcp.md",
        "name": "mcp.md",
        "size": 5350,
        "lastModified": "2025-08-14T20:48:08.636Z",
        "contentHash": "ac08787fe2b62e0ffcbfde7aa10ba081",
        "content": "# Qindex MCP Tools\n\n## Overview\nQindex MCP Tools for indexing and pointer management\n\n## Available Tools\n\n## qindex.put\n\nStore an indexed record with optional metadata and encryption\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"key\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for the record\"\n    },\n    \"value\": {\n      \"type\": \"object\",\n      \"description\": \"Record data to store\"\n    },\n    \"metadata\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"contentType\": {\n          \"type\": \"string\",\n          \"description\": \"MIME type of the content\"\n        },\n        \"tags\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Tags for categorization and search\"\n        },\n        \"ttl\": {\n          \"type\": \"integer\",\n          \"description\": \"Time to live in seconds\"\n        }\n      }\n    },\n    \"options\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"encry",
        "wordCount": 622,
        "category": "modules",
        "subcategory": "qindex",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qindex/"
      },
      {
        "path": "modules/qindex/runbook.md",
        "fullPath": "docs/modules/qindex/runbook.md",
        "name": "runbook.md",
        "size": 6910,
        "lastModified": "2025-08-14T20:48:08.637Z",
        "contentHash": "d395861ab8c53079b6c66be2df560de4",
        "content": "# Qindex Operational Runbook\n\n## Service Overview\n\n## Service Description\nIndexing & Pointers Module for Q Ecosystem\n\n## Key Features\n- Lightweight indexing\n- Mutable pointers\n- Append-only history\n- Simple queries\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3040\n- **Protocol**: HTTP/REST + MCP\n- **Database**: In-memory + IPFS\n- **Storage**: IPFS\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n- Queue depths and processing times\n\n## Alerting Thresholds\n- **Critical**: Ser",
        "wordCount": 994,
        "category": "modules",
        "subcategory": "qindex",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qindex/"
      },
      {
        "path": "modules/qindex/troubleshooting.md",
        "fullPath": "docs/modules/qindex/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5156,
        "lastModified": "2025-08-15T05:01:44.080Z",
        "contentHash": "e5cb52999124a79d7d6b00bde9f56336",
        "content": "# Qindex API - Troubleshooting Guide\n\nThis guide helps resolve common issues with qindex.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qindex\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   const decoded = jwt.d",
        "wordCount": 634,
        "category": "modules",
        "subcategory": "qindex",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qindex/"
      },
      {
        "path": "modules/qlock/README.md",
        "fullPath": "docs/modules/qlock/README.md",
        "name": "README.md",
        "size": 838,
        "lastModified": "2025-08-15T05:01:44.092Z",
        "contentHash": "60ac213829331315e0bcfe3ae6af58f9",
        "content": "# Qlock - Encryption & Signatures Module for Q Ecosystem\n\nQlock - Encryption & Signatures Module for Q Ecosystem\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qlock\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qlock\ndocker-compose up\n```\n\n## Key Features\n\n- **5 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 108,
        "category": "modules",
        "subcategory": "qlock",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qlock/"
      },
      {
        "path": "modules/qlock/api-reference.md",
        "fullPath": "docs/modules/qlock/api-reference.md",
        "name": "api-reference.md",
        "size": 1574,
        "lastModified": "2025-08-15T05:01:44.085Z",
        "contentHash": "de3e85217d09aa00cc13bb9bf7856dd6",
        "content": "# Qlock - Encryption & Signatures Module for Q Ecosystem - API Reference\n\nThis module primarily operates through MCP (Model Context Protocol) tools rather than HTTP APIs.\n\n## MCP Integration\n\nThis module is designed for serverless and function-based integration. See the [MCP Tools documentation](./mcp-tools.md) for detailed information about available tools.\n\n## Authentication\n\nAll MCP tool calls require authentication via sQuid identity:\n\n```javascript\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qlock',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n```\n\n## Standard Headers\n\nWhen using HTTP endpoints (if any), use standard headers:\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Health Check\n\nBasic health check endpoint (if available):\n\n```\nGET /health\n",
        "wordCount": 192,
        "category": "modules",
        "subcategory": "qlock",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qlock/"
      },
      {
        "path": "modules/qlock/deployment-guide.md",
        "fullPath": "docs/modules/qlock/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3046,
        "lastModified": "2025-08-15T05:01:44.090Z",
        "contentHash": "63ffcaa0dfc913fa8f80c97daa8cebf7",
        "content": "# Qlock - Encryption & Signatures Module for Q Ecosystem - Deployment Guide\n\nThis guide covers deployment options for qlock in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qlock\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqlock_MODE=standalone\nqlock_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOC",
        "wordCount": 337,
        "category": "modules",
        "subcategory": "qlock",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qlock/"
      },
      {
        "path": "modules/qlock/deployment.md",
        "fullPath": "docs/modules/qlock/deployment.md",
        "name": "deployment.md",
        "size": 6065,
        "lastModified": "2025-08-14T20:48:08.638Z",
        "contentHash": "669bcd5a56b4f311d5223fb1318e0610",
        "content": "# Qlock Deployment Guide\n\n## Overview\nQlock encryption, signatures, and distributed locks\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qlock\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f qlock\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport QLOCK_MODE=standalone\n\n# Start the service\nnpm run dev\n\n# Or for production\nnpm start\n```\n\n## Verification\n\n`",
        "wordCount": 747,
        "category": "modules",
        "subcategory": "qlock",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qlock/"
      },
      {
        "path": "modules/qlock/examples.md",
        "fullPath": "docs/modules/qlock/examples.md",
        "name": "examples.md",
        "size": 2316,
        "lastModified": "2025-08-14T20:48:08.639Z",
        "contentHash": "b7c79de4869ae08668777413f860faba",
        "content": "# Qlock Integration Examples\n\n\n## MCP Integration\n\n### Basic MCP Client\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  name: 'qlock',\n  version: '1.0.0',\n  url: 'http://localhost:3020'\n});\n\nawait client.connect();\n\n// List available tools\nconst tools = await client.listTools();\nconsole.log('Available tools:', tools);\n\n// Call a tool\nconst result = await client.callTool('qlock.encrypt', {\n  // tool parameters\n});\nconsole.log('Result:', result);\n```\n\n### MCP Server Integration\n```javascript\nimport { MCPServer } from '@anarq/mcp-server';\n\nconst server = new MCPServer({\n  name: 'my-integration',\n  version: '1.0.0'\n});\n\n// Add qlock as a client\nserver.addClient('qlock', {\n  url: 'http://localhost:3020',\n  tools: ['qlock.encrypt']\n});\n\nawait server.start();\n```\n\n\n\n## Cross-Module Integration\n\n### Complete Workflow Example\n```javascript\nimport { SquidClient } from '@anarq/squid-client';\nimport { QonsentClient } from '@anarq/qonsent-client';\nimpo",
        "wordCount": 270,
        "category": "modules",
        "subcategory": "qlock",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qlock/"
      },
      {
        "path": "modules/qlock/integration-guide.md",
        "fullPath": "docs/modules/qlock/integration-guide.md",
        "name": "integration-guide.md",
        "size": 9998,
        "lastModified": "2025-08-15T05:01:44.091Z",
        "contentHash": "ea55e56d3272652d3f695691e4cd0195",
        "content": "# Qlock - Encryption & Signatures Module for Q Ecosystem - Integration Guide\n\nThis guide provides examples and patterns for integrating qlock with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qlockClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qlock',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n",
        "wordCount": 1136,
        "category": "modules",
        "subcategory": "qlock",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qlock/"
      },
      {
        "path": "modules/qlock/mcp-tools.md",
        "fullPath": "docs/modules/qlock/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 4227,
        "lastModified": "2025-08-15T05:01:44.087Z",
        "contentHash": "3fafc3ef422e643e2af6724b75189df3",
        "content": "# qlock - MCP Tools\n\nQlock encryption, signatures, and distributed locks\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qlock',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### qlock.encrypt\n\nEncrypt data using specified algorithm and key\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| data | string | Yes | Data to encrypt (base64 encoded for binary data) |\n| algorithm | string | No | Encryption algorithm to use |\n| keyId | string | No | Key identifier (optional, will generate if not provided) |\n| identityId | string | Yes | Identi",
        "wordCount": 606,
        "category": "modules",
        "subcategory": "qlock",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qlock/"
      },
      {
        "path": "modules/qlock/mcp.md",
        "fullPath": "docs/modules/qlock/mcp.md",
        "name": "mcp.md",
        "size": 5623,
        "lastModified": "2025-08-14T20:48:08.638Z",
        "contentHash": "1f54b108dabcbcdd6953c0cb86393069",
        "content": "# Qlock MCP Tools\n\n## Overview\nQlock encryption, signatures, and distributed locks\n\n## Available Tools\n\n## qlock.encrypt\n\nEncrypt data using specified algorithm and key\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"data\": {\n      \"type\": \"string\",\n      \"description\": \"Data to encrypt (base64 encoded for binary data)\"\n    },\n    \"algorithm\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"AES-256-GCM\",\n        \"ChaCha20-Poly1305\",\n        \"Kyber-768\",\n        \"Dilithium-3\"\n      ],\n      \"default\": \"AES-256-GCM\",\n      \"description\": \"Encryption algorithm to use\"\n    },\n    \"keyId\": {\n      \"type\": \"string\",\n      \"description\": \"Key identifier (optional, will generate if not provided)\"\n    },\n    \"identityId\": {\n      \"type\": \"string\",\n      \"description\": \"Identity ID for key derivation\"\n    }\n  },\n  \"required\": [\n    \"data\",\n    \"identityId\"\n  ]\n}\n```\n\n**Output Schema:**\n```json\nundefined\n```\n\n\n## qlock.decrypt\n\nDecrypt data using private key\n\n**Input Sc",
        "wordCount": 621,
        "category": "modules",
        "subcategory": "qlock",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qlock/"
      },
      {
        "path": "modules/qlock/runbook.md",
        "fullPath": "docs/modules/qlock/runbook.md",
        "name": "runbook.md",
        "size": 6902,
        "lastModified": "2025-08-14T20:48:08.639Z",
        "contentHash": "09483a994927a1b1147c114ce3504840",
        "content": "# Qlock Operational Runbook\n\n## Service Overview\n\n## Service Description\nQlock encryption, signatures, and distributed locks\n\n## Key Features\n- Encryption/decryption\n- Digital signatures\n- Time-locks\n- Distributed mutex\n\n## Architecture\n- **Type**: MCP Service\n- **Port**: 3020\n- **Protocol**: HTTP/REST + MCP\n- **Database**: In-memory + IPFS\n- **Storage**: IPFS\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n- Queue depths and processing times\n\n## Alerting Thresholds\n- **Critical**: Servic",
        "wordCount": 989,
        "category": "modules",
        "subcategory": "qlock",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qlock/"
      },
      {
        "path": "modules/qlock/troubleshooting.md",
        "fullPath": "docs/modules/qlock/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5195,
        "lastModified": "2025-08-15T05:01:44.090Z",
        "contentHash": "d1088f44a7092a2ba4cfd093a8bf5f0d",
        "content": "# Qlock - Encryption & Signatures Module for Q Ecosystem - Troubleshooting Guide\n\nThis guide helps resolve common issues with qlock.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qlock\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require",
        "wordCount": 641,
        "category": "modules",
        "subcategory": "qlock",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qlock/"
      },
      {
        "path": "modules/qmail/README.md",
        "fullPath": "docs/modules/qmail/README.md",
        "name": "README.md",
        "size": 830,
        "lastModified": "2025-08-15T05:01:44.099Z",
        "contentHash": "a18b3a83e571748f3edd4414ebb882f3",
        "content": "# Qmail API\n\nCertified Messaging Module for AnarQ&Q Ecosystem\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qmail\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qmail\ndocker-compose up\n```\n\n## Key Features\n\n- **7 HTTP endpoints** for REST API access\n- **4 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 106,
        "category": "modules",
        "subcategory": "qmail",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmail/"
      },
      {
        "path": "modules/qmail/api-reference.md",
        "fullPath": "docs/modules/qmail/api-reference.md",
        "name": "api-reference.md",
        "size": 7091,
        "lastModified": "2025-08-15T05:01:44.094Z",
        "contentHash": "916914742b088e72d6e0627363d8c269",
        "content": "# Qmail API - API Reference\n\nCertified Messaging Module for AnarQ&Q Ecosystem\n\n**Version:** 1.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/qmail`\n- Production: `https://api.q.network/qmail`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n### POST /send\n\n**Send encrypted message**\n\nSend an encrypted message with certified delivery tracking\n\n#### Request Body\n\nContent-Type: application/json\n",
        "wordCount": 862,
        "category": "modules",
        "subcategory": "qmail",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmail/"
      },
      {
        "path": "modules/qmail/api.md",
        "fullPath": "docs/modules/qmail/api.md",
        "name": "api.md",
        "size": 3564,
        "lastModified": "2025-08-14T20:48:08.641Z",
        "contentHash": "af6db702c77d3f0bce9a14ecf491f60d",
        "content": "# Qmail API Documentation\n\n## Overview\nCertified Messaging Module for AnarQ&Q Ecosystem\n\n## Base URL\n`http://localhost:3000/api/qmail`\n\n## Authentication\n- **squidAuth**: bearer authentication\n\n## Endpoints\n\n### POST /send\nSend encrypted message\n\n**Operation ID:** `sendMessage`\n\n\n\n**Request Body:**\n```json\n{\n  \"$ref\": \"#/components/schemas/SendMessageRequest\"\n}\n```\n\n**Responses:**\n- **200**: Message sent successfully\n- **400**: undefined\n- **401**: undefined\n- **403**: undefined\n- **429**: undefined\n- **500**: undefined\n\n\n### GET /inbox/{squidId}\nGet inbox messages\n\n**Operation ID:** `getInboxMessages`\n\n**Parameters:**\n- `squidId` (path): sQuid identity ID\n- `folder` (query): Message folder\n- `limit` (query): Maximum messages to return\n- `offset` (query): Pagination offset\n- `unreadOnly` (query): Return only unread messages\n\n\n\n**Responses:**\n- **200**: Messages retrieved successfully\n- **401**: undefined\n- **403**: undefined\n- **404**: undefined\n- **500**: undefined\n\n\n### GET /message/",
        "wordCount": 430,
        "category": "modules",
        "subcategory": "qmail",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmail/"
      },
      {
        "path": "modules/qmail/deployment-guide.md",
        "fullPath": "docs/modules/qmail/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3001,
        "lastModified": "2025-08-15T05:01:44.096Z",
        "contentHash": "abc84da932098506b5667c22bf7486cf",
        "content": "# Qmail API - Deployment Guide\n\nThis guide covers deployment options for qmail in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qmail\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqmail_MODE=standalone\nqmail_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\nexport qmail_MODE=hyb",
        "wordCount": 330,
        "category": "modules",
        "subcategory": "qmail",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmail/"
      },
      {
        "path": "modules/qmail/deployment.md",
        "fullPath": "docs/modules/qmail/deployment.md",
        "name": "deployment.md",
        "size": 6068,
        "lastModified": "2025-08-14T20:48:08.643Z",
        "contentHash": "1afdf8e3a8a1d250aad6cb0e24136d25",
        "content": "# Qmail Deployment Guide\n\n## Overview\nCertified Messaging Module for AnarQ&Q Ecosystem\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qmail\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f qmail\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport QMAIL_MODE=standalone\n\n# Start the service\nnpm run dev\n\n# Or for production\nn",
        "wordCount": 745,
        "category": "modules",
        "subcategory": "qmail",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmail/"
      },
      {
        "path": "modules/qmail/examples.md",
        "fullPath": "docs/modules/qmail/examples.md",
        "name": "examples.md",
        "size": 3449,
        "lastModified": "2025-08-14T20:48:08.644Z",
        "contentHash": "bc34d2e9dfba5580926c32021fbe4c23",
        "content": "# Qmail Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3090',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass QmailClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        return r",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "qmail",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmail/"
      },
      {
        "path": "modules/qmail/integration-guide.md",
        "fullPath": "docs/modules/qmail/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10294,
        "lastModified": "2025-08-15T05:01:44.098Z",
        "contentHash": "edddc30fa76096110fd4dbe024e4bd65",
        "content": "# Qmail API - Integration Guide\n\nThis guide provides examples and patterns for integrating qmail with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qmailClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qmail',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.interceptors.response.use(\n  ",
        "wordCount": 1163,
        "category": "modules",
        "subcategory": "qmail",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmail/"
      },
      {
        "path": "modules/qmail/mcp-tools.md",
        "fullPath": "docs/modules/qmail/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 6158,
        "lastModified": "2025-08-15T05:01:44.094Z",
        "contentHash": "b4389ae7750ea4817931527760e5da98",
        "content": "# qmail - MCP Tools\n\nQmail MCP Tools - Certified Messaging Module\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qmail',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### qmail.send\n\nSend encrypted message with certified delivery\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| squidId | string | Yes | Sender sQuid identity ID |\n| recipientId | string | Yes | Recipient sQuid identity ID |\n| subject | string | Yes | Message subject |\n| content | string | Yes | Message content (will be encrypted) |\n| encryptionLevel | string | No | Enc",
        "wordCount": 959,
        "category": "modules",
        "subcategory": "qmail",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmail/"
      },
      {
        "path": "modules/qmail/mcp.md",
        "fullPath": "docs/modules/qmail/mcp.md",
        "name": "mcp.md",
        "size": 10659,
        "lastModified": "2025-08-14T20:48:08.642Z",
        "contentHash": "8ea5660e92755c7dafc4e4c27c525fa9",
        "content": "# Qmail MCP Tools\n\n## Overview\nQmail MCP Tools - Certified Messaging Module\n\n## Available Tools\n\n## qmail.send\n\nSend encrypted message with certified delivery\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"squidId\": {\n      \"type\": \"string\",\n      \"description\": \"Sender sQuid identity ID\"\n    },\n    \"recipientId\": {\n      \"type\": \"string\",\n      \"description\": \"Recipient sQuid identity ID\"\n    },\n    \"subject\": {\n      \"type\": \"string\",\n      \"maxLength\": 200,\n      \"description\": \"Message subject\"\n    },\n    \"content\": {\n      \"type\": \"string\",\n      \"description\": \"Message content (will be encrypted)\"\n    },\n    \"encryptionLevel\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"STANDARD\",\n        \"HIGH\",\n        \"QUANTUM\"\n      ],\n      \"default\": \"STANDARD\",\n      \"description\": \"Encryption level\"\n    },\n    \"priority\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"LOW\",\n        \"NORMAL\",\n        \"HIGH\",\n        \"URGENT\"\n      ],\n      \"default\": \"NO",
        "wordCount": 1062,
        "category": "modules",
        "subcategory": "qmail",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmail/"
      },
      {
        "path": "modules/qmail/runbook.md",
        "fullPath": "docs/modules/qmail/runbook.md",
        "name": "runbook.md",
        "size": 6984,
        "lastModified": "2025-08-14T20:48:08.644Z",
        "contentHash": "540290038118116c4574c01678750670",
        "content": "# Qmail Operational Runbook\n\n## Service Overview\n\n## Service Description\nCertified Messaging Module for AnarQ&Q Ecosystem\n\n## Key Features\n- Certified messaging\n- End-to-end encryption\n- Delivery receipts\n- Spam filtering\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3090\n- **Protocol**: HTTP/REST + MCP\n- **Database**: PostgreSQL + IPFS\n- **Storage**: IPFS + Local Cache\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n- Qlock (message encryption)\n- Qindex (message indexing)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n",
        "wordCount": 1004,
        "category": "modules",
        "subcategory": "qmail",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmail/"
      },
      {
        "path": "modules/qmail/troubleshooting.md",
        "fullPath": "docs/modules/qmail/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5150,
        "lastModified": "2025-08-15T05:01:44.097Z",
        "contentHash": "0d3bad3fa0afffbc04b244b4bd067d85",
        "content": "# Qmail API - Troubleshooting Guide\n\nThis guide helps resolve common issues with qmail.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qmail\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   const decoded = jwt.deco",
        "wordCount": 634,
        "category": "modules",
        "subcategory": "qmail",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmail/"
      },
      {
        "path": "modules/qmarket/README.md",
        "fullPath": "docs/modules/qmarket/README.md",
        "name": "README.md",
        "size": 836,
        "lastModified": "2025-08-15T05:01:44.103Z",
        "contentHash": "b9273187e9547143d372b4753b0aeed3",
        "content": "# Qmarket API\n\nContent Marketplace Module for AnarQ&Q Ecosystem\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qmarket\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qmarket\ndocker-compose up\n```\n\n## Key Features\n\n- **7 HTTP endpoints** for REST API access\n- **4 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 106,
        "category": "modules",
        "subcategory": "qmarket",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmarket/"
      },
      {
        "path": "modules/qmarket/api-reference.md",
        "fullPath": "docs/modules/qmarket/api-reference.md",
        "name": "api-reference.md",
        "size": 8753,
        "lastModified": "2025-08-15T05:01:44.101Z",
        "contentHash": "acfd309c64ae9d27886c7a8c76f1e2a0",
        "content": "# Qmarket API - API Reference\n\nContent Marketplace Module for AnarQ&Q Ecosystem\n\n**Version:** 1.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/qmarket`\n- Production: `https://api.q.network/qmarket`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n### GET /health\n\n**Health check endpoint**\n\n#### Responses\n\n**200**: Service is healthy\n\nSchema: HealthResponse\n\n\n### POST /api/listings\n\n**Create m",
        "wordCount": 1052,
        "category": "modules",
        "subcategory": "qmarket",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmarket/"
      },
      {
        "path": "modules/qmarket/api.md",
        "fullPath": "docs/modules/qmarket/api.md",
        "name": "api.md",
        "size": 4260,
        "lastModified": "2025-08-14T20:48:08.645Z",
        "contentHash": "2a53b40ac802738fa2c7daf1188f7a45",
        "content": "# Qmarket API Documentation\n\n## Overview\nContent Marketplace Module for AnarQ&Q Ecosystem\n\n## Base URL\n`http://localhost:3008`\n\n## Authentication\n- **squidAuth**: bearer authentication\n\n## Endpoints\n\n### GET /health\nHealth check endpoint\n\n**Operation ID:** `healthCheck`\n\n\n\n\n\n**Responses:**\n- **200**: Service is healthy\n\n\n### POST /api/listings\nCreate marketplace listing\n\n**Operation ID:** `createListing`\n\n\n\n**Request Body:**\n```json\n{\n  \"$ref\": \"#/components/schemas/CreateListingRequest\"\n}\n```\n\n**Responses:**\n- **201**: Listing created successfully\n- **400**: Invalid request data\n- **401**: Unauthorized\n\n\n### GET /api/listings\nSearch marketplace listings\n\n**Operation ID:** `searchListings`\n\n**Parameters:**\n- `query` (query): Search query\n- `category` (query): Filter by category\n- `minPrice` (query): Minimum price filter\n- `maxPrice` (query): Maximum price filter\n- `currency` (query): Filter by currency\n- `tags` (query): Filter by tags (comma-separated)\n- `status` (query): Filter by sta",
        "wordCount": 530,
        "category": "modules",
        "subcategory": "qmarket",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmarket/"
      },
      {
        "path": "modules/qmarket/deployment-guide.md",
        "fullPath": "docs/modules/qmarket/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3031,
        "lastModified": "2025-08-15T05:01:44.102Z",
        "contentHash": "f1a047fce104edddc39633d4d779adfb",
        "content": "# Qmarket API - Deployment Guide\n\nThis guide covers deployment options for qmarket in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qmarket\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqmarket_MODE=standalone\nqmarket_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\nexport qmar",
        "wordCount": 330,
        "category": "modules",
        "subcategory": "qmarket",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmarket/"
      },
      {
        "path": "modules/qmarket/deployment.md",
        "fullPath": "docs/modules/qmarket/deployment.md",
        "name": "deployment.md",
        "size": 6112,
        "lastModified": "2025-08-14T20:48:08.647Z",
        "contentHash": "2062d00e0d7f210bc7db7fffa9954f6c",
        "content": "# Qmarket Deployment Guide\n\n## Overview\nContent Marketplace Module for AnarQ&Q Ecosystem\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qmarket\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f qmarket\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport QMARKET_MODE=standalone\n\n# Start the service\nnpm run dev\n\n# Or for prod",
        "wordCount": 745,
        "category": "modules",
        "subcategory": "qmarket",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmarket/"
      },
      {
        "path": "modules/qmarket/examples.md",
        "fullPath": "docs/modules/qmarket/examples.md",
        "name": "examples.md",
        "size": 3493,
        "lastModified": "2025-08-14T20:48:08.648Z",
        "contentHash": "854cdf6b25b6d3c0adfd48b4391f2e69",
        "content": "# Qmarket Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3080',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass QmarketClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        retu",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "qmarket",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmarket/"
      },
      {
        "path": "modules/qmarket/integration-guide.md",
        "fullPath": "docs/modules/qmarket/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10366,
        "lastModified": "2025-08-15T05:01:44.103Z",
        "contentHash": "b3d93a375ca4d58b1b20715364b58653",
        "content": "# Qmarket API - Integration Guide\n\nThis guide provides examples and patterns for integrating qmarket with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qmarketClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qmarket',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.interceptors.response",
        "wordCount": 1163,
        "category": "modules",
        "subcategory": "qmarket",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmarket/"
      },
      {
        "path": "modules/qmarket/mcp-tools.md",
        "fullPath": "docs/modules/qmarket/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 7158,
        "lastModified": "2025-08-15T05:01:44.102Z",
        "contentHash": "9240cb237a2d3fb125ee77925af0dac4",
        "content": "# qmarket - MCP Tools\n\nContent Marketplace Module - MCP Tools for marketplace operations\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qmarket',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### qmarket.list\n\nCreate a marketplace listing for digital content\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| title | string | Yes | Title of the listing |\n| description | string | Yes | Detailed description of the content |\n| price | number | Yes | Price in the specified currency |\n| currency | string | No | Currency for the listing |\n| c",
        "wordCount": 1147,
        "category": "modules",
        "subcategory": "qmarket",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmarket/"
      },
      {
        "path": "modules/qmarket/mcp.md",
        "fullPath": "docs/modules/qmarket/mcp.md",
        "name": "mcp.md",
        "size": 12193,
        "lastModified": "2025-08-14T20:48:08.646Z",
        "contentHash": "1c590fce46644c1c6b533ec795949b2d",
        "content": "# Qmarket MCP Tools\n\n## Overview\nContent Marketplace Module - MCP Tools for marketplace operations\n\n## Available Tools\n\n## qmarket.list\n\nCreate a marketplace listing for digital content\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"description\": \"Title of the listing\",\n      \"minLength\": 3,\n      \"maxLength\": 100\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"Detailed description of the content\",\n      \"minLength\": 10,\n      \"maxLength\": 1000\n    },\n    \"price\": {\n      \"type\": \"number\",\n      \"description\": \"Price in the specified currency\",\n      \"minimum\": 0.01\n    },\n    \"currency\": {\n      \"type\": \"string\",\n      \"description\": \"Currency for the listing\",\n      \"enum\": [\n        \"QToken\",\n        \"PI\"\n      ],\n      \"default\": \"QToken\"\n    },\n    \"category\": {\n      \"type\": \"string\",\n      \"description\": \"Content category\",\n      \"enum\": [\n        \"digital-art\",\n        \"media\",\n        \"",
        "wordCount": 1247,
        "category": "modules",
        "subcategory": "qmarket",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmarket/"
      },
      {
        "path": "modules/qmarket/runbook.md",
        "fullPath": "docs/modules/qmarket/runbook.md",
        "name": "runbook.md",
        "size": 6979,
        "lastModified": "2025-08-14T20:48:08.647Z",
        "contentHash": "145c3f3a730afe024c9a11a6e147b7ef",
        "content": "# Qmarket Operational Runbook\n\n## Service Overview\n\n## Service Description\nContent Marketplace Module for AnarQ&Q Ecosystem\n\n## Key Features\n- Content marketplace\n- Licensing\n- Payment processing\n- Revenue distribution\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3080\n- **Protocol**: HTTP/REST + MCP\n- **Database**: In-memory + IPFS\n- **Storage**: IPFS\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n- Qwallet (payment processing)\n- Qmask (privacy compliance)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n- Queue depths ",
        "wordCount": 1000,
        "category": "modules",
        "subcategory": "qmarket",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmarket/"
      },
      {
        "path": "modules/qmarket/troubleshooting.md",
        "fullPath": "docs/modules/qmarket/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5162,
        "lastModified": "2025-08-15T05:01:44.102Z",
        "contentHash": "5deea42f02a66d140aae96415aa45441",
        "content": "# Qmarket API - Troubleshooting Guide\n\nThis guide helps resolve common issues with qmarket.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qmarket\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   const decoded = jw",
        "wordCount": 634,
        "category": "modules",
        "subcategory": "qmarket",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmarket/"
      },
      {
        "path": "modules/qmask/README.md",
        "fullPath": "docs/modules/qmask/README.md",
        "name": "README.md",
        "size": 828,
        "lastModified": "2025-08-15T05:01:44.108Z",
        "contentHash": "b8f4752748973a0316a45e37dcdf6e39",
        "content": "# Qmask API\n\nPrivacy & Anonymization module for Q ecosystem\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qmask\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qmask\ndocker-compose up\n```\n\n## Key Features\n\n- **7 HTTP endpoints** for REST API access\n- **3 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 107,
        "category": "modules",
        "subcategory": "qmask",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmask/"
      },
      {
        "path": "modules/qmask/api-reference.md",
        "fullPath": "docs/modules/qmask/api-reference.md",
        "name": "api-reference.md",
        "size": 4551,
        "lastModified": "2025-08-15T05:01:44.104Z",
        "contentHash": "b564b842c2a940bbd1108926e5cde610",
        "content": "# Qmask API - API Reference\n\nPrivacy & Anonymization module for Q ecosystem\n\n**Version:** 2.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/qmask`\n- Production: `https://api.q.network/qmask`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n\n## Data Models\n\n\n### MaskRule\n\n#### Properties\n\n- **field** (string): Field path to apply the rule to\n  - Required: Yes\n- **strategy** (string): Masking st",
        "wordCount": 570,
        "category": "modules",
        "subcategory": "qmask",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmask/"
      },
      {
        "path": "modules/qmask/api.md",
        "fullPath": "docs/modules/qmask/api.md",
        "name": "api.md",
        "size": 544,
        "lastModified": "2025-08-14T20:48:08.648Z",
        "contentHash": "18f508e44597f2d876d71a7ccc0fd258",
        "content": "# Qmask API Documentation\n\n## Overview\nPrivacy & Anonymization module for Q ecosystem\n\n## Base URL\n`http://localhost:3007/api/v1`\n\n## Authentication\n- **bearerAuth**: bearer authentication\n\n## Endpoints\n\n\n## Error Codes\n- **404**: Profile not found\n- **409**: Profile already exists\n\n## Rate Limits\n\n- **Default**: 100 requests per minute per identity\n- **Burst**: 200 requests per minute (temporary)\n- **Premium**: 1000 requests per minute (with Qwallet payment)\n- **Headers**: Rate limit information in `X-RateLimit-*` headers\n\n\n## Examples\n\n",
        "wordCount": 75,
        "category": "modules",
        "subcategory": "qmask",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmask/"
      },
      {
        "path": "modules/qmask/deployment-guide.md",
        "fullPath": "docs/modules/qmask/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3001,
        "lastModified": "2025-08-15T05:01:44.105Z",
        "contentHash": "298cc02800c6840eaa9e80132cae2449",
        "content": "# Qmask API - Deployment Guide\n\nThis guide covers deployment options for qmask in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qmask\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqmask_MODE=standalone\nqmask_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\nexport qmask_MODE=hyb",
        "wordCount": 330,
        "category": "modules",
        "subcategory": "qmask",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmask/"
      },
      {
        "path": "modules/qmask/deployment.md",
        "fullPath": "docs/modules/qmask/deployment.md",
        "name": "deployment.md",
        "size": 6066,
        "lastModified": "2025-08-14T20:48:08.649Z",
        "contentHash": "a9fa1b0cbf2efa249fc0cc7fd7df3d07",
        "content": "# Qmask Deployment Guide\n\n## Overview\nPrivacy & Anonymization module for Q ecosystem\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qmask\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f qmask\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport QMASK_MODE=standalone\n\n# Start the service\nnpm run dev\n\n# Or for production\nnpm",
        "wordCount": 746,
        "category": "modules",
        "subcategory": "qmask",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmask/"
      },
      {
        "path": "modules/qmask/examples.md",
        "fullPath": "docs/modules/qmask/examples.md",
        "name": "examples.md",
        "size": 3451,
        "lastModified": "2025-08-14T20:48:08.651Z",
        "contentHash": "751b0d5bf72c0aeb995293e45d22d860",
        "content": "# Qmask Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3060',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass QmaskClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        return r",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "qmask",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmask/"
      },
      {
        "path": "modules/qmask/integration-guide.md",
        "fullPath": "docs/modules/qmask/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10292,
        "lastModified": "2025-08-15T05:01:44.106Z",
        "contentHash": "7ec0991070f0a84a5f659edfcbb5fd00",
        "content": "# Qmask API - Integration Guide\n\nThis guide provides examples and patterns for integrating qmask with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qmaskClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qmask',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.interceptors.response.use(\n  ",
        "wordCount": 1163,
        "category": "modules",
        "subcategory": "qmask",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmask/"
      },
      {
        "path": "modules/qmask/mcp-tools.md",
        "fullPath": "docs/modules/qmask/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 3788,
        "lastModified": "2025-08-15T05:01:44.105Z",
        "contentHash": "60f50d29f4f7ba660bfd33f37eb41774",
        "content": "# qmask - MCP Tools\n\nPrivacy & Anonymization module with privacy profile management\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qmask',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### qmask.apply\n\nApply privacy masking to data using a specified profile\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| data | object | Yes | Data object to apply masking to |\n| profileName | string | Yes | Name of the privacy profile to apply |\n| context | object | No | Additional context for masking decisions |\n\n#### Output\n\n| Property | Type | Req",
        "wordCount": 553,
        "category": "modules",
        "subcategory": "qmask",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmask/"
      },
      {
        "path": "modules/qmask/mcp.md",
        "fullPath": "docs/modules/qmask/mcp.md",
        "name": "mcp.md",
        "size": 8708,
        "lastModified": "2025-08-14T20:48:08.649Z",
        "contentHash": "66f208d9885e348d944807fd02a8081f",
        "content": "# Qmask MCP Tools\n\n## Overview\nPrivacy & Anonymization module with privacy profile management\n\n## Available Tools\n\n## qmask.apply\n\nApply privacy masking to data using a specified profile\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"data\": {\n      \"type\": \"object\",\n      \"description\": \"Data object to apply masking to\",\n      \"additionalProperties\": true\n    },\n    \"profileName\": {\n      \"type\": \"string\",\n      \"description\": \"Name of the privacy profile to apply\"\n    },\n    \"context\": {\n      \"type\": \"object\",\n      \"description\": \"Additional context for masking decisions\",\n      \"properties\": {\n        \"purpose\": {\n          \"type\": \"string\",\n          \"description\": \"Purpose of data processing\"\n        },\n        \"jurisdiction\": {\n          \"type\": \"string\",\n          \"description\": \"Legal jurisdiction\"\n        },\n        \"dataSubject\": {\n          \"type\": \"string\",\n          \"description\": \"Data subject identifier\"\n        }\n      },\n      \"additionalPrope",
        "wordCount": 867,
        "category": "modules",
        "subcategory": "qmask",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmask/"
      },
      {
        "path": "modules/qmask/runbook.md",
        "fullPath": "docs/modules/qmask/runbook.md",
        "name": "runbook.md",
        "size": 6916,
        "lastModified": "2025-08-14T20:48:08.650Z",
        "contentHash": "2f79352e8082729d0e66182cb16301d5",
        "content": "# Qmask Operational Runbook\n\n## Service Overview\n\n## Service Description\nPrivacy & Anonymization module for Q ecosystem\n\n## Key Features\n- Privacy profiles\n- Data anonymization\n- Re-identification prevention\n- GDPR compliance\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3060\n- **Protocol**: HTTP/REST + MCP\n- **Database**: In-memory + IPFS\n- **Storage**: IPFS\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n- Queue depths and processing times\n\n## Alerting Thresholds\n- **Crit",
        "wordCount": 994,
        "category": "modules",
        "subcategory": "qmask",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmask/"
      },
      {
        "path": "modules/qmask/troubleshooting.md",
        "fullPath": "docs/modules/qmask/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5150,
        "lastModified": "2025-08-15T05:01:44.106Z",
        "contentHash": "a4de68097afc416d63285375aa3d3418",
        "content": "# Qmask API - Troubleshooting Guide\n\nThis guide helps resolve common issues with qmask.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qmask\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   const decoded = jwt.deco",
        "wordCount": 634,
        "category": "modules",
        "subcategory": "qmask",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qmask/"
      },
      {
        "path": "modules/qnet/README.md",
        "fullPath": "docs/modules/qnet/README.md",
        "name": "README.md",
        "size": 855,
        "lastModified": "2025-08-15T05:01:44.116Z",
        "contentHash": "59148643fcd0309383a5caf753fe1a70",
        "content": "# QNET - Network Infrastructure API\n\nNetwork infrastructure services for the Q ecosystem\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qnet\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qnet\ndocker-compose up\n```\n\n## Key Features\n\n- **7 HTTP endpoints** for REST API access\n- **3 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 110,
        "category": "modules",
        "subcategory": "qnet",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qnet/"
      },
      {
        "path": "modules/qnet/api-reference.md",
        "fullPath": "docs/modules/qnet/api-reference.md",
        "name": "api-reference.md",
        "size": 4982,
        "lastModified": "2025-08-15T05:01:44.111Z",
        "contentHash": "4e0baf2268c4ef85a1fa831696fd5b38",
        "content": "# QNET - Network Infrastructure API - API Reference\n\nNetwork infrastructure services for the Q ecosystem\n\n**Version:** 1.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/qnet`\n- Production: `https://api.q.network/qnet`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n### GET /health\n\n**Health check**\n\nGet service health status\n\n#### Responses\n\n**200**: Service health status\n\nSchema: HealthRespo",
        "wordCount": 636,
        "category": "modules",
        "subcategory": "qnet",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qnet/"
      },
      {
        "path": "modules/qnet/api.md",
        "fullPath": "docs/modules/qnet/api.md",
        "name": "api.md",
        "size": 2272,
        "lastModified": "2025-08-14T20:48:08.652Z",
        "contentHash": "8a3b740812b6876f4af700b3bf162342",
        "content": "# Qnet API Documentation\n\n## Overview\nNetwork infrastructure services for the Q ecosystem\n\n## Base URL\n`http://localhost:3014`\n\n## Authentication\n- **BearerAuth**: bearer authentication\n- **ApiKeyAuth**: API Key in header\n\n## Endpoints\n\n### GET /health\nHealth check\n\n**Operation ID:** `getHealth`\n\n\n\n\n\n**Responses:**\n- **200**: Service health status\n\n\n### GET /nodes\nList network nodes\n\n**Operation ID:** `listNodes`\n\n**Parameters:**\n- `region` (query): Filter by region\n- `status` (query): Filter by status\n- `tier` (query): Filter by tier\n\n\n\n**Responses:**\n- **200**: List of network nodes\n\n\n### GET /nodes/{nodeId}\nGet node details\n\n**Operation ID:** `getNode`\n\n**Parameters:**\n- `nodeId` (path): Node identifier\n\n\n\n**Responses:**\n- **200**: Node details\n- **404**: Node not found\n\n\n### POST /nodes/{nodeId}/ping\nPing node\n\n**Operation ID:** `pingNode`\n\n**Parameters:**\n- `nodeId` (path): Node identifier\n\n**Request Body:**\n```json\n{\n  \"$ref\": \"#/components/schemas/PingRequest\"\n}\n```\n\n**Responses",
        "wordCount": 286,
        "category": "modules",
        "subcategory": "qnet",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qnet/"
      },
      {
        "path": "modules/qnet/deployment-guide.md",
        "fullPath": "docs/modules/qnet/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3011,
        "lastModified": "2025-08-15T05:01:44.112Z",
        "contentHash": "1e856cb21f2706bc6b50b3d8db3cd744",
        "content": "# QNET - Network Infrastructure API - Deployment Guide\n\nThis guide covers deployment options for qnet in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qnet\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqnet_MODE=standalone\nqnet_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\ne",
        "wordCount": 333,
        "category": "modules",
        "subcategory": "qnet",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qnet/"
      },
      {
        "path": "modules/qnet/deployment.md",
        "fullPath": "docs/modules/qnet/deployment.md",
        "name": "deployment.md",
        "size": 6049,
        "lastModified": "2025-08-14T20:48:08.653Z",
        "contentHash": "bae96c7bcd110bd4e09cf7e2e1d0b491",
        "content": "# Qnet Deployment Guide\n\n## Overview\nNetwork infrastructure services for the Q ecosystem\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qnet\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f qnet\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport QNET_MODE=standalone\n\n# Start the service\nnpm run dev\n\n# Or for production\nnp",
        "wordCount": 746,
        "category": "modules",
        "subcategory": "qnet",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qnet/"
      },
      {
        "path": "modules/qnet/examples.md",
        "fullPath": "docs/modules/qnet/examples.md",
        "name": "examples.md",
        "size": 3427,
        "lastModified": "2025-08-14T20:48:08.654Z",
        "contentHash": "aebf32892e4d46f116e42987197c1144",
        "content": "# Qnet Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3100',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass QnetClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        return res",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "qnet",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qnet/"
      },
      {
        "path": "modules/qnet/integration-guide.md",
        "fullPath": "docs/modules/qnet/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10277,
        "lastModified": "2025-08-15T05:01:44.116Z",
        "contentHash": "1339e3e0b506a448ac60167a02a933a7",
        "content": "# QNET - Network Infrastructure API - Integration Guide\n\nThis guide provides examples and patterns for integrating qnet with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qnetClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qnet',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.intercep",
        "wordCount": 1166,
        "category": "modules",
        "subcategory": "qnet",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qnet/"
      },
      {
        "path": "modules/qnet/mcp-tools.md",
        "fullPath": "docs/modules/qnet/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 3817,
        "lastModified": "2025-08-15T05:01:44.111Z",
        "contentHash": "a6431d1633de3be5895d44d7fb66ac87",
        "content": "# qnet - MCP Tools\n\nQNET Network Infrastructure MCP Tools\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qnet',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### qnet.ping\n\nPing network nodes to test connectivity and measure latency\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| nodeId | string | No | Target node identifier (optional, pings all nodes if not specified) |\n| timeout | integer | No | Ping timeout in milliseconds |\n| count | integer | No | Number of ping attempts |\n\n#### Output\n\n| Property | Type | Required | Descriptio",
        "wordCount": 550,
        "category": "modules",
        "subcategory": "qnet",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qnet/"
      },
      {
        "path": "modules/qnet/mcp.md",
        "fullPath": "docs/modules/qnet/mcp.md",
        "name": "mcp.md",
        "size": 6501,
        "lastModified": "2025-08-14T20:48:08.652Z",
        "contentHash": "43f3319f56c84676e2041936f21d04a6",
        "content": "# Qnet MCP Tools\n\n## Overview\nQNET Network Infrastructure MCP Tools\n\n## Available Tools\n\n## qnet.ping\n\nPing network nodes to test connectivity and measure latency\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"nodeId\": {\n      \"type\": \"string\",\n      \"description\": \"Target node identifier (optional, pings all nodes if not specified)\"\n    },\n    \"timeout\": {\n      \"type\": \"integer\",\n      \"description\": \"Ping timeout in milliseconds\",\n      \"default\": 5000\n    },\n    \"count\": {\n      \"type\": \"integer\",\n      \"description\": \"Number of ping attempts\",\n      \"default\": 1\n    }\n  }\n}\n```\n\n**Output Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"results\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"nodeId\": {\n            \"type\": \"string\"\n          },\n          \"latency\": {\n            \"type\": \"number\"\n          },\n          \"success\": {\n            \"type\": \"boolean\"\n          },\n          \"erro",
        "wordCount": 689,
        "category": "modules",
        "subcategory": "qnet",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qnet/"
      },
      {
        "path": "modules/qnet/runbook.md",
        "fullPath": "docs/modules/qnet/runbook.md",
        "name": "runbook.md",
        "size": 6903,
        "lastModified": "2025-08-14T20:48:08.654Z",
        "contentHash": "a8363e017543fe7fcf636389b1947eef",
        "content": "# Qnet Operational Runbook\n\n## Service Overview\n\n## Service Description\nNetwork infrastructure services for the Q ecosystem\n\n## Key Features\n- Network monitoring\n- Node health\n- Latency tracking\n- Capability discovery\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3100\n- **Protocol**: HTTP/REST + MCP\n- **Database**: In-memory + IPFS\n- **Storage**: IPFS\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n- Queue depths and processing times\n\n## Alerting Thresholds\n- **Critical**: ",
        "wordCount": 994,
        "category": "modules",
        "subcategory": "qnet",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qnet/"
      },
      {
        "path": "modules/qnet/troubleshooting.md",
        "fullPath": "docs/modules/qnet/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5169,
        "lastModified": "2025-08-15T05:01:44.115Z",
        "contentHash": "5acd089b41f75a91e2d0f84c87fe000b",
        "content": "# QNET - Network Infrastructure API - Troubleshooting Guide\n\nThis guide helps resolve common issues with qnet.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qnet\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   co",
        "wordCount": 637,
        "category": "modules",
        "subcategory": "qnet",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qnet/"
      },
      {
        "path": "modules/qonsent/README.md",
        "fullPath": "docs/modules/qonsent/README.md",
        "name": "README.md",
        "size": 857,
        "lastModified": "2025-08-15T05:01:44.121Z",
        "contentHash": "7ea3a968c9e5f46787e3fbffaea23be9",
        "content": "# Qonsent API\n\nPolicies & Permissions module for Q ecosystem with UCAN policy engine\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qonsent\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qonsent\ndocker-compose up\n```\n\n## Key Features\n\n- **6 HTTP endpoints** for REST API access\n- **3 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 111,
        "category": "modules",
        "subcategory": "qonsent",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qonsent/"
      },
      {
        "path": "modules/qonsent/api-reference.md",
        "fullPath": "docs/modules/qonsent/api-reference.md",
        "name": "api-reference.md",
        "size": 3708,
        "lastModified": "2025-08-15T05:01:44.118Z",
        "contentHash": "3a32afb0250a5373b4ac7e251b056b4c",
        "content": "# Qonsent API - API Reference\n\nPolicies & Permissions module for Q ecosystem with UCAN policy engine\n\n**Version:** 2.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/qonsent`\n- Production: `https://api.q.network/qonsent`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n\n## Data Models\n\n\n### HealthResponse\n\n#### Properties\n\n- **status** (string): \n  - Values: ok, error\n- **timestamp** (string): ",
        "wordCount": 461,
        "category": "modules",
        "subcategory": "qonsent",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qonsent/"
      },
      {
        "path": "modules/qonsent/api.md",
        "fullPath": "docs/modules/qonsent/api.md",
        "name": "api.md",
        "size": 568,
        "lastModified": "2025-08-14T20:48:08.655Z",
        "contentHash": "30fbb74dbf25301ed230fe0317109313",
        "content": "# Qonsent API Documentation\n\n## Overview\nPolicies & Permissions module for Q ecosystem with UCAN policy engine\n\n## Base URL\n`http://localhost:3003/api/v1`\n\n## Authentication\n- **squidAuth**: bearer authentication\n\n## Endpoints\n\n\n## Error Codes\n- **400**: undefined\n- **401**: undefined\n- **403**: undefined\n\n## Rate Limits\n\n- **Default**: 100 requests per minute per identity\n- **Burst**: 200 requests per minute (temporary)\n- **Premium**: 1000 requests per minute (with Qwallet payment)\n- **Headers**: Rate limit information in `X-RateLimit-*` headers\n\n\n## Examples\n\n",
        "wordCount": 78,
        "category": "modules",
        "subcategory": "qonsent",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qonsent/"
      },
      {
        "path": "modules/qonsent/deployment-guide.md",
        "fullPath": "docs/modules/qonsent/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3031,
        "lastModified": "2025-08-15T05:01:44.119Z",
        "contentHash": "6d7cee93dc1df6c311e87c94ab7caad1",
        "content": "# Qonsent API - Deployment Guide\n\nThis guide covers deployment options for qonsent in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qonsent\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqonsent_MODE=standalone\nqonsent_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\nexport qons",
        "wordCount": 330,
        "category": "modules",
        "subcategory": "qonsent",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qonsent/"
      },
      {
        "path": "modules/qonsent/deployment.md",
        "fullPath": "docs/modules/qonsent/deployment.md",
        "name": "deployment.md",
        "size": 6133,
        "lastModified": "2025-08-14T20:48:08.661Z",
        "contentHash": "fe59afa803b1a7c5fa95d7f389283937",
        "content": "# Qonsent Deployment Guide\n\n## Overview\nPolicies & Permissions module for Q ecosystem with UCAN policy engine\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qonsent\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f qonsent\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport QONSENT_MODE=standalone\n\n# Start the service\nnpm r",
        "wordCount": 750,
        "category": "modules",
        "subcategory": "qonsent",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qonsent/"
      },
      {
        "path": "modules/qonsent/examples.md",
        "fullPath": "docs/modules/qonsent/examples.md",
        "name": "examples.md",
        "size": 3495,
        "lastModified": "2025-08-14T20:48:08.662Z",
        "contentHash": "133c1979c79feacf9d744a242d6078f7",
        "content": "# Qonsent Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3030',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass QonsentClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        retu",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "qonsent",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qonsent/"
      },
      {
        "path": "modules/qonsent/integration-guide.md",
        "fullPath": "docs/modules/qonsent/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10367,
        "lastModified": "2025-08-15T05:01:44.120Z",
        "contentHash": "271c9388c5b81de858fcf32827d01f77",
        "content": "# Qonsent API - Integration Guide\n\nThis guide provides examples and patterns for integrating qonsent with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qonsentClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qonsent',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.interceptors.response",
        "wordCount": 1163,
        "category": "modules",
        "subcategory": "qonsent",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qonsent/"
      },
      {
        "path": "modules/qonsent/mcp-tools.md",
        "fullPath": "docs/modules/qonsent/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 3996,
        "lastModified": "2025-08-15T05:01:44.119Z",
        "contentHash": "f1671ba0f82325d23d8a5a5f79059b08",
        "content": "# qonsent - MCP Tools\n\nPolicies & Permissions module with UCAN policy engine\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qonsent',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### qonsent.check\n\nCheck if an identity has permission to perform an action on a resource\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| resource | string | Yes | Resource identifier (e.g., 'qdrive:file:abc123') |\n| identity | string | Yes | Identity DID to check permissions for |\n| action | string | Yes | Action to check (e.g., 'read', 'write', 'delete')",
        "wordCount": 600,
        "category": "modules",
        "subcategory": "qonsent",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qonsent/"
      },
      {
        "path": "modules/qonsent/mcp.md",
        "fullPath": "docs/modules/qonsent/mcp.md",
        "name": "mcp.md",
        "size": 5758,
        "lastModified": "2025-08-14T20:48:08.656Z",
        "contentHash": "1bc06ed20f1d93afee021cca456b3fb7",
        "content": "# Qonsent MCP Tools\n\n## Overview\nPolicies & Permissions module with UCAN policy engine\n\n## Available Tools\n\n## qonsent.check\n\nCheck if an identity has permission to perform an action on a resource\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"resource\": {\n      \"type\": \"string\",\n      \"description\": \"Resource identifier (e.g., 'qdrive:file:abc123')\"\n    },\n    \"identity\": {\n      \"type\": \"string\",\n      \"description\": \"Identity DID to check permissions for\"\n    },\n    \"action\": {\n      \"type\": \"string\",\n      \"description\": \"Action to check (e.g., 'read', 'write', 'delete')\"\n    },\n    \"context\": {\n      \"type\": \"object\",\n      \"description\": \"Additional context for permission check\",\n      \"additionalProperties\": true\n    }\n  },\n  \"required\": [\n    \"resource\",\n    \"identity\",\n    \"action\"\n  ]\n}\n```\n\n**Output Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"allowed\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the action is allowed\"\n",
        "wordCount": 639,
        "category": "modules",
        "subcategory": "qonsent",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qonsent/"
      },
      {
        "path": "modules/qonsent/runbook.md",
        "fullPath": "docs/modules/qonsent/runbook.md",
        "name": "runbook.md",
        "size": 6943,
        "lastModified": "2025-08-14T20:48:08.662Z",
        "contentHash": "bb4565a997d502ce96e0cab1e7a30c15",
        "content": "# Qonsent Operational Runbook\n\n## Service Overview\n\n## Service Description\nPolicies & Permissions module for Q ecosystem with UCAN policy engine\n\n## Key Features\n- Permission management\n- UCAN policies\n- Real-time revocation\n- Granular scopes\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3030\n- **Protocol**: HTTP/REST + MCP\n- **Database**: In-memory + IPFS\n- **Storage**: IPFS\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n- Queue depths and processing times\n\n## Alerting Th",
        "wordCount": 998,
        "category": "modules",
        "subcategory": "qonsent",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qonsent/"
      },
      {
        "path": "modules/qonsent/troubleshooting.md",
        "fullPath": "docs/modules/qonsent/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5162,
        "lastModified": "2025-08-15T05:01:44.120Z",
        "contentHash": "fb2b1a90bf9671442df0f4c7813f3319",
        "content": "# Qonsent API - Troubleshooting Guide\n\nThis guide helps resolve common issues with qonsent.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qonsent\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   const decoded = jw",
        "wordCount": 634,
        "category": "modules",
        "subcategory": "qonsent",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qonsent/"
      },
      {
        "path": "modules/qpic/README.md",
        "fullPath": "docs/modules/qpic/README.md",
        "name": "README.md",
        "size": 878,
        "lastModified": "2025-08-15T05:01:44.129Z",
        "contentHash": "9fefe5291b595aac21c2a4ea9132e7d0",
        "content": "# QpiC API\n\nMedia Management module for Q ecosystem with transcoding, optimization, and marketplace integration\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qpic\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qpic\ndocker-compose up\n```\n\n## Key Features\n\n- **9 HTTP endpoints** for REST API access\n- **5 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 112,
        "category": "modules",
        "subcategory": "qpic",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qpic/"
      },
      {
        "path": "modules/qpic/api-reference.md",
        "fullPath": "docs/modules/qpic/api-reference.md",
        "name": "api-reference.md",
        "size": 4531,
        "lastModified": "2025-08-15T05:01:44.122Z",
        "contentHash": "605d80f140a6f79647ff3654ac54d9f2",
        "content": "# QpiC API - API Reference\n\nMedia Management module for Q ecosystem with transcoding, optimization, and marketplace integration\n\n**Version:** 2.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/qpic`\n- Production: `https://api.q.network/qpic`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n\n## Data Models\n\n\n### MediaMetadata\n\n#### Properties\n\n- **technical** (object): \n- **descriptive** (object",
        "wordCount": 572,
        "category": "modules",
        "subcategory": "qpic",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qpic/"
      },
      {
        "path": "modules/qpic/api.md",
        "fullPath": "docs/modules/qpic/api.md",
        "name": "api.md",
        "size": 624,
        "lastModified": "2025-08-14T20:48:08.665Z",
        "contentHash": "4cc7be8bae259207a7d79a8b6d266500",
        "content": "# Qpic API Documentation\n\n## Overview\nMedia Management module for Q ecosystem with transcoding, optimization, and marketplace integration\n\n## Base URL\n`http://localhost:3008/api/v1`\n\n## Authentication\n- **bearerAuth**: bearer authentication\n\n## Endpoints\n\n\n## Error Codes\n- **400**: Invalid file or parameters\n- **413**: File too large\n- **404**: Media not found\n\n## Rate Limits\n\n- **Default**: 100 requests per minute per identity\n- **Burst**: 200 requests per minute (temporary)\n- **Premium**: 1000 requests per minute (with Qwallet payment)\n- **Headers**: Rate limit information in `X-RateLimit-*` headers\n\n\n## Examples\n\n",
        "wordCount": 86,
        "category": "modules",
        "subcategory": "qpic",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qpic/"
      },
      {
        "path": "modules/qpic/deployment-guide.md",
        "fullPath": "docs/modules/qpic/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 2986,
        "lastModified": "2025-08-15T05:01:44.124Z",
        "contentHash": "a50465cb94fd7f0f06b2a7d5d9fafff6",
        "content": "# QpiC API - Deployment Guide\n\nThis guide covers deployment options for qpic in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qpic\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqpic_MODE=standalone\nqpic_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\nexport qpic_MODE=hybrid\n\nn",
        "wordCount": 330,
        "category": "modules",
        "subcategory": "qpic",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qpic/"
      },
      {
        "path": "modules/qpic/deployment.md",
        "fullPath": "docs/modules/qpic/deployment.md",
        "name": "deployment.md",
        "size": 6097,
        "lastModified": "2025-08-14T20:48:08.666Z",
        "contentHash": "4154136594d471dcb534c64630192b5d",
        "content": "# Qpic Deployment Guide\n\n## Overview\nMedia Management module for Q ecosystem with transcoding, optimization, and marketplace integration\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qpic\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f qpic\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport QPIC_MODE=standalone\n\n# Start",
        "wordCount": 751,
        "category": "modules",
        "subcategory": "qpic",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qpic/"
      },
      {
        "path": "modules/qpic/examples.md",
        "fullPath": "docs/modules/qpic/examples.md",
        "name": "examples.md",
        "size": 3431,
        "lastModified": "2025-08-14T20:48:08.666Z",
        "contentHash": "8a7f1a05595b5a81e12c6506c3d8410d",
        "content": "# Qpic Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3070',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass QpicClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        return res",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "qpic",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qpic/"
      },
      {
        "path": "modules/qpic/integration-guide.md",
        "fullPath": "docs/modules/qpic/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10253,
        "lastModified": "2025-08-15T05:01:44.127Z",
        "contentHash": "79884ea853af8900788963ba45d3d8d2",
        "content": "# QpiC API - Integration Guide\n\nThis guide provides examples and patterns for integrating qpic with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qpicClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qpic',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.interceptors.response.use(\n      ",
        "wordCount": 1163,
        "category": "modules",
        "subcategory": "qpic",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qpic/"
      },
      {
        "path": "modules/qpic/mcp-tools.md",
        "fullPath": "docs/modules/qpic/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 6041,
        "lastModified": "2025-08-15T05:01:44.123Z",
        "contentHash": "704b658a6d585a197adaedbe15761b75",
        "content": "# qpic - MCP Tools\n\nMedia Management module with transcoding, optimization, and marketplace integration\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qpic',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### qpic.upload\n\nUpload media files with automatic metadata extraction and privacy protection\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| file | string | Yes | Media file to upload |\n| filename | string | Yes | Original filename |\n| metadata | object | No | Additional metadata to associate with the file |\n| privacyProfile | stri",
        "wordCount": 909,
        "category": "modules",
        "subcategory": "qpic",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qpic/"
      },
      {
        "path": "modules/qpic/mcp.md",
        "fullPath": "docs/modules/qpic/mcp.md",
        "name": "mcp.md",
        "size": 17270,
        "lastModified": "2025-08-14T20:48:08.665Z",
        "contentHash": "ffa8e8e6ddf0a09f7c846b1bc1d27106",
        "content": "# Qpic MCP Tools\n\n## Overview\nMedia Management module with transcoding, optimization, and marketplace integration\n\n## Available Tools\n\n## qpic.upload\n\nUpload media files with automatic metadata extraction and privacy protection\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"file\": {\n      \"type\": \"string\",\n      \"format\": \"binary\",\n      \"description\": \"Media file to upload\"\n    },\n    \"filename\": {\n      \"type\": \"string\",\n      \"description\": \"Original filename\"\n    },\n    \"metadata\": {\n      \"type\": \"object\",\n      \"description\": \"Additional metadata to associate with the file\",\n      \"properties\": {\n        \"title\": {\n          \"type\": \"string\",\n          \"description\": \"Media title\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"Media description\"\n        },\n        \"tags\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Media tags\"\n        },\n  ",
        "wordCount": 1588,
        "category": "modules",
        "subcategory": "qpic",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qpic/"
      },
      {
        "path": "modules/qpic/runbook.md",
        "fullPath": "docs/modules/qpic/runbook.md",
        "name": "runbook.md",
        "size": 6956,
        "lastModified": "2025-08-14T20:48:08.666Z",
        "contentHash": "1b00c1b9f7ba7d7e7d93f5b791565618",
        "content": "# Qpic Operational Runbook\n\n## Service Overview\n\n## Service Description\nMedia Management module for Q ecosystem with transcoding, optimization, and marketplace integration\n\n## Key Features\n- Media management\n- Transcoding\n- Optimization\n- Marketplace integration\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3070\n- **Protocol**: HTTP/REST + MCP\n- **Database**: In-memory + IPFS\n- **Storage**: IPFS Primary\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n- Queue depths and proc",
        "wordCount": 998,
        "category": "modules",
        "subcategory": "qpic",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qpic/"
      },
      {
        "path": "modules/qpic/troubleshooting.md",
        "fullPath": "docs/modules/qpic/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5144,
        "lastModified": "2025-08-15T05:01:44.126Z",
        "contentHash": "0494cbb54bd4ccfc97404b1927ec10c8",
        "content": "# QpiC API - Troubleshooting Guide\n\nThis guide helps resolve common issues with qpic.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qpic\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   const decoded = jwt.decode(",
        "wordCount": 634,
        "category": "modules",
        "subcategory": "qpic",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qpic/"
      },
      {
        "path": "modules/qwallet/README.md",
        "fullPath": "docs/modules/qwallet/README.md",
        "name": "README.md",
        "size": 832,
        "lastModified": "2025-08-15T05:01:44.136Z",
        "contentHash": "a535050cbedb825d4ef0b21c81f69736",
        "content": "# Qwallet API\n\nPayments & Fees Module for AnarQ&Q Ecosystem\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/qwallet\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/qwallet\ndocker-compose up\n```\n\n## Key Features\n\n- **7 HTTP endpoints** for REST API access\n- **5 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 107,
        "category": "modules",
        "subcategory": "qwallet",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qwallet/"
      },
      {
        "path": "modules/qwallet/api-reference.md",
        "fullPath": "docs/modules/qwallet/api-reference.md",
        "name": "api-reference.md",
        "size": 5192,
        "lastModified": "2025-08-15T05:01:44.133Z",
        "contentHash": "9c34cc0c399efea64bc68f7e4f92364b",
        "content": "# Qwallet API - API Reference\n\nPayments & Fees Module for AnarQ&Q Ecosystem\n\n**Version:** 1.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/qwallet`\n- Production: `https://api.q.network/qwallet`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n### GET /health\n\n**Health check**\n\n#### Responses\n\n**200**: Service is healthy\n\nSchema: HealthResponse\n\n\n### POST /intents\n\n**Create payment intent**\n\n#",
        "wordCount": 625,
        "category": "modules",
        "subcategory": "qwallet",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qwallet/"
      },
      {
        "path": "modules/qwallet/api.md",
        "fullPath": "docs/modules/qwallet/api.md",
        "name": "api.md",
        "size": 2534,
        "lastModified": "2025-08-14T20:48:08.673Z",
        "contentHash": "f59c4b8f275c29f7be1d8b385dc45dea",
        "content": "# Qwallet API Documentation\n\n## Overview\nPayments & Fees Module for AnarQ&Q Ecosystem\n\n## Base URL\n`http://localhost:3000`\n\n## Authentication\n- **squidAuth**: bearer authentication\n\n## Endpoints\n\n### GET /health\nHealth check\n\n**Operation ID:** `healthCheck`\n\n\n\n\n\n**Responses:**\n- **200**: Service is healthy\n\n\n### POST /intents\nCreate payment intent\n\n**Operation ID:** `createPaymentIntent`\n\n\n\n**Request Body:**\n```json\n{\n  \"$ref\": \"#/components/schemas/CreatePaymentIntentRequest\"\n}\n```\n\n**Responses:**\n- **201**: Payment intent created\n- **400**: Invalid request\n\n\n### POST /sign\nSign transaction\n\n**Operation ID:** `signTransaction`\n\n\n\n**Request Body:**\n```json\n{\n  \"$ref\": \"#/components/schemas/SignTransactionRequest\"\n}\n```\n\n**Responses:**\n- **200**: Transaction signed\n\n\n### POST /pay\nProcess payment\n\n**Operation ID:** `processPayment`\n\n\n\n**Request Body:**\n```json\n{\n  \"$ref\": \"#/components/schemas/ProcessPaymentRequest\"\n}\n```\n\n**Responses:**\n- **200**: Payment processed\n\n\n### GET /quote\nGet",
        "wordCount": 300,
        "category": "modules",
        "subcategory": "qwallet",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qwallet/"
      },
      {
        "path": "modules/qwallet/deployment-guide.md",
        "fullPath": "docs/modules/qwallet/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3031,
        "lastModified": "2025-08-15T05:01:44.135Z",
        "contentHash": "be4633f1265b69e4185535a1118a848b",
        "content": "# Qwallet API - Deployment Guide\n\nThis guide covers deployment options for qwallet in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/qwallet\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nqwallet_MODE=standalone\nqwallet_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\nexport qwal",
        "wordCount": 330,
        "category": "modules",
        "subcategory": "qwallet",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qwallet/"
      },
      {
        "path": "modules/qwallet/deployment.md",
        "fullPath": "docs/modules/qwallet/deployment.md",
        "name": "deployment.md",
        "size": 6108,
        "lastModified": "2025-08-14T20:48:08.675Z",
        "contentHash": "0f69f8a3d9bc0715002c7b9c196d1e4e",
        "content": "# Qwallet Deployment Guide\n\n## Overview\nPayments & Fees Module for AnarQ&Q Ecosystem\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/qwallet\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f qwallet\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport QWALLET_MODE=standalone\n\n# Start the service\nnpm run dev\n\n# Or for producti",
        "wordCount": 746,
        "category": "modules",
        "subcategory": "qwallet",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qwallet/"
      },
      {
        "path": "modules/qwallet/examples.md",
        "fullPath": "docs/modules/qwallet/examples.md",
        "name": "examples.md",
        "size": 3491,
        "lastModified": "2025-08-14T20:48:08.677Z",
        "contentHash": "aaf626ef8194f2102b5f371a2814576b",
        "content": "# Qwallet Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3000',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass QwalletClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        retu",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "qwallet",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qwallet/"
      },
      {
        "path": "modules/qwallet/integration-guide.md",
        "fullPath": "docs/modules/qwallet/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10364,
        "lastModified": "2025-08-15T05:01:44.136Z",
        "contentHash": "f5b48dda90edb32819c98440b11b4ab0",
        "content": "# Qwallet API - Integration Guide\n\nThis guide provides examples and patterns for integrating qwallet with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass qwalletClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/qwallet',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.interceptors.response",
        "wordCount": 1163,
        "category": "modules",
        "subcategory": "qwallet",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qwallet/"
      },
      {
        "path": "modules/qwallet/mcp-tools.md",
        "fullPath": "docs/modules/qwallet/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 6104,
        "lastModified": "2025-08-15T05:01:44.134Z",
        "contentHash": "53809979ee2a569aa162c7ede80688c1",
        "content": "# qwallet - MCP Tools\n\nQwallet MCP Tools - Payments & Fees Module\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/qwallet',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### wallet.sign\n\nSign transaction with sQuid identity\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| squidId | string | Yes | sQuid identity ID |\n| intentId | string | Yes | Payment intent ID to sign |\n| signature | string | Yes | Cryptographic signature |\n\n#### Output\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| succe",
        "wordCount": 954,
        "category": "modules",
        "subcategory": "qwallet",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qwallet/"
      },
      {
        "path": "modules/qwallet/mcp.md",
        "fullPath": "docs/modules/qwallet/mcp.md",
        "name": "mcp.md",
        "size": 7695,
        "lastModified": "2025-08-14T20:48:08.675Z",
        "contentHash": "3a6c4ca6098baf187287b297101eada8",
        "content": "# Qwallet MCP Tools\n\n## Overview\nQwallet MCP Tools - Payments & Fees Module\n\n## Available Tools\n\n## wallet.sign\n\nSign transaction with sQuid identity\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"squidId\": {\n      \"type\": \"string\",\n      \"description\": \"sQuid identity ID\"\n    },\n    \"intentId\": {\n      \"type\": \"string\",\n      \"description\": \"Payment intent ID to sign\"\n    },\n    \"signature\": {\n      \"type\": \"string\",\n      \"description\": \"Cryptographic signature\"\n    }\n  },\n  \"required\": [\n    \"squidId\",\n    \"intentId\",\n    \"signature\"\n  ]\n}\n```\n\n**Output Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"success\": {\n      \"type\": \"boolean\"\n    },\n    \"transactionId\": {\n      \"type\": \"string\"\n    },\n    \"signature\": {\n      \"type\": \"string\"\n    },\n    \"gasEstimate\": {\n      \"type\": \"number\"\n    },\n    \"error\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\n\n## wallet.pay\n\nProcess payment transaction\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"pr",
        "wordCount": 833,
        "category": "modules",
        "subcategory": "qwallet",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qwallet/"
      },
      {
        "path": "modules/qwallet/runbook.md",
        "fullPath": "docs/modules/qwallet/runbook.md",
        "name": "runbook.md",
        "size": 6965,
        "lastModified": "2025-08-14T20:48:08.677Z",
        "contentHash": "f6a359461e0141602a820db70f5a4fcc",
        "content": "# Qwallet Operational Runbook\n\n## Service Overview\n\n## Service Description\nPayments & Fees Module for AnarQ&Q Ecosystem\n\n## Key Features\n- Multi-chain payments\n- Fee calculation\n- Transaction signing\n- Payment intents\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3000\n- **Protocol**: HTTP/REST + MCP\n- **Database**: PostgreSQL\n- **Storage**: IPFS\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n- Qlock (transaction signing)\n- Multi-chain networks\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n- Queue depths and processing",
        "wordCount": 999,
        "category": "modules",
        "subcategory": "qwallet",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qwallet/"
      },
      {
        "path": "modules/qwallet/troubleshooting.md",
        "fullPath": "docs/modules/qwallet/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5162,
        "lastModified": "2025-08-15T05:01:44.135Z",
        "contentHash": "80fe29876d1b2a1eb1f762aa38f5f4cd",
        "content": "# Qwallet API - Troubleshooting Guide\n\nThis guide helps resolve common issues with qwallet.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep qwallet\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   const decoded = jw",
        "wordCount": 634,
        "category": "modules",
        "subcategory": "qwallet",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/qwallet/"
      },
      {
        "path": "modules/squid/README.md",
        "fullPath": "docs/modules/squid/README.md",
        "name": "README.md",
        "size": 842,
        "lastModified": "2025-08-15T05:01:44.152Z",
        "contentHash": "4d0a4c5a17aa82f928740dc3acfeba2d",
        "content": "# sQuid Identity API\n\nIdentity & Subidentities management for Q ecosystem\n\n## Documentation\n\n- [API Reference](./api-reference.md) - Complete HTTP API documentation\n- [MCP Tools](./mcp-tools.md) - Model Context Protocol tools\n- [Deployment Guide](./deployment-guide.md) - Deployment instructions\n- [Integration Guide](./integration-guide.md) - Integration examples\n- [Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n## Quick Start\n\n### Standalone Mode\n```bash\ncd modules/squid\nnpm install\nnpm run dev\n```\n\n### Docker\n```bash\ncd modules/squid\ndocker-compose up\n```\n\n## Key Features\n\n- **6 HTTP endpoints** for REST API access\n- **2 MCP tools** for serverless integration\n- **Standalone operation** with mock dependencies\n- **Full ecosystem integration** with real services\n- **Comprehensive testing** with 90%+ coverage\n\n",
        "wordCount": 108,
        "category": "modules",
        "subcategory": "squid",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/squid/"
      },
      {
        "path": "modules/squid/api-reference.md",
        "fullPath": "docs/modules/squid/api-reference.md",
        "name": "api-reference.md",
        "size": 5257,
        "lastModified": "2025-08-15T05:01:44.145Z",
        "contentHash": "33a288a6fed86f96cca168b50d6cc798",
        "content": "# sQuid Identity API - API Reference\n\nIdentity & Subidentities management for Q ecosystem\n\n**Version:** 1.0.0\n\n## Base URL\n\n- Development: `http://localhost:3000/api/squid`\n- Production: `https://api.q.network/squid`\n\n## Authentication\n\nAll endpoints require authentication via sQuid identity:\n\n```\nAuthorization: Bearer <jwt-token>\nx-squid-id: <squid-identity-id>\nx-api-version: 1.0.0\n```\n\n## Standard Headers\n\n- `x-squid-id`: sQuid identity ID\n- `x-subid`: Subidentity ID (optional)\n- `x-qonsent`: Consent token for permissions\n- `x-sig`: Qlock signature for verification\n- `x-ts`: Timestamp\n- `x-api-version`: API version\n\n## Standard Response Format\n\nAll responses follow this format:\n\n```json\n{\n  \"status\": \"ok|error\",\n  \"code\": \"SUCCESS|ERROR_CODE\",\n  \"message\": \"Human readable message\",\n  \"data\": {},\n  \"cid\": \"ipfs-content-id\"\n}\n```\n\n## Endpoints\n\n\n### GET /health\n\n**Health check endpoint**\n\n#### Responses\n\n**200**: Service health status\n\nSchema: HealthResponse\n\n\n### POST /identity\n\n**Cre",
        "wordCount": 620,
        "category": "modules",
        "subcategory": "squid",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/squid/"
      },
      {
        "path": "modules/squid/api.md",
        "fullPath": "docs/modules/squid/api.md",
        "name": "api.md",
        "size": 2698,
        "lastModified": "2025-08-14T20:48:08.679Z",
        "contentHash": "4d357deb8c61ea246344cf70192e197f",
        "content": "# Squid API Documentation\n\n## Overview\nIdentity & Subidentities management for Q ecosystem\n\n## Base URL\n`http://localhost:3001`\n\n## Authentication\n- **SquidAuth**: API Key in header\n\n## Endpoints\n\n### GET /health\nHealth check endpoint\n\n**Operation ID:** `getHealth`\n\n\n\n\n\n**Responses:**\n- **200**: Service health status\n\n\n### POST /identity\nCreate new root identity\n\n**Operation ID:** `createIdentity`\n\n\n\n**Request Body:**\n```json\n{\n  \"$ref\": \"#/components/schemas/CreateIdentityRequest\"\n}\n```\n\n**Responses:**\n- **201**: Identity created successfully\n- **400**: Invalid request\n\n\n### GET /identity/{identityId}\nGet identity information\n\n**Operation ID:** `getIdentity`\n\n**Parameters:**\n- `identityId` (path): No description\n\n\n\n**Responses:**\n- **200**: Identity information\n- **404**: Identity not found\n\n\n### POST /identity/{identityId}/subidentity\nCreate subidentity\n\n**Operation ID:** `createSubidentity`\n\n**Parameters:**\n- `identityId` (path): No description\n\n**Request Body:**\n```json\n{\n  \"$ref\":",
        "wordCount": 307,
        "category": "modules",
        "subcategory": "squid",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/squid/"
      },
      {
        "path": "modules/squid/deployment-guide.md",
        "fullPath": "docs/modules/squid/deployment-guide.md",
        "name": "deployment-guide.md",
        "size": 3010,
        "lastModified": "2025-08-15T05:01:44.146Z",
        "contentHash": "7de5e7d1920c3ed5292ce6fcacb3ba64",
        "content": "# sQuid Identity API - Deployment Guide\n\nThis guide covers deployment options for squid in different environments.\n\n## Deployment Modes\n\n### Standalone Mode\n\nStandalone mode runs the module with mock dependencies for development and testing.\n\n```bash\n# Using npm\ncd modules/squid\nnpm install\nnpm run dev\n\n# Using Docker\ndocker-compose up\n```\n\n**Environment Variables:**\n```bash\nsquid_MODE=standalone\nsquid_PORT=3000\nLOG_LEVEL=debug\n```\n\n### Integrated Mode\n\nIntegrated mode connects to real ecosystem services for production deployment.\n\n```bash\n# Set service URLs\nexport SQUID_API_URL=http://squid:3000\nexport QONSENT_API_URL=http://qonsent:3000\nexport QLOCK_API_URL=http://qlock:3000\nexport QINDEX_API_URL=http://qindex:3000\nexport QERBEROS_API_URL=http://qerberos:3000\n\n# Start in integrated mode\nnpm run start:integrated\n```\n\n### Hybrid Mode\n\nHybrid mode allows selective mocking for staging environments.\n\n```bash\n# Configure which services to mock\nexport MOCK_SERVICES=qlock,qindex\nexport squid",
        "wordCount": 331,
        "category": "modules",
        "subcategory": "squid",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/squid/"
      },
      {
        "path": "modules/squid/deployment.md",
        "fullPath": "docs/modules/squid/deployment.md",
        "name": "deployment.md",
        "size": 6071,
        "lastModified": "2025-08-14T20:48:08.680Z",
        "contentHash": "361e6c36de06ef6c368106142ae4f9a9",
        "content": "# Squid Deployment Guide\n\n## Overview\nIdentity & Subidentities management for Q ecosystem\n\n## Prerequisites\n\n## System Requirements\n\n- Node.js 18+ or Docker\n- 2GB RAM minimum\n- 10GB disk space\n- Network access to IPFS (if using storage features)\n\n## Dependencies\n\n- HTTP client (curl, Postman, etc.)\n- MCP-compatible client\n- sQuid identity service (for authentication)\n- Qonsent permission service (for authorization)\n\n## Environment Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/anarq/q-ecosystem.git\ncd q-ecosystem/modules/squid\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp .env.example .env\n\n# Edit configuration\nnano .env\n```\n\n\n## Standalone Mode\n\n## Docker Compose (Recommended)\n\n```bash\n# Start with mock services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f squid\n```\n\n## Manual Deployment\n\n```bash\n# Set standalone mode\nexport SQUID_MODE=standalone\n\n# Start the service\nnpm run dev\n\n# Or for productio",
        "wordCount": 746,
        "category": "modules",
        "subcategory": "squid",
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/squid/"
      },
      {
        "path": "modules/squid/examples.md",
        "fullPath": "docs/modules/squid/examples.md",
        "name": "examples.md",
        "size": 3469,
        "lastModified": "2025-08-14T20:48:08.680Z",
        "contentHash": "ecd7991743a4accf0acadf7a82c6ef4e",
        "content": "# Squid Integration Examples\n\n\n## HTTP API Integration\n\n### JavaScript/Node.js Example\n```javascript\nimport axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'http://localhost:3010',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-squid-id': 'your-squid-id',\n    'x-api-version': '1.0'\n  }\n});\n\n// Example API call\nasync function example() {\n  try {\n    const response = await client.get('/health');\n    console.log('Service status:', response.data.status);\n  } catch (error) {\n    console.error('API call failed:', error.response?.data);\n  }\n}\n```\n\n### Python Example\n```python\nimport requests\n\nclass SquidClient:\n    def __init__(self, base_url, squid_id):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'x-squid-id': squid_id,\n            'x-api-version': '1.0'\n        }\n    \n    def health_check(self):\n        response = requests.get(f\"{self.base_url}/health\", headers=self.headers)\n        return r",
        "wordCount": 373,
        "category": "modules",
        "subcategory": "squid",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/squid/"
      },
      {
        "path": "modules/squid/integration-guide.md",
        "fullPath": "docs/modules/squid/integration-guide.md",
        "name": "integration-guide.md",
        "size": 10314,
        "lastModified": "2025-08-15T05:01:44.148Z",
        "contentHash": "a56f5677967b93e856dce1a5eb219bd8",
        "content": "# sQuid Identity API - Integration Guide\n\nThis guide provides examples and patterns for integrating squid with other systems.\n\n## Integration Patterns\n\n### HTTP API Integration\n\nThe most common integration pattern using REST APIs:\n\n```javascript\nimport axios from 'axios';\n\nclass squidClient {\n  constructor(options = {}) {\n    this.client = axios.create({\n      baseURL: options.baseURL || 'http://localhost:3000/api/squid',\n      timeout: options.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-version': '1.0.0',\n        ...options.headers\n      }\n    });\n\n    // Add authentication interceptor\n    this.client.interceptors.request.use((config) => {\n      if (options.squidId) {\n        config.headers['x-squid-id'] = options.squidId;\n      }\n      if (options.token) {\n        config.headers['Authorization'] = `Bearer ${options.token}`;\n      }\n      return config;\n    });\n\n    // Add error handling interceptor\n    this.client.interceptors.respons",
        "wordCount": 1164,
        "category": "modules",
        "subcategory": "squid",
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/squid/"
      },
      {
        "path": "modules/squid/mcp-tools.md",
        "fullPath": "docs/modules/squid/mcp-tools.md",
        "name": "mcp-tools.md",
        "size": 2848,
        "lastModified": "2025-08-15T05:01:44.146Z",
        "contentHash": "de415a853672d44e4b8f4d533be86dd7",
        "content": "# squid - MCP Tools\n\nsQuid Identity & Subidentities MCP Tools\n\n## Overview\n\nThis module provides Model Context Protocol (MCP) tools for serverless integration with the Q ecosystem. MCP tools enable function-based interactions that are ideal for AI agents and serverless environments.\n\n## Connection\n\n```javascript\nimport { MCPClient } from '@anarq/mcp-client';\n\nconst client = new MCPClient({\n  serverUrl: 'http://localhost:3000/mcp/squid',\n  authentication: {\n    squidId: 'your-squid-id',\n    token: 'your-jwt-token'\n  }\n});\n\nawait client.connect();\n```\n\n## Tools\n\n\n### squid.verifyIdentity\n\nVerify identity ownership and authenticity\n\n#### Input\n\n| Property | Type | Required | Description |\n|----------|------|----------|-------------|\n| identityId | string | Yes | Identity DID to verify |\n| signature | string | Yes | Cryptographic signature for verification |\n| message | string | Yes | Message that was signed |\n| timestamp | string | No | Timestamp of the verification request |\n\n#### Output",
        "wordCount": 397,
        "category": "modules",
        "subcategory": "squid",
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/squid/"
      },
      {
        "path": "modules/squid/mcp.md",
        "fullPath": "docs/modules/squid/mcp.md",
        "name": "mcp.md",
        "size": 4630,
        "lastModified": "2025-08-14T20:48:08.679Z",
        "contentHash": "d01322568f92f31a54230188690f9910",
        "content": "# Squid MCP Tools\n\n## Overview\nsQuid Identity & Subidentities MCP Tools\n\n## Available Tools\n\n## squid.verifyIdentity\n\nVerify identity ownership and authenticity\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identityId\": {\n      \"type\": \"string\",\n      \"format\": \"uuid\",\n      \"description\": \"Identity DID to verify\"\n    },\n    \"signature\": {\n      \"type\": \"string\",\n      \"description\": \"Cryptographic signature for verification\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"Message that was signed\"\n    },\n    \"timestamp\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"description\": \"Timestamp of the verification request\"\n    }\n  },\n  \"required\": [\n    \"identityId\",\n    \"signature\",\n    \"message\"\n  ]\n}\n```\n\n**Output Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"verified\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether the identity is verified\"\n    },\n    \"identity\": {\n      \"$ref\": \"#/definitions/Id",
        "wordCount": 491,
        "category": "modules",
        "subcategory": "squid",
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/squid/"
      },
      {
        "path": "modules/squid/runbook.md",
        "fullPath": "docs/modules/squid/runbook.md",
        "name": "runbook.md",
        "size": 6918,
        "lastModified": "2025-08-14T20:48:08.680Z",
        "contentHash": "5b6b84ade236cd758e81d0afdd7cf157",
        "content": "# Squid Operational Runbook\n\n## Service Overview\n\n## Service Description\nIdentity & Subidentities management for Q ecosystem\n\n## Key Features\n- Identity management\n- Subidentity creation\n- Reputation tracking\n- DAO associations\n\n## Architecture\n- **Type**: Hybrid (HTTP + MCP)\n- **Port**: 3010\n- **Protocol**: HTTP/REST + MCP\n- **Database**: In-memory + IPFS\n- **Storage**: IPFS\n\n## Dependencies\n- sQuid (identity verification)\n- Qonsent (permission checking)\n- Qerberos (audit logging)\n- IPFS (content storage)\n\n## SLA Targets\n- **Availability**: 99.9%\n- **Response Time**: p99 < 200ms\n- **Error Rate**: < 0.1%\n- **Recovery Time**: < 5 minutes\n\n\n## Health Monitoring\n\n## Health Check Endpoints\n- `/health`: Overall service health\n- `/ready`: Readiness for traffic\n- `/live`: Liveness check\n\n## Key Metrics to Monitor\n- Request rate and latency\n- Error rate by endpoint\n- Dependency health status\n- Resource utilization (CPU, memory)\n- Queue depths and processing times\n\n## Alerting Thresholds\n- **Cr",
        "wordCount": 994,
        "category": "modules",
        "subcategory": "squid",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/squid/"
      },
      {
        "path": "modules/squid/troubleshooting.md",
        "fullPath": "docs/modules/squid/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 5159,
        "lastModified": "2025-08-15T05:01:44.147Z",
        "contentHash": "b175a16b359d7dbe59c884bec6a66d8a",
        "content": "# sQuid Identity API - Troubleshooting Guide\n\nThis guide helps resolve common issues with squid.\n\n## Common Issues\n\n### Module Won't Start\n\n**Symptoms:**\n- Module exits immediately\n- Port binding errors\n- Dependency connection failures\n\n**Solutions:**\n\n1. **Check port availability:**\n   ```bash\n   lsof -i :3000\n   # Kill process if needed\n   kill -9 <PID>\n   ```\n\n2. **Verify environment variables:**\n   ```bash\n   env | grep squid\n   ```\n\n3. **Check dependency services:**\n   ```bash\n   # Test service connectivity\n   curl http://localhost:3010/health  # sQuid\n   curl http://localhost:3020/health  # Qlock\n   ```\n\n### Authentication Failures\n\n**Symptoms:**\n- 401 Unauthorized responses\n- Invalid token errors\n- sQuid verification failures\n\n**Solutions:**\n\n1. **Verify sQuid ID format:**\n   ```bash\n   # Valid format: squid_<base58-encoded-id>\n   echo \"squid_1A2B3C4D5E6F7G8H9I0J\"\n   ```\n\n2. **Check JWT token validity:**\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   const decoded =",
        "wordCount": 635,
        "category": "modules",
        "subcategory": "squid",
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/modules/squid/"
      }
    ],
    "whitepapers": [
      {
        "path": "AnarQ_Q_Whitepaper_EN.pdf",
        "fullPath": "docs/AnarQ_Q_Whitepaper_EN.pdf",
        "name": "AnarQ_Q_Whitepaper_EN.pdf",
        "size": 181402,
        "lastModified": "2025-08-24T19:56:54.966Z",
        "contentHash": "8df4390662e4a7ef414d9b208c26768c",
        "content": "[PDF FILE: AnarQ_Q_Whitepaper_EN.pdf]",
        "wordCount": 3,
        "category": "whitepapers",
        "subcategory": null,
        "completenessScore": 0.1,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/whitepapers/"
      },
      {
        "path": "anarq_whitepaper_en.pdf",
        "fullPath": "docs/anarq_whitepaper_en.pdf",
        "name": "anarq_whitepaper_en.pdf",
        "size": 481340,
        "lastModified": "2025-08-25T12:54:59.838Z",
        "contentHash": "cc23cb05b889398cf7a9822b361f758b",
        "content": "[PDF FILE: anarq_whitepaper_en.pdf]",
        "wordCount": 3,
        "category": "whitepapers",
        "subcategory": null,
        "completenessScore": 0.1,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/whitepapers/"
      }
    ],
    "technicalAnalyses": [
      {
        "path": "SANDBOX_IMPLEMENTATION_SUMMARY.md",
        "fullPath": "SANDBOX_IMPLEMENTATION_SUMMARY.md",
        "name": "SANDBOX_IMPLEMENTATION_SUMMARY.md",
        "size": 9484,
        "lastModified": "2025-08-05T19:36:43.898Z",
        "contentHash": "7201bc7759620e258e8b932674b7036a",
        "content": "# Sandbox Wallet Implementation Summary\n\n## Overview\n\nSuccessfully implemented task 17 \"Develop Sandbox and Testing Mode\" from the qwallet-identity-expansion specification. This implementation provides a comprehensive sandbox environment for safe wallet testing without real funds.\n\n## Components Implemented\n\n### 1. SandboxWalletService (`src/services/identity/SandboxWalletService.ts`)\n\n**Core Features:**\n- **Sandbox Mode Management**: Enable/disable/reset sandbox mode per identity\n- **Mock Data Management**: Mock balances, transactions, and wallet state\n- **Testing Scenarios**: Predefined and custom testing scenarios with automated events\n- **Simulation Controls**: Network delay, error simulation, simulated time\n- **Safe Transaction Simulation**: Validate and simulate transactions without real funds\n\n**Key Methods:**\n- `enableSandboxMode()` - Activate sandbox with custom configuration\n- `disableSandboxMode()` - Deactivate sandbox and clean up\n- `resetSandboxData()` - Reset mock data wh",
        "wordCount": 1130,
        "category": "technicalAnalyses",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/technical-analysis/"
      },
      {
        "path": "TASK_10_IMPLEMENTATION_SUMMARY.md",
        "fullPath": "TASK_10_IMPLEMENTATION_SUMMARY.md",
        "name": "TASK_10_IMPLEMENTATION_SUMMARY.md",
        "size": 11499,
        "lastModified": "2025-08-07T14:38:07.964Z",
        "contentHash": "5643db1b7496f03a38b8d325beea0a6a",
        "content": "# Task 10: Build Error Handling and Recovery System - Implementation Summary\n\n## Overview\n\nSuccessfully implemented a comprehensive error handling and recovery system for module registration operations as specified in task 10 of the qwallet-module-registration spec. This system provides robust error classification, retry mechanisms with exponential backoff, automated recovery strategies, detailed error reporting, and fallback registration modes.\n\n## Components Implemented\n\n### 1. Enhanced Error Class Hierarchy\n\n**File:** `src/types/qwallet-module-registration.ts`\n\n- **Enhanced ModuleRegistrationError**: Extended with severity levels, retry/recovery flags, suggested actions, and user-friendly messages\n- **Specialized Error Classes**: \n  - `NetworkError` - For network connectivity issues\n  - `ServiceUnavailableError` - For service downtime scenarios\n  - `DependencyError` - For missing dependency issues\n  - `SignatureVerificationError` - For signature validation failures\n  - `ModuleValida",
        "wordCount": 1361,
        "category": "technicalAnalyses",
        "subcategory": null,
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/technical-analysis/"
      },
      {
        "path": "TASK_17_IMPLEMENTATION_SUMMARY.md",
        "fullPath": "TASK_17_IMPLEMENTATION_SUMMARY.md",
        "name": "TASK_17_IMPLEMENTATION_SUMMARY.md",
        "size": 10274,
        "lastModified": "2025-08-08T16:43:52.055Z",
        "contentHash": "00ee6f3c75c5b2b4c80a715490a30412",
        "content": "# Task 17: Module Dependency Management Implementation Summary\n\n## Overview\nSuccessfully implemented comprehensive module dependency management for the Qwallet module registration system. This implementation provides dependency resolution, circular dependency detection, version compatibility checking, update notifications, and automatic dependency installation management.\n\n## Components Implemented\n\n### 1. ModuleDependencyManager Service (`src/services/ModuleDependencyManager.ts`)\n\n**Core Features:**\n- **Dependency Resolution Algorithm**: Resolves module dependencies with support for partial resolution, test mode inclusion, and configurable depth limits\n- **Circular Dependency Detection**: Uses depth-first search to detect circular dependencies with configurable maximum depth\n- **Version Compatibility Checking**: Implements semantic version compatibility with conflict detection\n- **Update Notification System**: Creates and manages dependency update notifications with compatibility impa",
        "wordCount": 1156,
        "category": "technicalAnalyses",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/technical-analysis/"
      },
      {
        "path": "TASK_22_MODULE_VERSIONING_IMPLEMENTATION_SUMMARY.md",
        "fullPath": "TASK_22_MODULE_VERSIONING_IMPLEMENTATION_SUMMARY.md",
        "name": "TASK_22_MODULE_VERSIONING_IMPLEMENTATION_SUMMARY.md",
        "size": 11945,
        "lastModified": "2025-08-08T19:29:32.878Z",
        "contentHash": "be0651f32d4bf535acd7be8dba8b93b1",
        "content": "# Task 22: Module Update and Versioning System Implementation Summary\n\n## Overview\n\nSuccessfully implemented a comprehensive Module Update and Versioning System for the Qwallet module registration infrastructure. This system provides semantic versioning support, update validation, compatibility checking, rollback functionality, update notifications, and changelog management.\n\n## Implementation Details\n\n### 1. Core Service: ModuleUpdateVersioningService\n\n**Location**: `src/services/ModuleUpdateVersioningService.ts`\n\n**Key Features**:\n- **Semantic Version Parsing**: Full support for semantic versioning (major.minor.patch-prerelease+build)\n- **Version Comparison**: Accurate comparison of semantic versions including prerelease and build metadata\n- **Update Type Detection**: Automatic detection of MAJOR, MINOR, PATCH, PRERELEASE, and BUILD updates\n- **Update Validation**: Comprehensive validation of module update requests\n- **Version Compatibility Checking**: Compatibility analysis between ",
        "wordCount": 1378,
        "category": "technicalAnalyses",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/technical-analysis/"
      },
      {
        "path": "TASK_37_IMPLEMENTATION_SUMMARY.md",
        "fullPath": "TASK_37_IMPLEMENTATION_SUMMARY.md",
        "name": "TASK_37_IMPLEMENTATION_SUMMARY.md",
        "size": 10136,
        "lastModified": "2025-08-15T05:03:03.484Z",
        "contentHash": "60101e6adda3fb1bb9a73f63be7719e6",
        "content": "# Task 37 Implementation Summary: Comprehensive Module Documentation\n\n## Overview\n\nSuccessfully implemented a comprehensive module documentation system that automatically generates complete documentation for all Q ecosystem modules, including API references, MCP tools, deployment guides, troubleshooting guides, and operational runbooks.\n\n## Implementation Details\n\n### 1. Core Documentation Generator (`scripts/generate-module-docs.mjs`)\n\n**Features:**\n- Automatic discovery of all modules in the `modules/` directory\n- Analysis of OpenAPI specifications, MCP configurations, and package.json files\n- Generation of standardized documentation structure for each module\n- Built-in templates for consistent documentation format\n\n**Generated Documentation per Module:**\n- `README.md` - Module overview with quick start and key features\n- `api-reference.md` - Complete HTTP API documentation with examples\n- `mcp-tools.md` - MCP tools documentation with usage examples\n- `deployment-guide.md` - Standalo",
        "wordCount": 1168,
        "category": "technicalAnalyses",
        "subcategory": null,
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/technical-analysis/"
      },
      {
        "path": "TASK_3_IMPLEMENTATION_SUMMARY.md",
        "fullPath": "TASK_3_IMPLEMENTATION_SUMMARY.md",
        "name": "TASK_3_IMPLEMENTATION_SUMMARY.md",
        "size": 6268,
        "lastModified": "2025-08-06T21:48:03.243Z",
        "contentHash": "0912e77c73011bc17cb7868501c769ef",
        "content": "# Task 3: Enhance IdentityQlockService for Module Signing - Implementation Summary\n\n## Overview\nSuccessfully implemented all sub-tasks for enhancing the IdentityQlockService with module signing functionality for the Qwallet module registration system.\n\n## Sub-tasks Completed\n\n### ✅ 1. Extend IdentityQlockService with signMetadata method for ROOT identity\n- **Implementation**: Added `signMetadata(metadata: QModuleMetadata, identityId: string): Promise<SignedModuleMetadata>` method\n- **Features**:\n  - Validates signer authority before signing\n  - Generates or retrieves module signing keys automatically\n  - Serializes metadata consistently for signing\n  - Creates complete SignedModuleMetadata object with signature, public key, and metadata\n- **Location**: `src/services/identity/IdentityQlockService.ts:625-665`\n\n### ✅ 2. Implement verifyMetadataSignature method for signature validation\n- **Implementation**: Added `verifyMetadataSignature(signedMetadata: SignedModuleMetadata): Promise<Modul",
        "wordCount": 707,
        "category": "technicalAnalyses",
        "subcategory": null,
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/technical-analysis/"
      },
      {
        "path": "TASK_4_IMPLEMENTATION_SUMMARY.md",
        "fullPath": "TASK_4_IMPLEMENTATION_SUMMARY.md",
        "name": "TASK_4_IMPLEMENTATION_SUMMARY.md",
        "size": 8858,
        "lastModified": "2025-08-09T11:38:17.452Z",
        "contentHash": "71f759c58326f66adeba03ecb7e01063",
        "content": "# Task 4 Implementation Summary: Centralized Event Bus and Schema Registry\n\n## Overview\n\nSuccessfully implemented a comprehensive centralized event bus and schema registry system for the Q ecosystem, following the requirements specified in task 4 of the ecosystem modular audit specification.\n\n## Implementation Components\n\n### 1. Common Schemas Package (`@anarq/common-schemas`)\n\n**Location**: `libs/anarq/common-schemas/`\n\n**Key Features**:\n- Standardized data models for Q ecosystem (IdentityRef, ConsentRef, LockSig, IndexRecord, AuditEvent, MaskProfile)\n- Event schema definitions with versioning support\n- Event envelope structure for standardized event wrapping\n- Schema migration framework for evolution management\n- JSON Schema validation utilities\n\n**Core Models**:\n```typescript\ninterface IdentityRef {\n  squidId: string;\n  subId?: string;\n  daoId?: string;\n}\n\ninterface EventEnvelope<T = any> {\n  id: string;\n  topic: string; // q.<module>.<action>.<version>\n  schemaVersion: string;\n  pa",
        "wordCount": 1066,
        "category": "technicalAnalyses",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/global/technical-analysis/"
      }
    ],
    "runbooks": [
      {
        "path": "production-deployment-runbook.md",
        "fullPath": "docs/production-deployment-runbook.md",
        "name": "production-deployment-runbook.md",
        "size": 12015,
        "lastModified": "2025-08-14T20:08:52.713Z",
        "contentHash": "410b079c2f5c1ed21d81cac63bf3a410",
        "content": "# Production Deployment Runbook\n\n## Overview\n\nThis runbook provides comprehensive procedures for deploying the Q ecosystem modules to production environments, including blue-green deployment automation, rollback procedures, and disaster recovery protocols.\n\n## Pre-Deployment Checklist\n\n### System Validation\n- [ ] All integration tests pass (run `npm run test:final-integration`)\n- [ ] Security audit completed with no critical vulnerabilities\n- [ ] Performance benchmarks meet SLO requirements (p99 < 200ms, 99.9% uptime)\n- [ ] All modules pass serverless readiness validation\n- [ ] Configuration management validated for target environment\n- [ ] Backup and disaster recovery procedures tested\n\n### Infrastructure Readiness\n- [ ] Production infrastructure provisioned and configured\n- [ ] Load balancers configured with health checks\n- [ ] SSL/TLS certificates installed and validated\n- [ ] Monitoring and alerting systems configured\n- [ ] Log aggregation systems ready\n- [ ] Database migrations co",
        "wordCount": 1445,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/README.md",
        "fullPath": "docs/runbooks/README.md",
        "name": "README.md",
        "size": 3807,
        "lastModified": "2025-08-15T04:58:59.402Z",
        "contentHash": "48be5d73dba056edf57a3aee995f0cfc",
        "content": "# Q Ecosystem Operational Runbooks\n\nThis directory contains operational runbooks for all Q ecosystem modules.\n\n## Emergency Procedures\n\n### System-Wide Outage\n1. **Assess Impact**: Check health endpoints for all modules\n2. **Identify Root Cause**: Review logs and metrics\n3. **Activate Incident Response**: Notify stakeholders\n4. **Implement Workarounds**: Enable maintenance mode\n5. **Apply Fix**: Deploy hotfix or rollback\n6. **Verify Recovery**: Test critical paths\n7. **Post-Incident Review**: Document lessons learned\n\n### Data Corruption\n1. **Stop Write Operations**: Prevent further damage\n2. **Assess Scope**: Identify affected data\n3. **Restore from Backup**: Use latest clean backup\n4. **Verify Integrity**: Run data validation checks\n5. **Resume Operations**: Gradually restore services\n6. **Monitor Closely**: Watch for recurring issues\n\n### Security Incident\n1. **Isolate Affected Systems**: Prevent spread\n2. **Preserve Evidence**: Capture logs and state\n3. **Assess Damage**: Determine",
        "wordCount": 478,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.4,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-dao.md",
        "fullPath": "docs/runbooks/runbook-dao.md",
        "name": "runbook-dao.md",
        "size": 3549,
        "lastModified": "2025-08-15T04:58:59.405Z",
        "contentHash": "c65a61970f1ac8991e985b71fa3c80eb",
        "content": "# dao Operational Runbook\n\n## Module Overview\n\n**Name**: dao\n**Description**: Decentralized Autonomous Organization governance module for the Q ecosystem\n**Version**: 1.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/dao\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep DAO`\n3. Check dep",
        "wordCount": 500,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qchat.md",
        "fullPath": "docs/runbooks/runbook-qchat.md",
        "name": "runbook-qchat.md",
        "size": 3625,
        "lastModified": "2025-08-15T04:58:59.416Z",
        "contentHash": "c9436264e62c4da97bde147c32c3b008",
        "content": "# qchat Operational Runbook\n\n## Module Overview\n\n**Name**: qchat\n**Description**: Instant Messaging Module for AnarQ&Q Ecosystem\n**Version**: 1.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qchat\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep QCHAT`\n3. Check dependencies: `curl http",
        "wordCount": 503,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qdrive.md",
        "fullPath": "docs/runbooks/runbook-qdrive.md",
        "name": "runbook-qdrive.md",
        "size": 3654,
        "lastModified": "2025-08-15T04:58:59.421Z",
        "contentHash": "a37d809e5ef064e463ff3f1bd37df2b9",
        "content": "# qdrive Operational Runbook\n\n## Module Overview\n\n**Name**: qdrive\n**Description**: Decentralized file storage with IPFS integration and encryption\n**Version**: 1.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qdrive\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep QDRIVE`\n3. Check dep",
        "wordCount": 510,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qerberos.md",
        "fullPath": "docs/runbooks/runbook-qerberos.md",
        "name": "runbook-qerberos.md",
        "size": 3737,
        "lastModified": "2025-08-15T04:58:59.422Z",
        "contentHash": "a08f147c222060d4e459a9c7ec0d247b",
        "content": "# qerberos Operational Runbook\n\n## Module Overview\n\n**Name**: qerberos\n**Description**: Qerberos provides security monitoring, audit logging, anomaly detection, and risk scoring\nfor the Q ecosystem. It offers immutable audit trails, ML-based threat detection,\nand automated compliance reporting.\n\n**Version**: 1.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qerberos\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n##",
        "wordCount": 518,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qindex.md",
        "fullPath": "docs/runbooks/runbook-qindex.md",
        "name": "runbook-qindex.md",
        "size": 3549,
        "lastModified": "2025-08-15T04:58:59.425Z",
        "contentHash": "072612772602c2330451bbce32c0f05e",
        "content": "# qindex Operational Runbook\n\n## Module Overview\n\n**Name**: qindex\n**Description**: Indexing & Pointers Module for Q Ecosystem\n**Version**: 1.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qindex\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep QINDEX`\n3. Check dependencies: `curl http",
        "wordCount": 498,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qlock.md",
        "fullPath": "docs/runbooks/runbook-qlock.md",
        "name": "runbook-qlock.md",
        "size": 3550,
        "lastModified": "2025-08-15T04:58:59.425Z",
        "contentHash": "c7c205cdf8752e2a2af9e7c12fc7093a",
        "content": "# qlock Operational Runbook\n\n## Module Overview\n\n**Name**: qlock\n**Description**: Qlock - Encryption & Signatures Module for Q Ecosystem\n**Version**: 1.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qlock\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep QLOCK`\n3. Check dependencies: `c",
        "wordCount": 500,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qmail.md",
        "fullPath": "docs/runbooks/runbook-qmail.md",
        "name": "runbook-qmail.md",
        "size": 3627,
        "lastModified": "2025-08-15T04:58:59.426Z",
        "contentHash": "a648c6315434b4f77654611cc5c469e3",
        "content": "# qmail Operational Runbook\n\n## Module Overview\n\n**Name**: qmail\n**Description**: Certified Messaging Module for AnarQ&Q Ecosystem\n**Version**: 1.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qmail\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep QMAIL`\n3. Check dependencies: `curl ht",
        "wordCount": 503,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qmarket.md",
        "fullPath": "docs/runbooks/runbook-qmarket.md",
        "name": "runbook-qmarket.md",
        "size": 3566,
        "lastModified": "2025-08-15T04:58:59.427Z",
        "contentHash": "40ed96547510151f2d7f0a5d4a497a40",
        "content": "# qmarket Operational Runbook\n\n## Module Overview\n\n**Name**: qmarket\n**Description**: Content Marketplace Module for AnarQ&Q Ecosystem\n**Version**: 1.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qmarket\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep QMARKET`\n3. Check dependencies: ",
        "wordCount": 497,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qmask.md",
        "fullPath": "docs/runbooks/runbook-qmask.md",
        "name": "runbook-qmask.md",
        "size": 3542,
        "lastModified": "2025-08-15T04:58:59.429Z",
        "contentHash": "fefcc6cb2b18b6e65784dc40ab2df2e7",
        "content": "# qmask Operational Runbook\n\n## Module Overview\n\n**Name**: qmask\n**Description**: Privacy & Anonymization module for Q ecosystem\n**Version**: 2.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"2.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qmask\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep QMASK`\n3. Check dependencies: `curl http",
        "wordCount": 498,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qnet.md",
        "fullPath": "docs/runbooks/runbook-qnet.md",
        "name": "runbook-qnet.md",
        "size": 3536,
        "lastModified": "2025-08-15T04:58:59.429Z",
        "contentHash": "cd77e466a45e4292979140dc56b55b3d",
        "content": "# qnet Operational Runbook\n\n## Module Overview\n\n**Name**: qnet\n**Description**: Network infrastructure services for the Q ecosystem\n**Version**: 1.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qnet\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep QNET`\n3. Check dependencies: `curl htt",
        "wordCount": 498,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qonsent.md",
        "fullPath": "docs/runbooks/runbook-qonsent.md",
        "name": "runbook-qonsent.md",
        "size": 3587,
        "lastModified": "2025-08-15T04:58:59.430Z",
        "contentHash": "17d02805448a69fa252f72a90dddb858",
        "content": "# qonsent Operational Runbook\n\n## Module Overview\n\n**Name**: qonsent\n**Description**: Policies & Permissions module for Q ecosystem with UCAN policy engine\n**Version**: 2.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"2.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qonsent\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep QONSENT`\n3.",
        "wordCount": 502,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qpic.md",
        "fullPath": "docs/runbooks/runbook-qpic.md",
        "name": "runbook-qpic.md",
        "size": 3668,
        "lastModified": "2025-08-15T04:58:59.430Z",
        "contentHash": "df04fbd28491d58b48f3a8c88f9dd0f7",
        "content": "# qpic Operational Runbook\n\n## Module Overview\n\n**Name**: qpic\n**Description**: Media Management module for Q ecosystem with transcoding, optimization, and marketplace integration\n**Version**: 2.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"2.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qpic\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `e",
        "wordCount": 514,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-qwallet.md",
        "fullPath": "docs/runbooks/runbook-qwallet.md",
        "name": "runbook-qwallet.md",
        "size": 3640,
        "lastModified": "2025-08-15T04:58:59.430Z",
        "contentHash": "c58f0878f8c1bba299c531f86b40b265",
        "content": "# qwallet Operational Runbook\n\n## Module Overview\n\n**Name**: qwallet\n**Description**: Payments & Fees Module for AnarQ&Q Ecosystem\n**Version**: 1.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/qwallet\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep QWALLET`\n3. Check dependencies: `cur",
        "wordCount": 505,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      },
      {
        "path": "runbooks/runbook-squid.md",
        "fullPath": "docs/runbooks/runbook-squid.md",
        "name": "runbook-squid.md",
        "size": 3547,
        "lastModified": "2025-08-15T04:58:59.430Z",
        "contentHash": "03ea2af29440a74dae8bd7513212df54",
        "content": "# squid Operational Runbook\n\n## Module Overview\n\n**Name**: squid\n**Description**: Identity & Subidentities management for Q ecosystem\n**Version**: 1.0.0\n\n## Health Checks\n\n### Endpoints\n- **Basic Health**: `GET /health`\n- **Detailed Health**: `GET /health/detailed`\n- **Metrics**: `GET /metrics`\n\n### Expected Responses\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"squid\": { \"status\": \"up\", \"latency\": 50 },\n    \"qonsent\": { \"status\": \"up\", \"latency\": 30 }\n  }\n}\n```\n\n## Service Management\n\n### Start Service\n```bash\ncd modules/squid\nnpm start\n# or\ndocker-compose up -d\n```\n\n### Stop Service\n```bash\n# Graceful shutdown\nnpm run stop\n# or\ndocker-compose down\n```\n\n### Restart Service\n```bash\n# Rolling restart\nnpm run restart\n# or\ndocker-compose restart\n```\n\n## Troubleshooting\n\n### Service Won't Start\n1. Check port availability: `lsof -i :3000`\n2. Verify environment variables: `env | grep SQUID`\n3. Check dependencies: `curl",
        "wordCount": 498,
        "category": "runbooks",
        "subcategory": null,
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/runbooks/"
      }
    ],
    "api": [
      {
        "path": "API-CHANGES.md",
        "fullPath": "docs/API-CHANGES.md",
        "name": "API-CHANGES.md",
        "size": 17771,
        "lastModified": "2025-08-02T12:36:42.221Z",
        "contentHash": "27ab090c4ed8224d59fa75b5bd86d9f3",
        "content": "# API Changes for DAO Dashboard Enhancement\n\n## Overview\n\nThis document outlines the API changes and new endpoints required to support the enhanced DAO dashboard components. These changes extend the existing DAO and wallet services to provide comprehensive governance and economic data.\n\n## New API Endpoints\n\n### DAO Service Enhancements\n\n#### Enhanced DAO Information\n\n**Endpoint**: `GET /api/dao/:daoId`\n\n**Enhanced Response**:\n```typescript\ninterface EnhancedDAO extends DetailedDAO {\n  tokenInfo?: {\n    name: string;\n    symbol: string;\n    totalSupply: number;\n    circulatingSupply: number;\n    holderCount: number;\n    contractAddress: string;\n    type: 'user-based' | 'token-weighted' | 'nft-weighted';\n    decimals?: number;\n    network?: string;\n  };\n  economicMetrics?: {\n    totalValueLocked: number;\n    averageHolding: number;\n    distributionIndex: number; // Gini coefficient for token distribution\n  };\n  governanceRules?: {\n    votingMechanism: 'user-based' | 'token-weighted' | '",
        "wordCount": 1840,
        "category": "api",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/api/"
      },
      {
        "path": "api/module-registry/README.md",
        "fullPath": "docs/api/module-registry/README.md",
        "name": "README.md",
        "size": 5387,
        "lastModified": "2025-08-09T07:54:42.801Z",
        "contentHash": "1c47515e8bce5047eadc293f85356a9a",
        "content": "# Module Registry API Documentation\n\nWelcome to the comprehensive API documentation for the Qwallet Module Registration system. This documentation provides detailed information about all registration endpoints, usage examples, integration guides, and best practices for developers.\n\n## 📚 Documentation Structure\n\n### Core API Reference\n- [**Registration API**](./registration-api.md) - Core module registration endpoints\n- [**Discovery API**](./discovery-api.md) - Module search and discovery endpoints  \n- [**Verification API**](./verification-api.md) - Module verification and validation endpoints\n- [**Management API**](./management-api.md) - Module lifecycle management endpoints\n\n### Integration Guides\n- [**Getting Started**](./getting-started.md) - Quick start guide for new developers\n- [**Authentication**](./authentication.md) - Identity and authentication requirements\n- [**SDK Integration**](./sdk-integration.md) - Using the JavaScript/TypeScript SDK\n- [**CLI Tools**](./cli-tools.md) -",
        "wordCount": 618,
        "category": "api",
        "subcategory": null,
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/api/"
      },
      {
        "path": "api/module-registry/api-explorer.html",
        "fullPath": "docs/api/module-registry/api-explorer.html",
        "name": "api-explorer.html",
        "size": 39885,
        "lastModified": "2025-08-09T08:02:10.003Z",
        "contentHash": "1c5f3ebf0b07ff123c770ee8564e249d",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Module Registry API Explorer</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            background: #f5f7fa;\n            color: #2d3748;\n            line-height: 1.6;\n        }\n\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n\n        .header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 2rem;\n            border-radius: 12px;\n            margin-bottom: 2rem;\n            text-align: center;\n        }\n\n        .header h1 {\n            font-size: 2.5rem;\n            margin-bottom: 0.5rem;\n        }\n\n        .hea",
        "wordCount": 2164,
        "category": "api",
        "subcategory": null,
        "completenessScore": 0.4,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/api/"
      },
      {
        "path": "api/module-registry/discovery-api.md",
        "fullPath": "docs/api/module-registry/discovery-api.md",
        "name": "discovery-api.md",
        "size": 17975,
        "lastModified": "2025-08-09T07:57:37.378Z",
        "contentHash": "16347e6cdf8fa26dbe6642aa7e684747",
        "content": "# Discovery API Reference\n\nThe Discovery API provides powerful search and discovery capabilities for finding modules in the Q ecosystem.\n\n## Endpoints\n\n### List Modules\n\nGet a paginated list of all registered modules with optional filtering.\n\n**Endpoint:** `GET /api/modules`\n\n**Authentication:** Optional (public endpoint with rate limiting)\n\n**Query Parameters:**\n- `limit` (number, optional): Maximum results per page (default: 50, max: 100)\n- `offset` (number, optional): Pagination offset (default: 0)\n- `status` (string, optional): Filter by module status (`DEVELOPMENT`, `TESTING`, `PRODUCTION_READY`, `DEPRECATED`, `SUSPENDED`)\n- `identityType` (string, optional): Filter by supported identity type\n- `integration` (string, optional): Filter by ecosystem integration\n- `includeTestMode` (boolean, optional): Include sandbox modules (default: false)\n- `sortBy` (string, optional): Sort field (`name`, `version`, `registeredAt`, `queryCount`, `relevance`)\n- `sortOrder` (string, optional): Sort",
        "wordCount": 1779,
        "category": "api",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/api/"
      },
      {
        "path": "api/module-registry/examples/README.md",
        "fullPath": "docs/api/module-registry/examples/README.md",
        "name": "README.md",
        "size": 6435,
        "lastModified": "2025-08-09T08:05:31.218Z",
        "contentHash": "9985ad16d3fc12f4e5dd002c36de14f0",
        "content": "# Code Examples\n\nThis directory contains practical code examples for using the Module Registry API in various scenarios and programming languages.\n\n## 📁 Directory Structure\n\n### Basic Examples\n- [`basic-registration.js`](./basic-registration.js) - Simple module registration\n- [`module-discovery.js`](./module-discovery.js) - Finding and searching modules\n- [`module-verification.js`](./module-verification.js) - Verifying module status\n\n### Advanced Examples\n- [`batch-operations.js`](./batch-operations.js) - Registering multiple modules\n- [`error-handling.js`](./error-handling.js) - Comprehensive error handling\n- [`dependency-management.js`](./dependency-management.js) - Managing module dependencies\n\n### React Examples\n- [`react-registration-form.tsx`](./react-registration-form.tsx) - Registration form component\n- [`react-module-browser.tsx`](./react-module-browser.tsx) - Module discovery interface\n- [`react-hooks-examples.tsx`](./react-hooks-examples.tsx) - Using React hooks\n\n### CLI Ex",
        "wordCount": 730,
        "category": "api",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/api/"
      },
      {
        "path": "api/module-registry/faq.md",
        "fullPath": "docs/api/module-registry/faq.md",
        "name": "faq.md",
        "size": 11358,
        "lastModified": "2025-08-09T08:04:49.430Z",
        "contentHash": "3d9e2044a43ea1df56f5197ad6a0720f",
        "content": "# Frequently Asked Questions (FAQ)\n\n## General Questions\n\n### What is the Module Registry API?\n\nThe Module Registry API is a comprehensive system for registering, discovering, and managing modules in the Q ecosystem. It provides secure, auditable module registration with cryptographic signatures, dependency management, and compliance tracking.\n\n### Who can register modules?\n\nModule registration requires specific identity types:\n- **ROOT Identity**: Can register any module\n- **DAO Identity**: Can register DAO-specific modules\n- **ENTERPRISE Identity**: Can register enterprise modules\n\nIndividual identities cannot register modules but can discover and use them.\n\n### What's the difference between production and sandbox mode?\n\n- **Production Mode**: Modules are publicly available and discoverable by all ecosystem participants\n- **Sandbox Mode**: Modules are only visible to development identities and can be used for testing before production deployment\n\n### How much does it cost to register",
        "wordCount": 1483,
        "category": "api",
        "subcategory": null,
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/api/"
      },
      {
        "path": "api/module-registry/getting-started.md",
        "fullPath": "docs/api/module-registry/getting-started.md",
        "name": "getting-started.md",
        "size": 15939,
        "lastModified": "2025-08-09T07:59:12.266Z",
        "contentHash": "07325d23b6dadbabf76706193b69b6bb",
        "content": "# Getting Started with Module Registry API\n\nThis guide will help you get up and running with the Qwallet Module Registry API quickly and efficiently.\n\n## Prerequisites\n\nBefore you begin, ensure you have:\n\n1. **Node.js 18+** or compatible JavaScript runtime\n2. **Valid Identity Credentials** (ROOT, DAO, or ENTERPRISE)\n3. **Access to Q Ecosystem Services** (Qindex, Qlock, Qerberos)\n4. **Git Repository** for your module (GitHub, GitLab, etc.)\n\n## Quick Setup\n\n### 1. Install Dependencies\n\n```bash\n# Using npm\nnpm install @qwallet/module-registry @qwallet/hooks\n\n# Using yarn\nyarn add @qwallet/module-registry @qwallet/hooks\n\n# Using pnpm\npnpm add @qwallet/module-registry @qwallet/hooks\n```\n\n### 2. Environment Configuration\n\nCreate a `.env` file in your project root:\n\n```env\n# API Configuration\nQWALLET_API_ENDPOINT=https://api.qwallet.example.com\nQWALLET_API_VERSION=v1\n\n# Identity Configuration\nQWALLET_IDENTITY_DID=did:root:your-identity-here\nQWALLET_IDENTITY_PRIVATE_KEY=your-private-key-here\n\n",
        "wordCount": 1460,
        "category": "api",
        "subcategory": null,
        "completenessScore": 0.9999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/api/"
      },
      {
        "path": "api/module-registry/registration-api.md",
        "fullPath": "docs/api/module-registry/registration-api.md",
        "name": "registration-api.md",
        "size": 12024,
        "lastModified": "2025-08-09T07:55:57.752Z",
        "contentHash": "4ef617ba86faea5bddbcb7450a9506b4",
        "content": "# Registration API Reference\n\nThe Registration API provides endpoints for registering, updating, and deregistering modules in the Q ecosystem.\n\n## Endpoints\n\n### Register Module\n\nRegister a new module in the ecosystem.\n\n**Endpoint:** `POST /api/modules/register`\n\n**Authentication:** Required (ROOT, DAO, or ENTERPRISE identity)\n\n**Request Body:**\n```typescript\n{\n  moduleInfo: {\n    name: string;                    // Module name (3-50 characters)\n    version: string;                 // Semantic version (e.g., \"1.0.0\")\n    description: string;             // Description (10-500 characters)\n    identitiesSupported: IdentityType[];  // Supported identity types\n    integrations: string[];          // Ecosystem service integrations\n    repositoryUrl: string;           // Git repository URL\n    documentationCid?: string;       // IPFS CID for documentation\n    auditHash?: string;              // SHA256 audit hash\n    compliance?: {                   // Compliance information\n      audit?: boo",
        "wordCount": 1268,
        "category": "api",
        "subcategory": null,
        "completenessScore": 0.8999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/api/"
      },
      {
        "path": "api/module-registry/troubleshooting.md",
        "fullPath": "docs/api/module-registry/troubleshooting.md",
        "name": "troubleshooting.md",
        "size": 14724,
        "lastModified": "2025-08-09T08:03:36.301Z",
        "contentHash": "dd428961c55d5bbc4dde9e6f2186f044",
        "content": "# Troubleshooting Guide\n\nThis guide helps you diagnose and resolve common issues when working with the Module Registry API.\n\n## Common Issues and Solutions\n\n### 1. Registration Failures\n\n#### \"Module already exists\" Error\n\n**Problem:** Attempting to register a module with a name and version that already exists.\n\n**Error Message:**\n```json\n{\n  \"success\": false,\n  \"error\": \"Module already registered: my-module\",\n  \"code\": \"MODULE_ALREADY_EXISTS\",\n  \"moduleId\": \"my-module\"\n}\n```\n\n**Solutions:**\n1. **Increment the version number:**\n   ```bash\n   # Instead of 1.0.0, use 1.0.1 or 1.1.0\n   qwallet-module-cli register --name \"my-module\" --version \"1.0.1\"\n   ```\n\n2. **Use a different module name:**\n   ```bash\n   qwallet-module-cli register --name \"my-module-v2\" --version \"1.0.0\"\n   ```\n\n3. **Check existing modules first:**\n   ```bash\n   qwallet-module-cli search --name \"my-module\"\n   ```\n\n#### \"Invalid metadata\" Error\n\n**Problem:** Module metadata doesn't meet validation requirements.\n\n**Error ",
        "wordCount": 1627,
        "category": "api",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/api/"
      }
    ],
    "deployment": [
      {
        "path": "DEPLOYMENT.md",
        "fullPath": "docs/DEPLOYMENT.md",
        "name": "DEPLOYMENT.md",
        "size": 18576,
        "lastModified": "2025-08-02T12:35:01.848Z",
        "contentHash": "6b875a5e62658cf9b3fd5c859ed50af3",
        "content": "# Deployment Guide for DAO Dashboard Enhancement\n\n## Overview\n\nThis guide provides comprehensive instructions for deploying the enhanced DAO dashboard components to production environments. It covers configuration, build optimization, monitoring setup, and troubleshooting procedures.\n\n## Prerequisites\n\n### System Requirements\n\n- **Node.js**: 18.0.0 or higher\n- **npm**: 9.0.0 or higher\n- **Memory**: Minimum 4GB RAM for build process\n- **Storage**: Minimum 10GB available space\n- **Network**: Stable internet connection for dependency installation\n\n### Environment Setup\n\n```bash\n# Verify Node.js version\nnode --version  # Should be 18.0.0+\n\n# Verify npm version\nnpm --version   # Should be 9.0.0+\n\n# Install global dependencies\nnpm install -g pm2  # For production process management\n```\n\n## Configuration\n\n### Environment Variables\n\nCreate environment-specific configuration files:\n\n#### Production Environment (`.env.production`)\n\n```env\n# Application Configuration\nVITE_APP_NAME=AnarQ Nexus Cor",
        "wordCount": 1909,
        "category": "deployment",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/deployment/"
      },
      {
        "path": "deployment/deployment-matrix.md",
        "fullPath": "docs/deployment/deployment-matrix.md",
        "name": "deployment-matrix.md",
        "size": 36821,
        "lastModified": "2025-08-15T04:58:59.444Z",
        "contentHash": "6ac5f8b374e63be07d031cabfe92f417",
        "content": "# Q Ecosystem Deployment Matrix\n\nThis document provides deployment configurations for all Q ecosystem modules across different environments.\n\n## Environment Overview\n\n| Environment | Purpose | Modules | Configuration |\n|-------------|---------|---------|---------------|\n| **Development** | Local development | All modules with mocks | Standalone mode |\n| **Staging** | Integration testing | All modules with real services | Hybrid mode |\n| **Production** | Live system | All modules with full integration | Integrated mode |\n\n## Module Deployment Status\n\n| Module | Development | Staging | Production | Docker | K8s | Serverless |\n|--------|-------------|---------|------------|--------|-----|------------|\n| dao | ✅ | ✅ | ✅ | ✅ | ❌ | ✅ |\n| qchat | ✅ | ✅ | ✅ | ✅ | ❌ | ✅ |\n| qdrive | ✅ | ✅ | ✅ | ✅ | ❌ | ✅ |\n| qerberos | ✅ | ✅ | ✅ | ✅ | ❌ | ✅ |\n| qindex | ✅ | ✅ | ✅ | ✅ | ❌ | ✅ |\n| qlock | ✅ | ✅ | ✅ | ✅ | ❌ | ✅ |\n| qmail | ✅ | ✅ | ✅ | ✅ | ❌ | ✅ |\n| qmarket | ✅ | ✅ | ✅ | ✅ | ❌ | ✅ |\n| qmask | ✅ | ✅",
        "wordCount": 3477,
        "category": "deployment",
        "subcategory": null,
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/deployment/"
      }
    ],
    "migration": [
      {
        "path": "migration/deprecation-plan.md",
        "fullPath": "docs/migration/deprecation-plan.md",
        "name": "deprecation-plan.md",
        "size": 13029,
        "lastModified": "2025-08-15T05:10:15.520Z",
        "contentHash": "8d5535c35b365a91d9fce59b23e9b1bb",
        "content": "# Q Ecosystem Legacy System Deprecation Plan\n\n## Executive Summary\n\nThis document outlines the phased deprecation plan for legacy Q ecosystem components as part of the transition to the new modular architecture. The plan ensures minimal disruption to users and stakeholders while providing clear timelines and migration paths.\n\n## Deprecation Timeline\n\n### Phase 1: Foundation Services (Months 1-3)\n\n#### Month 1: Assessment and Preparation\n- **Week 1-2**: Complete dependency analysis and impact assessment\n- **Week 3-4**: Deploy new modules in compatibility mode alongside legacy systems\n\n#### Month 2: Gradual Migration\n- **Week 1**: Begin sQuid (Identity) migration with 10% traffic\n- **Week 2**: Increase sQuid traffic to 50%\n- **Week 3**: Begin Qlock (Encryption) migration\n- **Week 4**: Complete sQuid migration (100% traffic)\n\n#### Month 3: Core Services\n- **Week 1**: Begin Qonsent (Permissions) migration\n- **Week 2**: Begin Qindex (Indexing) migration\n- **Week 3**: Complete Qlock and Qons",
        "wordCount": 1759,
        "category": "migration",
        "subcategory": null,
        "completenessScore": 0.5,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/migration/"
      },
      {
        "path": "migration/legacy-to-modular-migration-guide.md",
        "fullPath": "docs/migration/legacy-to-modular-migration-guide.md",
        "name": "legacy-to-modular-migration-guide.md",
        "size": 15130,
        "lastModified": "2025-08-15T05:06:49.158Z",
        "contentHash": "74ae37f38f0efaff74d82cb15702acae",
        "content": "# Legacy to Modular Architecture Migration Guide\n\n## Overview\n\nThis guide provides comprehensive instructions for migrating from the legacy Q ecosystem architecture to the new modular, serverless-ready architecture. The migration is designed to be gradual, allowing for zero-downtime transitions while maintaining backward compatibility.\n\n## Migration Strategy\n\n### Phase-Based Approach\n\nThe migration follows a structured phase-based approach:\n\n1. **Assessment Phase**: Evaluate current dependencies and usage patterns\n2. **Preparation Phase**: Set up modular infrastructure alongside legacy systems\n3. **Migration Phase**: Gradual transition of services and data\n4. **Validation Phase**: Verify functionality and performance\n5. **Cleanup Phase**: Deprecate and remove legacy components\n\n### Migration Principles\n\n- **Zero Downtime**: All migrations must maintain service availability\n- **Backward Compatibility**: Legacy integrations continue to work during transition\n- **Gradual Transition**: Ser",
        "wordCount": 1811,
        "category": "migration",
        "subcategory": null,
        "completenessScore": 0.7,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/migration/"
      },
      {
        "path": "migration/lessons-learned.md",
        "fullPath": "docs/migration/lessons-learned.md",
        "name": "lessons-learned.md",
        "size": 12620,
        "lastModified": "2025-08-15T05:13:36.476Z",
        "contentHash": "fb6b1f9ccffeccbf6501e74ef7603a1f",
        "content": "# Q Ecosystem Migration: Lessons Learned and Best Practices\n\n## Executive Summary\n\nThis document captures the key lessons learned during the Q ecosystem migration from legacy monolithic architecture to modular, serverless-ready components. These insights will guide future architectural decisions and migration projects.\n\n## Migration Overview\n\n### Project Scope\n- **Duration**: 12 months (planned) vs 14 months (actual)\n- **Modules Migrated**: 14 core modules\n- **Data Migrated**: 2.3TB across all modules\n- **API Endpoints**: 127 legacy endpoints → 89 modular endpoints\n- **Integration Points**: 45 external integrations updated\n\n### Success Metrics Achieved\n- **Data Integrity**: 99.97% (target: 99.9%)\n- **System Availability**: 99.94% during migration (target: 99.9%)\n- **Performance Improvement**: 34% average response time improvement\n- **Cost Reduction**: 28% operational cost reduction\n- **Developer Velocity**: 42% improvement in feature delivery\n\n## Key Lessons Learned\n\n### 1. Planning an",
        "wordCount": 1652,
        "category": "migration",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/migration/"
      },
      {
        "path": "migration/migration-dashboard.html",
        "fullPath": "docs/migration/migration-dashboard.html",
        "name": "migration-dashboard.html",
        "size": 19896,
        "lastModified": "2025-08-15T05:16:55.568Z",
        "contentHash": "05f7a5a2ccfba4cc2c2ddea2dd542faa",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Q Ecosystem Migration Dashboard</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            background-color: #f5f7fa;\n            color: #333;\n            line-height: 1.6;\n        }\n\n        .header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 2rem 0;\n            text-align: center;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n\n        .header h1 {\n            font-size: 2.5rem;\n            margin-bottom: 0.5rem;\n        }\n\n        .header p {\n            font-size: 1.1rem;\n            opacity",
        "wordCount": 1364,
        "category": "migration",
        "subcategory": null,
        "completenessScore": 0.4,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/migration/"
      },
      {
        "path": "migration/module-specific/qwallet-migration-guide.md",
        "fullPath": "docs/migration/module-specific/qwallet-migration-guide.md",
        "name": "qwallet-migration-guide.md",
        "size": 2317,
        "lastModified": "2025-08-15T05:07:33.115Z",
        "contentHash": "82925c9fecb9ebaffa1c838469278948",
        "content": "# Qwallet Payment Module Migration Guide\n\n## Overview\n\nThis guide covers the migration from legacy payment processing to the new Qwallet module with multi-chain support, payment intents, and Pi Wallet integration.\n\n## Pre-Migration Assessment\n\n### Current Payment System Analysis\n\n```bash\n# Analyze payment transactions\nnpm run qwallet:analyze-transactions\n\n# Check wallet configurations\nnpm run qwallet:check-wallets\n\n# Validate payment history\nnpm run qwallet:validate-payment-history\n```\n\n### Critical Considerations\n\n- **Active Transactions**: Ensure no payments are lost during migration\n- **Wallet Balances**: Maintain accurate balance tracking\n- **Fee Calculations**: Preserve fee calculation logic\n- **Multi-chain Support**: Add support for additional blockchains\n\n## Migration Steps\n\n### Step 1: Deploy Qwallet Module\n\n```bash\n# Deploy Qwallet with Pi Wallet integration\ncd modules/qwallet\ndocker-compose up -d\n\n# Configure Pi Wallet connection\nnpm run qwallet:configure-pi-wallet\n\n# Verify ",
        "wordCount": 283,
        "category": "migration",
        "subcategory": null,
        "completenessScore": 0.6,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/migration/"
      },
      {
        "path": "migration/module-specific/squid-migration-guide.md",
        "fullPath": "docs/migration/module-specific/squid-migration-guide.md",
        "name": "squid-migration-guide.md",
        "size": 2241,
        "lastModified": "2025-08-15T05:07:12.876Z",
        "contentHash": "8fcf32afa3a85ad980b974936aa749a2",
        "content": "# sQuid Identity Module Migration Guide\n\n## Overview\n\nThis guide covers the migration of the legacy identity service to the new sQuid module with standalone operation, HTTP API, and MCP tools support.\n\n## Pre-Migration Assessment\n\n### Current State Analysis\n\n```bash\n# Analyze current identity data\nnpm run squid:analyze-legacy-data\n\n# Check identity relationships\nnpm run squid:check-relationships\n\n# Validate data integrity\nnpm run squid:validate-legacy-integrity\n```\n\n### Dependencies Mapping\n\n- **Dependent Services**: All modules that verify identity\n- **Data Dependencies**: User profiles, subidentities, DAO memberships\n- **Integration Points**: Authentication middleware, API gateways\n\n## Migration Steps\n\n### Step 1: Deploy sQuid Module\n\n```bash\n# Deploy sQuid in compatibility mode\ncd modules/squid\ndocker-compose up -d\n\n# Verify deployment\ncurl http://localhost:3001/health\n```\n\n### Step 2: Data Migration\n\n```bash\n# Export legacy identity data\nnpm run squid:export-legacy --format=json\n\n#",
        "wordCount": 281,
        "category": "migration",
        "subcategory": null,
        "completenessScore": 0.7999999999999999,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/migration/"
      }
    ],
    "other": [
      {
        "path": "qwallet-identity-expansion/components/WalletDashboard.md",
        "fullPath": "docs/qwallet-identity-expansion/components/WalletDashboard.md",
        "name": "WalletDashboard.md",
        "size": 3567,
        "lastModified": "2025-08-06T17:37:18.461Z",
        "contentHash": "2fcb4f65c8b9759b2211111f8b2e8538",
        "content": "# WalletDashboard Component\n\nThe `WalletDashboard` is the main wallet interface component that provides an identity-aware view of wallet information, balances, and operations.\n\n## Props\n\n```typescript\ninterface WalletDashboardProps {\n  identityId: string;\n  compact?: boolean;\n  showPiWallet?: boolean;\n  showAuditStatus?: boolean;\n  className?: string;\n  onTransactionClick?: (transaction: Transaction) => void;\n  onTransferClick?: () => void;\n}\n```\n\n## Usage\n\n### Basic Usage\n\n```tsx\nimport { WalletDashboard } from '@/components/qwallet';\n\nfunction MyWalletPage() {\n  const { activeIdentity } = useIdentityManager();\n  \n  return (\n    <WalletDashboard \n      identityId={activeIdentity.id}\n      showPiWallet={true}\n      showAuditStatus={true}\n    />\n  );\n}\n```\n\n### Compact Mode\n\n```tsx\n<WalletDashboard \n  identityId={identityId}\n  compact={true}\n  className=\"max-w-md\"\n/>\n```\n\n### With Event Handlers\n\n```tsx\n<WalletDashboard \n  identityId={identityId}\n  onTransactionClick={(tx) => navigate(`",
        "wordCount": 408,
        "category": "other",
        "subcategory": null,
        "completenessScore": 0.5,
        "isDuplicate": false,
        "isObsolete": false,
        "targetLocation": "/docs/other/"
      }
    ]
  },
  "duplicates": [],
  "obsoleteFiles": [],
  "completenessScores": {
    "API-CHANGES.md": 0.7999999999999999,
    "AUTOMATION.md": 0.9999999999999999,
    "AnarQ_Q_Whitepaper_EN.pdf": 0.1,
    "DAO-DASHBOARD-ARCHITECTURE.md": 0.7,
    "DEPLOYMENT.md": 0.7999999999999999,
    "INDEX.md": 0.7999999999999999,
    "IPFS-INTEGRATION.md": 0.7,
    "PUBLIC-PORTAL-BLUEPRINT.md": 1,
    "QSOCIAL-COMPLETE-INTEGRATION.md": 0.7,
    "QSOCIAL-ECOSYSTEM-INTEGRATION.md": 0.7,
    "README.md": 0.7999999999999999,
    "STORJ-INTEGRATION.md": 0.8999999999999999,
    "anarq_whitepaper_en.pdf": 0.1,
    "api/module-registry/README.md": 0.7,
    "api/module-registry/api-explorer.html": 0.4,
    "api/module-registry/discovery-api.md": 0.7999999999999999,
    "api/module-registry/examples/README.md": 0.7999999999999999,
    "api/module-registry/faq.md": 0.6,
    "api/module-registry/getting-started.md": 0.9999999999999999,
    "api/module-registry/registration-api.md": 0.8999999999999999,
    "api/module-registry/troubleshooting.md": 0.7999999999999999,
    "deployment/deployment-matrix.md": 0.6,
    "disaster-recovery-procedures.md": 0.6,
    "integration/integration-matrix.md": 0.6,
    "ipfs-integration.md": 0.7,
    "migration/deprecation-plan.md": 0.5,
    "migration/legacy-to-modular-migration-guide.md": 0.7,
    "migration/lessons-learned.md": 0.7999999999999999,
    "migration/migration-dashboard.html": 0.4,
    "migration/module-specific/qwallet-migration-guide.md": 0.6,
    "migration/module-specific/squid-migration-guide.md": 0.7999999999999999,
    "modules/README.md": 0.5,
    "modules/dao/README.md": 0.7,
    "modules/dao/api-reference.md": 0.7999999999999999,
    "modules/dao/api.md": 0.7,
    "modules/dao/deployment-guide.md": 0.6,
    "modules/dao/deployment.md": 0.8999999999999999,
    "modules/dao/examples.md": 0.7999999999999999,
    "modules/dao/integration-guide.md": 0.9999999999999999,
    "modules/dao/mcp-tools.md": 0.7,
    "modules/dao/mcp.md": 0.7,
    "modules/dao/runbook.md": 0.7999999999999999,
    "modules/dao/troubleshooting.md": 0.7999999999999999,
    "modules/qchat/README.md": 0.7,
    "modules/qchat/api-reference.md": 0.8999999999999999,
    "modules/qchat/api.md": 0.7999999999999999,
    "modules/qchat/deployment-guide.md": 0.6,
    "modules/qchat/deployment.md": 0.8999999999999999,
    "modules/qchat/examples.md": 0.7999999999999999,
    "modules/qchat/integration-guide.md": 0.9999999999999999,
    "modules/qchat/mcp-tools.md": 0.7999999999999999,
    "modules/qchat/mcp.md": 0.7999999999999999,
    "modules/qchat/runbook.md": 0.8999999999999999,
    "modules/qchat/troubleshooting.md": 0.7999999999999999,
    "modules/qdrive/README.md": 0.7,
    "modules/qdrive/api-reference.md": 0.7999999999999999,
    "modules/qdrive/api.md": 0.7,
    "modules/qdrive/deployment-guide.md": 0.6,
    "modules/qdrive/deployment.md": 0.8999999999999999,
    "modules/qdrive/examples.md": 0.7999999999999999,
    "modules/qdrive/integration-guide.md": 0.9999999999999999,
    "modules/qdrive/mcp-tools.md": 0.6,
    "modules/qdrive/mcp.md": 0.7999999999999999,
    "modules/qdrive/runbook.md": 0.8999999999999999,
    "modules/qdrive/troubleshooting.md": 0.7999999999999999,
    "modules/qerberos/README.md": 0.7,
    "modules/qerberos/api-reference.md": 0.7999999999999999,
    "modules/qerberos/api.md": 0.7999999999999999,
    "modules/qerberos/deployment-guide.md": 0.6,
    "modules/qerberos/deployment.md": 0.8999999999999999,
    "modules/qerberos/examples.md": 0.7999999999999999,
    "modules/qerberos/integration-guide.md": 0.9999999999999999,
    "modules/qerberos/mcp-tools.md": 0.7,
    "modules/qerberos/mcp.md": 0.7999999999999999,
    "modules/qerberos/runbook.md": 0.8999999999999999,
    "modules/qerberos/troubleshooting.md": 0.7999999999999999,
    "modules/qindex/README.md": 0.7,
    "modules/qindex/api-reference.md": 0.7999999999999999,
    "modules/qindex/api.md": 0.7999999999999999,
    "modules/qindex/deployment-guide.md": 0.6,
    "modules/qindex/deployment.md": 0.8999999999999999,
    "modules/qindex/examples.md": 0.7999999999999999,
    "modules/qindex/integration-guide.md": 0.9999999999999999,
    "modules/qindex/mcp-tools.md": 0.7999999999999999,
    "modules/qindex/mcp.md": 0.6,
    "modules/qindex/runbook.md": 0.7999999999999999,
    "modules/qindex/troubleshooting.md": 0.7999999999999999,
    "modules/qlock/README.md": 0.7,
    "modules/qlock/api-reference.md": 0.7,
    "modules/qlock/deployment-guide.md": 0.6,
    "modules/qlock/deployment.md": 0.8999999999999999,
    "modules/qlock/examples.md": 0.7,
    "modules/qlock/integration-guide.md": 0.9999999999999999,
    "modules/qlock/mcp-tools.md": 0.7,
    "modules/qlock/mcp.md": 0.7,
    "modules/qlock/runbook.md": 0.7999999999999999,
    "modules/qlock/troubleshooting.md": 0.7,
    "modules/qmail/README.md": 0.7,
    "modules/qmail/api-reference.md": 0.7999999999999999,
    "modules/qmail/api.md": 0.7,
    "modules/qmail/deployment-guide.md": 0.6,
    "modules/qmail/deployment.md": 0.8999999999999999,
    "modules/qmail/examples.md": 0.7999999999999999,
    "modules/qmail/integration-guide.md": 0.9999999999999999,
    "modules/qmail/mcp-tools.md": 0.7,
    "modules/qmail/mcp.md": 0.7999999999999999,
    "modules/qmail/runbook.md": 0.8999999999999999,
    "modules/qmail/troubleshooting.md": 0.7999999999999999,
    "modules/qmarket/README.md": 0.7,
    "modules/qmarket/api-reference.md": 0.8999999999999999,
    "modules/qmarket/api.md": 0.8999999999999999,
    "modules/qmarket/deployment-guide.md": 0.6,
    "modules/qmarket/deployment.md": 0.8999999999999999,
    "modules/qmarket/examples.md": 0.7999999999999999,
    "modules/qmarket/integration-guide.md": 0.9999999999999999,
    "modules/qmarket/mcp-tools.md": 0.7999999999999999,
    "modules/qmarket/mcp.md": 0.7999999999999999,
    "modules/qmarket/runbook.md": 0.7999999999999999,
    "modules/qmarket/troubleshooting.md": 0.7999999999999999,
    "modules/qmask/README.md": 0.7,
    "modules/qmask/api-reference.md": 0.7999999999999999,
    "modules/qmask/api.md": 0.7,
    "modules/qmask/deployment-guide.md": 0.6,
    "modules/qmask/deployment.md": 0.8999999999999999,
    "modules/qmask/examples.md": 0.7999999999999999,
    "modules/qmask/integration-guide.md": 0.9999999999999999,
    "modules/qmask/mcp-tools.md": 0.7,
    "modules/qmask/mcp.md": 0.6,
    "modules/qmask/runbook.md": 0.7999999999999999,
    "modules/qmask/troubleshooting.md": 0.7999999999999999,
    "modules/qnet/README.md": 0.7,
    "modules/qnet/api-reference.md": 0.7999999999999999,
    "modules/qnet/api.md": 0.7,
    "modules/qnet/deployment-guide.md": 0.6,
    "modules/qnet/deployment.md": 0.8999999999999999,
    "modules/qnet/examples.md": 0.7999999999999999,
    "modules/qnet/integration-guide.md": 0.9999999999999999,
    "modules/qnet/mcp-tools.md": 0.7,
    "modules/qnet/mcp.md": 0.6,
    "modules/qnet/runbook.md": 0.7999999999999999,
    "modules/qnet/troubleshooting.md": 0.7999999999999999,
    "modules/qonsent/README.md": 0.7,
    "modules/qonsent/api-reference.md": 0.7,
    "modules/qonsent/api.md": 0.7,
    "modules/qonsent/deployment-guide.md": 0.6,
    "modules/qonsent/deployment.md": 0.8999999999999999,
    "modules/qonsent/examples.md": 0.7999999999999999,
    "modules/qonsent/integration-guide.md": 0.9999999999999999,
    "modules/qonsent/mcp-tools.md": 0.7,
    "modules/qonsent/mcp.md": 0.7,
    "modules/qonsent/runbook.md": 0.7999999999999999,
    "modules/qonsent/troubleshooting.md": 0.7999999999999999,
    "modules/qpic/README.md": 0.7,
    "modules/qpic/api-reference.md": 0.7999999999999999,
    "modules/qpic/api.md": 0.7,
    "modules/qpic/deployment-guide.md": 0.6,
    "modules/qpic/deployment.md": 0.8999999999999999,
    "modules/qpic/examples.md": 0.7999999999999999,
    "modules/qpic/integration-guide.md": 0.9999999999999999,
    "modules/qpic/mcp-tools.md": 0.7,
    "modules/qpic/mcp.md": 0.7,
    "modules/qpic/runbook.md": 0.7999999999999999,
    "modules/qpic/troubleshooting.md": 0.7999999999999999,
    "modules/qwallet/README.md": 0.7,
    "modules/qwallet/api-reference.md": 0.7999999999999999,
    "modules/qwallet/api.md": 0.7,
    "modules/qwallet/deployment-guide.md": 0.6,
    "modules/qwallet/deployment.md": 0.8999999999999999,
    "modules/qwallet/examples.md": 0.7999999999999999,
    "modules/qwallet/integration-guide.md": 0.9999999999999999,
    "modules/qwallet/mcp-tools.md": 0.7,
    "modules/qwallet/mcp.md": 0.7,
    "modules/qwallet/runbook.md": 0.7999999999999999,
    "modules/qwallet/troubleshooting.md": 0.7999999999999999,
    "modules/squid/README.md": 0.7,
    "modules/squid/api-reference.md": 0.7999999999999999,
    "modules/squid/api.md": 0.7,
    "modules/squid/deployment-guide.md": 0.6,
    "modules/squid/deployment.md": 0.8999999999999999,
    "modules/squid/examples.md": 0.7999999999999999,
    "modules/squid/integration-guide.md": 0.9999999999999999,
    "modules/squid/mcp-tools.md": 0.6,
    "modules/squid/mcp.md": 0.7,
    "modules/squid/runbook.md": 0.7999999999999999,
    "modules/squid/troubleshooting.md": 0.7999999999999999,
    "production-deployment-runbook.md": 0.8999999999999999,
    "qwallet-identity-expansion/README.md": 0.6,
    "qwallet-identity-expansion/components/README.md": 0.5,
    "qwallet-identity-expansion/components/WalletDashboard.md": 0.5,
    "qwallet-identity-expansion/examples/README.md": 0.6,
    "qwallet-identity-expansion/examples/components/README.md": 0.5,
    "qwallet-identity-expansion/faq.md": 0.5,
    "qwallet-identity-expansion/integration/advanced-patterns.md": 0.7999999999999999,
    "qwallet-identity-expansion/integration/overview.md": 0.6,
    "qwallet-identity-expansion/troubleshooting.md": 0.7,
    "qwallet-identity-expansion/user-guides/README.md": 0.5,
    "qwallet-identity-expansion/user-guides/root-identity.md": 0.7,
    "runbooks/README.md": 0.4,
    "runbooks/runbook-dao.md": 0.7,
    "runbooks/runbook-qchat.md": 0.8999999999999999,
    "runbooks/runbook-qdrive.md": 0.7999999999999999,
    "runbooks/runbook-qerberos.md": 0.7999999999999999,
    "runbooks/runbook-qindex.md": 0.7999999999999999,
    "runbooks/runbook-qlock.md": 0.7,
    "runbooks/runbook-qmail.md": 0.7999999999999999,
    "runbooks/runbook-qmarket.md": 0.7,
    "runbooks/runbook-qmask.md": 0.7999999999999999,
    "runbooks/runbook-qnet.md": 0.7,
    "runbooks/runbook-qonsent.md": 0.7999999999999999,
    "runbooks/runbook-qpic.md": 0.7999999999999999,
    "runbooks/runbook-qwallet.md": 0.7999999999999999,
    "runbooks/runbook-squid.md": 0.7,
    "COMPREHENSIVE_SYSTEM_TESTING_SUMMARY.md": 0.6,
    "IDENTITY_INTEGRATION_SUMMARY.md": 0.6,
    "MULTI_CHAIN_TOKEN_MANAGEMENT_SUMMARY.md": 0.7,
    "PERFORMANCE_OPTIMIZATIONS_SUMMARY.md": 0.8999999999999999,
    "QWALLET_FRONTEND_SUMMARY.md": 0.6,
    "SANDBOX_IMPLEMENTATION_SUMMARY.md": 0.7999999999999999,
    "TASK_10_IMPLEMENTATION_SUMMARY.md": 0.7,
    "TASK_17_IMPLEMENTATION_SUMMARY.md": 0.7999999999999999,
    "TASK_22_MODULE_VERSIONING_IMPLEMENTATION_SUMMARY.md": 0.7999999999999999,
    "TASK_37_IMPLEMENTATION_SUMMARY.md": 0.9999999999999999,
    "TASK_3_IMPLEMENTATION_SUMMARY.md": 0.7,
    "TASK_4_IMPLEMENTATION_SUMMARY.md": 0.7999999999999999
  },
  "timestamp": "2025-08-30T11:42:49.863Z"
}