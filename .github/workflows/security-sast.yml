name: SAST Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  eslint-security:
    name: ESLint Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint Security Rules
        run: |
          npx eslint . \
            --ext .js,.mjs,.ts,.tsx \
            --config .eslintrc.security.js \
            --format json \
            --output-file eslint-security-results.json
        continue-on-error: true
      
      - name: Upload ESLint Security Results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-security-results
          path: eslint-security-results.json

  semgrep-scan:
    name: Semgrep Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/docker
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  sonarcloud-scan:
    name: SonarCloud Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: npm run test:coverage
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security-gate:
    name: Security Quality Gate
    runs-on: ubuntu-latest
    needs: [eslint-security, semgrep-scan, codeql-analysis, sonarcloud-scan]
    if: always()
    steps:
      - name: Check Security Scan Results
        run: |
          echo "Checking security scan results..."
          
          # This would integrate with your security dashboard/API
          # to determine if security quality gates pass
          
          if [ "${{ needs.eslint-security.result }}" != "success" ]; then
            echo "ESLint security scan failed"
            exit 1
          fi
          
          if [ "${{ needs.semgrep-scan.result }}" != "success" ]; then
            echo "Semgrep security scan failed"
            exit 1
          fi
          
          if [ "${{ needs.codeql-analysis.result }}" != "success" ]; then
            echo "CodeQL security scan failed"
            exit 1
          fi
          
          echo "All security scans passed"