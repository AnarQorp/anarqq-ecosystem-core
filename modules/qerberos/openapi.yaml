openapi: 3.0.3
info:
  title: Qerberos Security & Audit API
  description: |
    Qerberos provides security monitoring, audit logging, anomaly detection, and risk scoring
    for the Q ecosystem. It offers immutable audit trails, ML-based threat detection,
    and automated compliance reporting.
  version: 1.0.0
  contact:
    name: AnarQ Team
    url: https://github.com/anarq/q-ecosystem
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://qerberos.q.anarq.org
    description: Production server

paths:
  /health:
    get:
      summary: Health check
      description: Returns the health status of the Qerberos service
      operationId: getHealth
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /audit:
    post:
      summary: Log audit event
      description: Creates an immutable audit log entry
      operationId: logAuditEvent
      tags:
        - Audit
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditEventRequest'
      responses:
        '201':
          description: Audit event logged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEventResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Search audit events
      description: Search and filter audit events
      operationId: searchAuditEvents
      tags:
        - Audit
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          description: Event type filter
          schema:
            type: string
        - name: actor
          in: query
          description: Actor identity filter
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Audit events retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEventSearchResponse'

  /audit/{id}:
    get:
      summary: Get audit event
      description: Retrieve a specific audit event by ID
      operationId: getAuditEvent
      tags:
        - Audit
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Audit event ID
          schema:
            type: string
      responses:
        '200':
          description: Audit event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEvent'
        '404':
          description: Audit event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /risk-score:
    post:
      summary: Calculate risk score
      description: Calculate risk score for an identity or operation
      operationId: calculateRiskScore
      tags:
        - Risk Scoring
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskScoreRequest'
      responses:
        '200':
          description: Risk score calculated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskScoreResponse'

  /risk-score/{identity}:
    get:
      summary: Get identity risk score
      description: Get the current risk score for an identity
      operationId: getIdentityRiskScore
      tags:
        - Risk Scoring
      security:
        - BearerAuth: []
      parameters:
        - name: identity
          in: path
          required: true
          description: Identity ID
          schema:
            type: string
      responses:
        '200':
          description: Risk score retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskScoreResponse'

  /anomaly/detect:
    post:
      summary: Detect anomalies
      description: Analyze data for anomalies and security threats
      operationId: detectAnomalies
      tags:
        - Anomaly Detection
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnomalyDetectionRequest'
      responses:
        '200':
          description: Anomaly detection completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnomalyDetectionResponse'

  /anomaly/alerts:
    get:
      summary: Get security alerts
      description: Retrieve active security alerts and anomalies
      operationId: getSecurityAlerts
      tags:
        - Anomaly Detection
      security:
        - BearerAuth: []
      parameters:
        - name: severity
          in: query
          description: Alert severity filter
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: status
          in: query
          description: Alert status filter
          schema:
            type: string
            enum: [active, resolved, dismissed]
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: Security alerts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityAlertsResponse'

  /compliance/report:
    get:
      summary: Generate compliance report
      description: Generate automated compliance report (GDPR, SOC2, etc.)
      operationId: generateComplianceReport
      tags:
        - Compliance
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          description: Report type
          schema:
            type: string
            enum: [gdpr, soc2, custom]
            default: gdpr
        - name: startDate
          in: query
          description: Report start date (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Report end date (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: format
          in: query
          description: Report format
          schema:
            type: string
            enum: [json, pdf, csv]
            default: json
      responses:
        '200':
          description: Compliance report generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplianceReportResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            uptime:
              type: number
            version:
              type: string
            dependencies:
              type: object
              additionalProperties:
                type: object
                properties:
                  status:
                    type: string
                    enum: [up, down, degraded]
                  latency:
                    type: number
                  lastCheck:
                    type: string
                    format: date-time
        timestamp:
          type: string
          format: date-time

    AuditEventRequest:
      type: object
      required:
        - type
        - ref
        - actor
        - layer
        - verdict
      properties:
        type:
          type: string
          description: Event type
        ref:
          type: string
          description: Reference to the resource or operation
        actor:
          $ref: '#/components/schemas/IdentityRef'
        layer:
          type: string
          description: Layer or service that generated the event
        verdict:
          type: string
          enum: [ALLOW, DENY, WARN]
        details:
          type: object
          description: Additional event details
        cid:
          type: string
          description: IPFS CID if applicable

    AuditEventResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            id:
              type: string
            cid:
              type: string
            timestamp:
              type: string
              format: date-time

    AuditEvent:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        ref:
          type: string
        actor:
          $ref: '#/components/schemas/IdentityRef'
        layer:
          type: string
        verdict:
          type: string
          enum: [ALLOW, DENY, WARN]
        details:
          type: object
        cid:
          type: string
        timestamp:
          type: string
          format: date-time
        signature:
          type: string

    AuditEventSearchResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            events:
              type: array
              items:
                $ref: '#/components/schemas/AuditEvent'
            totalCount:
              type: integer
            limit:
              type: integer
            offset:
              type: integer
            hasMore:
              type: boolean

    RiskScoreRequest:
      type: object
      required:
        - identity
      properties:
        identity:
          type: string
        operation:
          type: string
        context:
          type: object
        factors:
          type: array
          items:
            type: string

    RiskScoreResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            identity:
              type: string
            score:
              type: number
              minimum: 0
              maximum: 1
            level:
              type: string
              enum: [low, medium, high, critical]
            factors:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  weight:
                    type: number
                  value:
                    type: number
            timestamp:
              type: string
              format: date-time
            expiresAt:
              type: string
              format: date-time

    AnomalyDetectionRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          description: Data to analyze for anomalies
        model:
          type: string
          description: ML model to use for detection
        threshold:
          type: number
          minimum: 0
          maximum: 1
          description: Anomaly threshold

    AnomalyDetectionResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            anomalies:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  severity:
                    type: string
                    enum: [low, medium, high, critical]
                  confidence:
                    type: number
                    minimum: 0
                    maximum: 1
                  description:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
            summary:
              type: object
              properties:
                totalAnomalies:
                  type: integer
                highSeverityCount:
                  type: integer
                averageConfidence:
                  type: number

    SecurityAlertsResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            alerts:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  type:
                    type: string
                  severity:
                    type: string
                    enum: [low, medium, high, critical]
                  status:
                    type: string
                    enum: [active, resolved, dismissed]
                  description:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
            totalCount:
              type: integer

    ComplianceReportResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            reportId:
              type: string
            type:
              type: string
            period:
              type: object
              properties:
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
            summary:
              type: object
            violations:
              type: array
              items:
                type: object
            recommendations:
              type: array
              items:
                type: string
            generatedAt:
              type: string
              format: date-time

    IdentityRef:
      type: object
      required:
        - squidId
      properties:
        squidId:
          type: string
        subId:
          type: string
        daoId:
          type: string

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        code:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
        retryable:
          type: boolean
        suggestedActions:
          type: array
          items:
            type: string

tags:
  - name: Health
    description: Health check endpoints
  - name: Audit
    description: Audit logging and retrieval
  - name: Risk Scoring
    description: Risk assessment and scoring
  - name: Anomaly Detection
    description: Anomaly detection and security alerts
  - name: Compliance
    description: Compliance reporting and monitoring