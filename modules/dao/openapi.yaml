openapi: 3.0.3
info:
  title: DAO/Communities Governance API
  description: Decentralized Autonomous Organization governance module for the Q ecosystem
  version: 1.0.0
  contact:
    name: AnarQ&Q Team
    url: https://github.com/anarq/q-ecosystem
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3014
    description: Development server
  - url: https://api.anarq.org/dao
    description: Production server

paths:
  /health:
    get:
      summary: Health check endpoint
      operationId: getHealth
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/v1/daos:
    get:
      summary: List all DAOs
      operationId: listDAOs
      tags:
        - DAOs
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: visibility
          in: query
          schema:
            type: string
            enum: [public, dao-only, private]
      responses:
        '200':
          description: List of DAOs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAOListResponse'

  /api/v1/daos/{daoId}:
    get:
      summary: Get DAO details
      operationId: getDAO
      tags:
        - DAOs
      parameters:
        - name: daoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: DAO details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAOResponse'
        '404':
          description: DAO not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/daos/{daoId}/join:
    post:
      summary: Join a DAO
      operationId: joinDAO
      tags:
        - DAOs
      parameters:
        - name: daoId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinDAORequest'
      responses:
        '200':
          description: Successfully joined DAO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinDAOResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/daos/{daoId}/proposals:
    get:
      summary: List proposals for a DAO
      operationId: listProposals
      tags:
        - Proposals
      parameters:
        - name: daoId
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, closed, executed, all]
            default: all
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of proposals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalListResponse'

    post:
      summary: Create a new proposal
      operationId: createProposal
      tags:
        - Proposals
      parameters:
        - name: daoId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProposalRequest'
      responses:
        '201':
          description: Proposal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalResponse'

  /api/v1/daos/{daoId}/proposals/{proposalId}/vote:
    post:
      summary: Vote on a proposal
      operationId: voteOnProposal
      tags:
        - Voting
      parameters:
        - name: daoId
          in: path
          required: true
          schema:
            type: string
        - name: proposalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteRequest'
      responses:
        '200':
          description: Vote cast successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteResponse'

  /api/v1/daos/{daoId}/proposals/{proposalId}/execute:
    post:
      summary: Execute an approved proposal
      operationId: executeProposal
      tags:
        - Proposals
      parameters:
        - name: daoId
          in: path
          required: true
          schema:
            type: string
        - name: proposalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteProposalRequest'
      responses:
        '200':
          description: Proposal executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteProposalResponse'

  /api/v1/daos/{daoId}/results:
    get:
      summary: Get voting results for a DAO
      operationId: getResults
      tags:
        - Results
      parameters:
        - name: daoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Voting results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultsResponse'

components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        dependencies:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
                enum: [up, down, degraded]
              latency:
                type: number
              lastCheck:
                type: string
                format: date-time

    DAO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        visibility:
          type: string
          enum: [public, dao-only, private]
        memberCount:
          type: integer
        quorum:
          type: integer
        proposalCount:
          type: integer
        activeProposals:
          type: integer
        tokenRequirement:
          type: object
          properties:
            token:
              type: string
            amount:
              type: number
        governanceRules:
          type: object
          properties:
            votingDuration:
              type: integer
            proposalCreationRights:
              type: string
            votingMechanism:
              type: string
        createdAt:
          type: string
          format: date-time
        isActive:
          type: boolean

    Proposal:
      type: object
      properties:
        id:
          type: string
        daoId:
          type: string
        title:
          type: string
        description:
          type: string
        options:
          type: array
          items:
            type: string
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, closed, executed]
        voteCount:
          type: integer
        quorum:
          type: integer
        results:
          type: object
          additionalProperties:
            type: object
            properties:
              count:
                type: integer
              weight:
                type: number

    Vote:
      type: object
      properties:
        id:
          type: string
        proposalId:
          type: string
        option:
          type: string
        weight:
          type: number
        timestamp:
          type: string
          format: date-time

    DAOListResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            daos:
              type: array
              items:
                $ref: '#/components/schemas/DAO'
            pagination:
              type: object
              properties:
                total:
                  type: integer
                limit:
                  type: integer
                offset:
                  type: integer
                hasMore:
                  type: boolean

    DAOResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          $ref: '#/components/schemas/DAO'

    JoinDAORequest:
      type: object
      required:
        - userId
        - signature
      properties:
        userId:
          type: string
        signature:
          type: string

    JoinDAOResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            membership:
              type: object
              properties:
                daoId:
                  type: string
                userId:
                  type: string
                joinedAt:
                  type: string
                  format: date-time
                membershipType:
                  type: string

    CreateProposalRequest:
      type: object
      required:
        - title
        - description
        - creatorId
        - signature
      properties:
        title:
          type: string
        description:
          type: string
        options:
          type: array
          items:
            type: string
          default: ["Yes", "No"]
        duration:
          type: integer
        minQuorum:
          type: integer
        creatorId:
          type: string
        signature:
          type: string

    ProposalResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          $ref: '#/components/schemas/Proposal'

    ProposalListResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            proposals:
              type: array
              items:
                $ref: '#/components/schemas/Proposal'
            pagination:
              type: object
              properties:
                total:
                  type: integer
                limit:
                  type: integer
                offset:
                  type: integer
                hasMore:
                  type: boolean

    VoteRequest:
      type: object
      required:
        - voterId
        - option
        - signature
      properties:
        voterId:
          type: string
        option:
          type: string
        signature:
          type: string

    VoteResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            vote:
              $ref: '#/components/schemas/Vote'
            proposalStatus:
              type: object
              properties:
                voteCount:
                  type: integer
                results:
                  type: object
                quorumReached:
                  type: boolean
                status:
                  type: string

    ExecuteProposalRequest:
      type: object
      required:
        - executorId
        - signature
      properties:
        executorId:
          type: string
        signature:
          type: string

    ExecuteProposalResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            proposalId:
              type: string
            executedAt:
              type: string
              format: date-time
            executionResult:
              type: object

    ResultsResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        code:
          type: string
        message:
          type: string
        data:
          type: object
          properties:
            daoId:
              type: string
            daoName:
              type: string
            results:
              type: array
              items:
                type: object
            summary:
              type: object

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        code:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []